
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000099a  00000a2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  00800104  00800104  00000a32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000134e  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b06  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000899  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  0000325c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d0b  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004783  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 0c 03 	jmp	0x618	; 0x618 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	7b 00       	.word	0x007b	; ????
  5e:	86 00       	.word	0x0086	; ????
  60:	90 00       	.word	0x0090	; ????
  62:	9b 00       	.word	0x009b	; ????
  64:	a6 00       	.word	0x00a6	; ????
  66:	b1 00       	.word	0x00b1	; ????
  68:	bd 00       	.word	0x00bd	; ????
  6a:	c9 00       	.word	0x00c9	; ????
  6c:	d3 00       	.word	0x00d3	; ????
  6e:	df 00       	.word	0x00df	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e9       	ldi	r30, 0x9A	; 154
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 33       	cpi	r26, 0x33	; 51
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 36 03 	call	0x66c	; 0x66c <main>
  a6:	0c 94 cb 04 	jmp	0x996	; 0x996 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
}
void primes()
{
	long i = 25000;
	if (is_prime(prime) == 1){
		writeLong(i);
  ae:	e9 ef       	ldi	r30, 0xF9	; 249
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	89 27       	eor	r24, r25
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <LCD_Init>:
  bc:	e1 e6       	ldi	r30, 0x61	; 97
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	10 82       	st	Z, r1
  c6:	87 eb       	ldi	r24, 0xB7	; 183
  c8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
  d2:	80 ec       	ldi	r24, 0xC0	; 192
  d4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  de:	08 95       	ret

000000e0 <caseNumbers>:
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	f0 97       	sbiw	r30, 0x30	; 48
  e6:	ea 30       	cpi	r30, 0x0A	; 10
  e8:	f1 05       	cpc	r31, r1
  ea:	08 f0       	brcs	.+2      	; 0xee <caseNumbers+0xe>
  ec:	73 c0       	rjmp	.+230    	; 0x1d4 <caseNumbers+0xf4>
  ee:	e2 5d       	subi	r30, 0xD2	; 210
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__tablejump2__>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <reg1>
  fc:	95 e0       	ldi	r25, 0x05	; 5
  fe:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 102:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <reg3>
 106:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 10a:	08 95       	ret
 10c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <reg1>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 116:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <reg3>
 11a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
 11e:	08 95       	ret
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <reg1>
 126:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 12a:	9e e0       	ldi	r25, 0x0E	; 14
 12c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <reg3>
 130:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 134:	08 95       	ret
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <reg1>
 13c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 140:	9b e0       	ldi	r25, 0x0B	; 11
 142:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <reg3>
 146:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 14a:	08 95       	ret
 14c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <reg1>
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 156:	8b e0       	ldi	r24, 0x0B	; 11
 158:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <reg3>
 15c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
 160:	08 95       	ret
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <reg1>
 168:	94 e0       	ldi	r25, 0x04	; 4
 16a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 16e:	9b e0       	ldi	r25, 0x0B	; 11
 170:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <reg3>
 174:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 178:	08 95       	ret
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <reg1>
 180:	94 e0       	ldi	r25, 0x04	; 4
 182:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <reg3>
 18c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 190:	08 95       	ret
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <reg1>
 198:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 19c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <reg3>
 1a0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
 1a4:	08 95       	ret
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <reg1>
 1ac:	95 e0       	ldi	r25, 0x05	; 5
 1ae:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 1b2:	9f e0       	ldi	r25, 0x0F	; 15
 1b4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <reg3>
 1b8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 1bc:	08 95       	ret
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <reg1>
 1c4:	95 e0       	ldi	r25, 0x05	; 5
 1c6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 1ca:	9b e0       	ldi	r25, 0x0B	; 11
 1cc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <reg3>
 1d0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 1d4:	08 95       	ret

000001d6 <casePosition>:
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	91 05       	cpc	r25, r1
 1da:	09 f4       	brne	.+2      	; 0x1de <casePosition+0x8>
 1dc:	66 c0       	rjmp	.+204    	; 0x2aa <casePosition+0xd4>
 1de:	2c f4       	brge	.+10     	; 0x1ea <casePosition+0x14>
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	69 f0       	breq	.+26     	; 0x1fe <casePosition+0x28>
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	61 f1       	breq	.+88     	; 0x240 <casePosition+0x6a>
 1e8:	08 95       	ret
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	91 05       	cpc	r25, r1
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <casePosition+0x1c>
 1f0:	b2 c0       	rjmp	.+356    	; 0x356 <casePosition+0x180>
 1f2:	0c f4       	brge	.+2      	; 0x1f6 <casePosition+0x20>
 1f4:	7b c0       	rjmp	.+246    	; 0x2ec <casePosition+0x116>
 1f6:	05 97       	sbiw	r24, 0x05	; 5
 1f8:	09 f4       	brne	.+2      	; 0x1fc <casePosition+0x26>
 1fa:	ce c0       	rjmp	.+412    	; 0x398 <casePosition+0x1c2>
 1fc:	08 95       	ret
 1fe:	ec ee       	ldi	r30, 0xEC	; 236
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 7f       	andi	r24, 0xF0	; 240
 206:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <reg1>
 20a:	89 2b       	or	r24, r25
 20c:	80 83       	st	Z, r24
 20e:	e1 ef       	ldi	r30, 0xF1	; 241
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 21a:	89 2b       	or	r24, r25
 21c:	80 83       	st	Z, r24
 21e:	e6 ef       	ldi	r30, 0xF6	; 246
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <reg3>
 22a:	89 2b       	or	r24, r25
 22c:	80 83       	st	Z, r24
 22e:	eb ef       	ldi	r30, 0xFB	; 251
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 7f       	andi	r24, 0xF0	; 240
 236:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 23a:	89 2b       	or	r24, r25
 23c:	80 83       	st	Z, r24
 23e:	08 95       	ret
 240:	ec ee       	ldi	r30, 0xEC	; 236
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	20 81       	ld	r18, Z
 246:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <reg1>
 24a:	30 e1       	ldi	r19, 0x10	; 16
 24c:	93 9f       	mul	r25, r19
 24e:	c0 01       	movw	r24, r0
 250:	11 24       	eor	r1, r1
 252:	92 2f       	mov	r25, r18
 254:	9f 70       	andi	r25, 0x0F	; 15
 256:	89 2b       	or	r24, r25
 258:	80 83       	st	Z, r24
 25a:	e1 ef       	ldi	r30, 0xF1	; 241
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	20 81       	ld	r18, Z
 260:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 264:	30 e1       	ldi	r19, 0x10	; 16
 266:	93 9f       	mul	r25, r19
 268:	c0 01       	movw	r24, r0
 26a:	11 24       	eor	r1, r1
 26c:	92 2f       	mov	r25, r18
 26e:	9f 70       	andi	r25, 0x0F	; 15
 270:	89 2b       	or	r24, r25
 272:	80 83       	st	Z, r24
 274:	e6 ef       	ldi	r30, 0xF6	; 246
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	20 81       	ld	r18, Z
 27a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <reg3>
 27e:	30 e1       	ldi	r19, 0x10	; 16
 280:	93 9f       	mul	r25, r19
 282:	c0 01       	movw	r24, r0
 284:	11 24       	eor	r1, r1
 286:	92 2f       	mov	r25, r18
 288:	9f 70       	andi	r25, 0x0F	; 15
 28a:	89 2b       	or	r24, r25
 28c:	80 83       	st	Z, r24
 28e:	eb ef       	ldi	r30, 0xFB	; 251
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	20 81       	ld	r18, Z
 294:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 298:	30 e1       	ldi	r19, 0x10	; 16
 29a:	93 9f       	mul	r25, r19
 29c:	c0 01       	movw	r24, r0
 29e:	11 24       	eor	r1, r1
 2a0:	92 2f       	mov	r25, r18
 2a2:	9f 70       	andi	r25, 0x0F	; 15
 2a4:	89 2b       	or	r24, r25
 2a6:	80 83       	st	Z, r24
 2a8:	08 95       	ret
 2aa:	ed ee       	ldi	r30, 0xED	; 237
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	80 7f       	andi	r24, 0xF0	; 240
 2b2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <reg1>
 2b6:	89 2b       	or	r24, r25
 2b8:	80 83       	st	Z, r24
 2ba:	e2 ef       	ldi	r30, 0xF2	; 242
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	80 7f       	andi	r24, 0xF0	; 240
 2c2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 2c6:	89 2b       	or	r24, r25
 2c8:	80 83       	st	Z, r24
 2ca:	e7 ef       	ldi	r30, 0xF7	; 247
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <reg3>
 2d6:	89 2b       	or	r24, r25
 2d8:	80 83       	st	Z, r24
 2da:	ec ef       	ldi	r30, 0xFC	; 252
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	80 7f       	andi	r24, 0xF0	; 240
 2e2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 2e6:	89 2b       	or	r24, r25
 2e8:	80 83       	st	Z, r24
 2ea:	08 95       	ret
 2ec:	ed ee       	ldi	r30, 0xED	; 237
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	20 81       	ld	r18, Z
 2f2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <reg1>
 2f6:	30 e1       	ldi	r19, 0x10	; 16
 2f8:	93 9f       	mul	r25, r19
 2fa:	c0 01       	movw	r24, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	92 2f       	mov	r25, r18
 300:	9f 70       	andi	r25, 0x0F	; 15
 302:	89 2b       	or	r24, r25
 304:	80 83       	st	Z, r24
 306:	e2 ef       	ldi	r30, 0xF2	; 242
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	20 81       	ld	r18, Z
 30c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 310:	30 e1       	ldi	r19, 0x10	; 16
 312:	93 9f       	mul	r25, r19
 314:	c0 01       	movw	r24, r0
 316:	11 24       	eor	r1, r1
 318:	92 2f       	mov	r25, r18
 31a:	9f 70       	andi	r25, 0x0F	; 15
 31c:	89 2b       	or	r24, r25
 31e:	80 83       	st	Z, r24
 320:	e7 ef       	ldi	r30, 0xF7	; 247
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	20 81       	ld	r18, Z
 326:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <reg3>
 32a:	30 e1       	ldi	r19, 0x10	; 16
 32c:	93 9f       	mul	r25, r19
 32e:	c0 01       	movw	r24, r0
 330:	11 24       	eor	r1, r1
 332:	92 2f       	mov	r25, r18
 334:	9f 70       	andi	r25, 0x0F	; 15
 336:	89 2b       	or	r24, r25
 338:	80 83       	st	Z, r24
 33a:	ec ef       	ldi	r30, 0xFC	; 252
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	20 81       	ld	r18, Z
 340:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 344:	30 e1       	ldi	r19, 0x10	; 16
 346:	93 9f       	mul	r25, r19
 348:	c0 01       	movw	r24, r0
 34a:	11 24       	eor	r1, r1
 34c:	92 2f       	mov	r25, r18
 34e:	9f 70       	andi	r25, 0x0F	; 15
 350:	89 2b       	or	r24, r25
 352:	80 83       	st	Z, r24
 354:	08 95       	ret
 356:	ee ee       	ldi	r30, 0xEE	; 238
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 7f       	andi	r24, 0xF0	; 240
 35e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <reg1>
 362:	89 2b       	or	r24, r25
 364:	80 83       	st	Z, r24
 366:	e3 ef       	ldi	r30, 0xF3	; 243
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	80 7f       	andi	r24, 0xF0	; 240
 36e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 372:	89 2b       	or	r24, r25
 374:	80 83       	st	Z, r24
 376:	e8 ef       	ldi	r30, 0xF8	; 248
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	80 7f       	andi	r24, 0xF0	; 240
 37e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <reg3>
 382:	89 2b       	or	r24, r25
 384:	80 83       	st	Z, r24
 386:	ed ef       	ldi	r30, 0xFD	; 253
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	80 7f       	andi	r24, 0xF0	; 240
 38e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 392:	89 2b       	or	r24, r25
 394:	80 83       	st	Z, r24
 396:	08 95       	ret
 398:	ee ee       	ldi	r30, 0xEE	; 238
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	20 81       	ld	r18, Z
 39e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <reg1>
 3a2:	30 e1       	ldi	r19, 0x10	; 16
 3a4:	93 9f       	mul	r25, r19
 3a6:	c0 01       	movw	r24, r0
 3a8:	11 24       	eor	r1, r1
 3aa:	92 2f       	mov	r25, r18
 3ac:	9f 70       	andi	r25, 0x0F	; 15
 3ae:	89 2b       	or	r24, r25
 3b0:	80 83       	st	Z, r24
 3b2:	e3 ef       	ldi	r30, 0xF3	; 243
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	20 81       	ld	r18, Z
 3b8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 3bc:	30 e1       	ldi	r19, 0x10	; 16
 3be:	93 9f       	mul	r25, r19
 3c0:	c0 01       	movw	r24, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	92 2f       	mov	r25, r18
 3c6:	9f 70       	andi	r25, 0x0F	; 15
 3c8:	89 2b       	or	r24, r25
 3ca:	80 83       	st	Z, r24
 3cc:	e8 ef       	ldi	r30, 0xF8	; 248
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	20 81       	ld	r18, Z
 3d2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <reg3>
 3d6:	30 e1       	ldi	r19, 0x10	; 16
 3d8:	93 9f       	mul	r25, r19
 3da:	c0 01       	movw	r24, r0
 3dc:	11 24       	eor	r1, r1
 3de:	92 2f       	mov	r25, r18
 3e0:	9f 70       	andi	r25, 0x0F	; 15
 3e2:	89 2b       	or	r24, r25
 3e4:	80 83       	st	Z, r24
 3e6:	ed ef       	ldi	r30, 0xFD	; 253
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	20 81       	ld	r18, Z
 3ec:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 3f0:	30 e1       	ldi	r19, 0x10	; 16
 3f2:	93 9f       	mul	r25, r19
 3f4:	c0 01       	movw	r24, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	92 2f       	mov	r25, r18
 3fa:	9f 70       	andi	r25, 0x0F	; 15
 3fc:	89 2b       	or	r24, r25
 3fe:	80 83       	st	Z, r24
 400:	08 95       	ret

00000402 <writeChar>:
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	eb 01       	movw	r28, r22
 408:	0e 94 70 00 	call	0xe0	; 0xe0 <caseNumbers>
 40c:	ce 01       	movw	r24, r28
 40e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <casePosition>
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <is_prime>:
 418:	8f 92       	push	r8
 41a:	9f 92       	push	r9
 41c:	af 92       	push	r10
 41e:	bf 92       	push	r11
 420:	cf 92       	push	r12
 422:	df 92       	push	r13
 424:	ef 92       	push	r14
 426:	ff 92       	push	r15
 428:	4b 01       	movw	r8, r22
 42a:	5c 01       	movw	r10, r24
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	88 16       	cp	r8, r24
 430:	91 04       	cpc	r9, r1
 432:	a1 04       	cpc	r10, r1
 434:	b1 04       	cpc	r11, r1
 436:	ac f1       	brlt	.+106    	; 0x4a2 <is_prime+0x8a>
 438:	d5 01       	movw	r26, r10
 43a:	c4 01       	movw	r24, r8
 43c:	81 70       	andi	r24, 0x01	; 1
 43e:	99 27       	eor	r25, r25
 440:	aa 27       	eor	r26, r26
 442:	b0 78       	andi	r27, 0x80	; 128
 444:	bb 23       	and	r27, r27
 446:	54 f4       	brge	.+20     	; 0x45c <is_prime+0x44>
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	a1 09       	sbc	r26, r1
 44c:	b1 09       	sbc	r27, r1
 44e:	8e 6f       	ori	r24, 0xFE	; 254
 450:	9f 6f       	ori	r25, 0xFF	; 255
 452:	af 6f       	ori	r26, 0xFF	; 255
 454:	bf 6f       	ori	r27, 0xFF	; 255
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	a1 1d       	adc	r26, r1
 45a:	b1 1d       	adc	r27, r1
 45c:	89 2b       	or	r24, r25
 45e:	8a 2b       	or	r24, r26
 460:	8b 2b       	or	r24, r27
 462:	21 f1       	breq	.+72     	; 0x4ac <is_prime+0x94>
 464:	c1 2c       	mov	r12, r1
 466:	d1 2c       	mov	r13, r1
 468:	76 01       	movw	r14, r12
 46a:	68 94       	set
 46c:	c1 f8       	bld	r12, 1
 46e:	0a c0       	rjmp	.+20     	; 0x484 <is_prime+0x6c>
 470:	c5 01       	movw	r24, r10
 472:	b4 01       	movw	r22, r8
 474:	a7 01       	movw	r20, r14
 476:	96 01       	movw	r18, r12
 478:	0e 94 43 04 	call	0x886	; 0x886 <__divmodsi4>
 47c:	67 2b       	or	r22, r23
 47e:	68 2b       	or	r22, r24
 480:	69 2b       	or	r22, r25
 482:	c1 f0       	breq	.+48     	; 0x4b4 <is_prime+0x9c>
 484:	8f ef       	ldi	r24, 0xFF	; 255
 486:	c8 1a       	sub	r12, r24
 488:	d8 0a       	sbc	r13, r24
 48a:	e8 0a       	sbc	r14, r24
 48c:	f8 0a       	sbc	r15, r24
 48e:	c8 14       	cp	r12, r8
 490:	d9 04       	cpc	r13, r9
 492:	ea 04       	cpc	r14, r10
 494:	fb 04       	cpc	r15, r11
 496:	61 f7       	brne	.-40     	; 0x470 <is_prime+0x58>
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0c c0       	rjmp	.+24     	; 0x4ba <is_prime+0xa2>
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	07 c0       	rjmp	.+14     	; 0x4ba <is_prime+0xa2>
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	cb 01       	movw	r24, r22
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <is_prime+0xa2>
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	cb 01       	movw	r24, r22
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	df 90       	pop	r13
 4c0:	cf 90       	pop	r12
 4c2:	bf 90       	pop	r11
 4c4:	af 90       	pop	r10
 4c6:	9f 90       	pop	r9
 4c8:	8f 90       	pop	r8
 4ca:	08 95       	ret

000004cc <printAt>:
void blink()
{
		LCDDR13 ^= 0x01;
}

void printAt(long num, int pos) {
 4cc:	8f 92       	push	r8
 4ce:	9f 92       	push	r9
 4d0:	af 92       	push	r10
 4d2:	bf 92       	push	r11
 4d4:	cf 92       	push	r12
 4d6:	df 92       	push	r13
 4d8:	ef 92       	push	r14
 4da:	ff 92       	push	r15
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	4b 01       	movw	r8, r22
 4e2:	5c 01       	movw	r10, r24
 4e4:	ea 01       	movw	r28, r20
	//lock(&mute);
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 4e6:	24 e6       	ldi	r18, 0x64	; 100
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	0e 94 43 04 	call	0x886	; 0x886 <__divmodsi4>
 4f2:	0f 2e       	mov	r0, r31
 4f4:	fa e0       	ldi	r31, 0x0A	; 10
 4f6:	cf 2e       	mov	r12, r31
 4f8:	d1 2c       	mov	r13, r1
 4fa:	e1 2c       	mov	r14, r1
 4fc:	f1 2c       	mov	r15, r1
 4fe:	f0 2d       	mov	r31, r0
 500:	a7 01       	movw	r20, r14
 502:	96 01       	movw	r18, r12
 504:	0e 94 43 04 	call	0x886	; 0x886 <__divmodsi4>
 508:	be 01       	movw	r22, r28
 50a:	80 e3       	ldi	r24, 0x30	; 48
 50c:	82 0f       	add	r24, r18
 50e:	0e 94 01 02 	call	0x402	; 0x402 <writeChar>
	pp++;
 512:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
 514:	c5 01       	movw	r24, r10
 516:	b4 01       	movw	r22, r8
 518:	a7 01       	movw	r20, r14
 51a:	96 01       	movw	r18, r12
 51c:	0e 94 43 04 	call	0x886	; 0x886 <__divmodsi4>
 520:	86 2f       	mov	r24, r22
 522:	be 01       	movw	r22, r28
 524:	80 5d       	subi	r24, 0xD0	; 208
 526:	0e 94 01 02 	call	0x402	; 0x402 <writeChar>
	//unlock(&mute);
	//yield();
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	ff 90       	pop	r15
 530:	ef 90       	pop	r14
 532:	df 90       	pop	r13
 534:	cf 90       	pop	r12
 536:	bf 90       	pop	r11
 538:	af 90       	pop	r10
 53a:	9f 90       	pop	r9
 53c:	8f 90       	pop	r8
 53e:	08 95       	ret

00000540 <button>:

void button(){

		printAt(counter, 3);
 540:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 544:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 548:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
 54c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
 550:	43 e0       	ldi	r20, 0x03	; 3
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	0e 94 66 02 	call	0x4cc	; 0x4cc <printAt>
		counter++;
 558:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 55c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 560:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 564:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	a1 1d       	adc	r26, r1
 56c:	b1 1d       	adc	r27, r1
 56e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 572:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 576:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 57a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 57e:	08 95       	ret

00000580 <computePrimes>:
}

void computePrimes(int pos) {
 580:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 582:	c1 2c       	mov	r12, r1
 584:	d1 2c       	mov	r13, r1
 586:	76 01       	movw	r14, r12
 588:	c3 94       	inc	r12
		if (is_prime(n)) {
 58a:	c7 01       	movw	r24, r14
 58c:	b6 01       	movw	r22, r12
 58e:	0e 94 0c 02 	call	0x418	; 0x418 <is_prime>
 592:	67 2b       	or	r22, r23
 594:	68 2b       	or	r22, r24
 596:	69 2b       	or	r22, r25
 598:	29 f0       	breq	.+10     	; 0x5a4 <computePrimes+0x24>
			printAt(n, pos);
 59a:	ae 01       	movw	r20, r28
 59c:	c7 01       	movw	r24, r14
 59e:	b6 01       	movw	r22, r12
 5a0:	0e 94 66 02 	call	0x4cc	; 0x4cc <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	c8 1a       	sub	r12, r24
 5a8:	d8 0a       	sbc	r13, r24
 5aa:	e8 0a       	sbc	r14, r24
 5ac:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 5ae:	ed cf       	rjmp	.-38     	; 0x58a <computePrimes+0xa>

000005b0 <__vector_3>:
}

ISR(PCINT1_vect){
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
	if ((1 << PINB) == 1){
 5d2:	23 b1       	in	r18, 0x03	; 3
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <__vector_3+0x2e>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	2a 95       	dec	r18
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <__vector_3+0x2a>
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	41 f4       	brne	.+16     	; 0x5f6 <__vector_3+0x46>
		spawn(button,1);
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	80 ea       	ldi	r24, 0xA0	; 160
 5ec:	92 e0       	ldi	r25, 0x02	; 2
 5ee:	0e 94 68 03 	call	0x6d0	; 0x6d0 <spawn>
		yield();
 5f2:	0e 94 21 04 	call	0x842	; 0x842 <yield>
	}
}
 5f6:	ff 91       	pop	r31
 5f8:	ef 91       	pop	r30
 5fa:	bf 91       	pop	r27
 5fc:	af 91       	pop	r26
 5fe:	9f 91       	pop	r25
 600:	8f 91       	pop	r24
 602:	7f 91       	pop	r23
 604:	6f 91       	pop	r22
 606:	5f 91       	pop	r21
 608:	4f 91       	pop	r20
 60a:	3f 91       	pop	r19
 60c:	2f 91       	pop	r18
 60e:	0f 90       	pop	r0
 610:	0f be       	out	0x3f, r0	; 63
 612:	0f 90       	pop	r0
 614:	1f 90       	pop	r1
 616:	18 95       	reti

00000618 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 618:	1f 92       	push	r1
 61a:	0f 92       	push	r0
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	0f 92       	push	r0
 620:	11 24       	eor	r1, r1
 622:	2f 93       	push	r18
 624:	3f 93       	push	r19
 626:	4f 93       	push	r20
 628:	5f 93       	push	r21
 62a:	6f 93       	push	r22
 62c:	7f 93       	push	r23
 62e:	8f 93       	push	r24
 630:	9f 93       	push	r25
 632:	af 93       	push	r26
 634:	bf 93       	push	r27
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
	spawn(blink,1);
 63a:	61 e0       	ldi	r22, 0x01	; 1
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	87 e5       	ldi	r24, 0x57	; 87
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 68 03 	call	0x6d0	; 0x6d0 <spawn>
	yield();
 646:	0e 94 21 04 	call	0x842	; 0x842 <yield>
}
 64a:	ff 91       	pop	r31
 64c:	ef 91       	pop	r30
 64e:	bf 91       	pop	r27
 650:	af 91       	pop	r26
 652:	9f 91       	pop	r25
 654:	8f 91       	pop	r24
 656:	7f 91       	pop	r23
 658:	6f 91       	pop	r22
 65a:	5f 91       	pop	r21
 65c:	4f 91       	pop	r20
 65e:	3f 91       	pop	r19
 660:	2f 91       	pop	r18
 662:	0f 90       	pop	r0
 664:	0f be       	out	0x3f, r0	; 63
 666:	0f 90       	pop	r0
 668:	1f 90       	pop	r1
 66a:	18 95       	reti

0000066c <main>:

int main() {
	LCD_Init();
 66c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Init>
	
	spawn(button, 0);
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	80 ea       	ldi	r24, 0xA0	; 160
 676:	92 e0       	ldi	r25, 0x02	; 2
 678:	0e 94 68 03 	call	0x6d0	; 0x6d0 <spawn>
	spawn(blink, 0);
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	87 e5       	ldi	r24, 0x57	; 87
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 68 03 	call	0x6d0	; 0x6d0 <spawn>
	computePrimes(0);	
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 c0 02 	call	0x580	; 0x580 <computePrimes>

00000690 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	00 d0       	rcall	.+0      	; 0x696 <dispatch+0x6>
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	9a 83       	std	Y+2, r25	; 0x02
 69c:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 69e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6a6:	06 96       	adiw	r24, 0x06	; 6
 6a8:	0e 94 8a 04 	call	0x914	; 0x914 <setjmp>
 6ac:	89 2b       	or	r24, r25
 6ae:	59 f4       	brne	.+22     	; 0x6c6 <dispatch+0x36>
        current = next;
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	9a 81       	ldd	r25, Y+2	; 0x02
 6b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 6b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	06 96       	adiw	r24, 0x06	; 6
 6c2:	0e 94 aa 04 	call	0x954	; 0x954 <longjmp>
    }
}
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	08 95       	ret

000006d0 <spawn>:

void spawn(void (* function)(int), int arg) {
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <spawn+0x6>
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 6da:	f8 94       	cli
    if (!initialized) initialize();
 6dc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <initialized>
 6e0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <initialized+0x1>
 6e4:	23 2b       	or	r18, r19
 6e6:	89 f5       	brne	.+98     	; 0x74a <spawn+0x7a>
int initialized = 0;
	
static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
	threads[i].next = &threads[i+1];
 6e8:	2c ee       	ldi	r18, 0xEC	; 236
 6ea:	31 e0       	ldi	r19, 0x01	; 1
 6ec:	30 93 84 01 	sts	0x0184, r19	; 0x800184 <threads+0x5>
 6f0:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <threads+0x4>
 6f4:	29 e5       	ldi	r18, 0x59	; 89
 6f6:	32 e0       	ldi	r19, 0x02	; 2
 6f8:	30 93 f1 01 	sts	0x01F1, r19	; 0x8001f1 <threads+0x72>
 6fc:	20 93 f0 01 	sts	0x01F0, r18	; 0x8001f0 <threads+0x71>
 700:	26 ec       	ldi	r18, 0xC6	; 198
 702:	32 e0       	ldi	r19, 0x02	; 2
 704:	30 93 5e 02 	sts	0x025E, r19	; 0x80025e <threads+0xdf>
 708:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 70c:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <threads+0x14c>
 710:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <threads+0x14b>
	//External input
	EIMSK = (1 << PCIE1);
 714:	20 e8       	ldi	r18, 0x80	; 128
 716:	2d bb       	out	0x1d, r18	; 29
	PCMSK1 = (1 << PCINT15);
 718:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	//activate the button
	PORTB = (1 << PINB7);
 71c:	25 b9       	out	0x05, r18	; 5
	//timer with prescaler 1024
	TCCR1B = (1<<CS12) | (1 << CS10) | (1 << WGM12);
 71e:	2d e0       	ldi	r18, 0x0D	; 13
 720:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//500 ms period
	OCR1A = 0xF42;
 724:	22 e4       	ldi	r18, 0x42	; 66
 726:	3f e0       	ldi	r19, 0x0F	; 15
 728:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 72c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	TIMSK1 = (1 << OCIE1A);
 730:	22 e0       	ldi	r18, 0x02	; 2
 732:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	//reset timer
	TCNT1 = 0;
 736:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 73a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	initialized = 1;
 73e:	21 e0       	ldi	r18, 0x01	; 1
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <initialized+0x1>
 746:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <initialized>
		*queue = p;
	}
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 74a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 74e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 752:	3a 83       	std	Y+2, r19	; 0x02
 754:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 756:	23 2b       	or	r18, r19
 758:	a9 f0       	breq	.+42     	; 0x784 <spawn+0xb4>
        *queue = (*queue)->next;
 75a:	e9 81       	ldd	r30, Y+1	; 0x01
 75c:	fa 81       	ldd	r31, Y+2	; 0x02
 75e:	44 81       	ldd	r20, Z+4	; 0x04
 760:	55 81       	ldd	r21, Z+5	; 0x05
 762:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 766:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 76a:	91 83       	std	Z+1, r25	; 0x01
 76c:	80 83       	st	Z, r24
    newp->arg = arg;
 76e:	73 83       	std	Z+3, r23	; 0x03
 770:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 772:	15 82       	std	Z+5, r1	; 0x05
 774:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 776:	cf 01       	movw	r24, r30
 778:	06 96       	adiw	r24, 0x06	; 6
 77a:	0e 94 8a 04 	call	0x914	; 0x914 <setjmp>
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	c1 f5       	brne	.+112    	; 0x7f2 <spawn+0x122>
 782:	01 c0       	rjmp	.+2      	; 0x786 <spawn+0xb6>
 784:	ff cf       	rjmp	.-2      	; 0x784 <spawn+0xb4>
        ENABLE();
 786:	78 94       	sei
        current->function(current->arg);
 788:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 78c:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 790:	ed 91       	ld	r30, X+
 792:	fc 91       	ld	r31, X
 794:	11 97       	sbiw	r26, 0x01	; 1
 796:	12 96       	adiw	r26, 0x02	; 2
 798:	8d 91       	ld	r24, X+
 79a:	9c 91       	ld	r25, X
 79c:	13 97       	sbiw	r26, 0x03	; 3
 79e:	09 95       	icall
        DISABLE();
 7a0:	f8 94       	cli
        enqueue(current, &freeQ);
 7a2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 7a6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
	blinkTimer = 0;
}*/

static void enqueue(thread p, thread *queue) {

	p->next = NULL;
 7aa:	15 82       	std	Z+5, r1	; 0x05
 7ac:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 7ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 7b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	29 f4       	brne	.+10     	; 0x7c4 <spawn+0xf4>
		*queue = p;
 7ba:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 7be:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <spawn+0x100>
		} else {
		thread q = *queue;
		p->next = q;
 7c4:	95 83       	std	Z+5, r25	; 0x05
 7c6:	84 83       	std	Z+4, r24	; 0x04
		*queue = p;
 7c8:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 7cc:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
	}
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 7d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 7d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 7d8:	00 97       	sbiw	r24, 0x00	; 0
 7da:	51 f0       	breq	.+20     	; 0x7f0 <spawn+0x120>
        *queue = (*queue)->next;
 7dc:	fc 01       	movw	r30, r24
 7de:	24 81       	ldd	r18, Z+4	; 0x04
 7e0:	35 81       	ldd	r19, Z+5	; 0x05
 7e2:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 7e6:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 7ea:	0e 94 48 03 	call	0x690	; 0x690 <dispatch>
 7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <spawn+0x122>
 7f0:	ff cf       	rjmp	.-2      	; 0x7f0 <spawn+0x120>
    }
    SETSTACK(&newp->context, &newp->stack);
 7f2:	e9 81       	ldd	r30, Y+1	; 0x01
 7f4:	fa 81       	ldd	r31, Y+2	; 0x02
 7f6:	36 96       	adiw	r30, 0x06	; 6
 7f8:	89 81       	ldd	r24, Y+1	; 0x01
 7fa:	9a 81       	ldd	r25, Y+2	; 0x02
 7fc:	87 59       	subi	r24, 0x97	; 151
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	91 8b       	std	Z+17, r25	; 0x11
 802:	80 8b       	std	Z+16, r24	; 0x10
 804:	93 8b       	std	Z+19, r25	; 0x13
 806:	82 8b       	std	Z+18, r24	; 0x12
	blinkTimer = 0;
}*/

static void enqueue(thread p, thread *queue) {

	p->next = NULL;
 808:	e9 81       	ldd	r30, Y+1	; 0x01
 80a:	fa 81       	ldd	r31, Y+2	; 0x02
 80c:	15 82       	std	Z+5, r1	; 0x05
 80e:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 810:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 814:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
 818:	00 97       	sbiw	r24, 0x00	; 0
 81a:	29 f4       	brne	.+10     	; 0x826 <spawn+0x156>
		*queue = p;
 81c:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <readyQ+0x1>
 820:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <readyQ>
 824:	08 c0       	rjmp	.+16     	; 0x836 <spawn+0x166>
		} else {
		thread q = *queue;
		p->next = q;
 826:	e9 81       	ldd	r30, Y+1	; 0x01
 828:	fa 81       	ldd	r31, Y+2	; 0x02
 82a:	95 83       	std	Z+5, r25	; 0x05
 82c:	84 83       	std	Z+4, r24	; 0x04
		*queue = p;
 82e:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <readyQ+0x1>
 832:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 836:	78 94       	sei
}
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <yield>:

void yield(void) 
{
	DISABLE();	
 842:	f8 94       	cli
	if(readyQ != NULL){
 844:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 848:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
 84c:	00 97       	sbiw	r24, 0x00	; 0
 84e:	c9 f0       	breq	.+50     	; 0x882 <yield+0x40>
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 850:	fc 01       	movw	r30, r24
 852:	24 81       	ldd	r18, Z+4	; 0x04
 854:	35 81       	ldd	r19, Z+5	; 0x05
void yield(void) 
{
	DISABLE();	
	if(readyQ != NULL){
		thread next = dequeue(&readyQ);
		enqueue(current, &readyQ);
 856:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 85a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
	blinkTimer = 0;
}*/

static void enqueue(thread p, thread *queue) {

	p->next = NULL;
 85e:	15 82       	std	Z+5, r1	; 0x05
 860:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 862:	21 15       	cp	r18, r1
 864:	31 05       	cpc	r19, r1
 866:	29 f4       	brne	.+10     	; 0x872 <yield+0x30>
		*queue = p;
 868:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <readyQ+0x1>
 86c:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <readyQ>
 870:	06 c0       	rjmp	.+12     	; 0x87e <yield+0x3c>
		} else {
		thread q = *queue;
		p->next = q;
 872:	35 83       	std	Z+5, r19	; 0x05
 874:	24 83       	std	Z+4, r18	; 0x04
		*queue = p;
 876:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <readyQ+0x1>
 87a:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <readyQ>
{
	DISABLE();	
	if(readyQ != NULL){
		thread next = dequeue(&readyQ);
		enqueue(current, &readyQ);
		dispatch(next);
 87e:	0e 94 48 03 	call	0x690	; 0x690 <dispatch>
	} ENABLE();
 882:	78 94       	sei
 884:	08 95       	ret

00000886 <__divmodsi4>:
 886:	05 2e       	mov	r0, r21
 888:	97 fb       	bst	r25, 7
 88a:	1e f4       	brtc	.+6      	; 0x892 <__divmodsi4+0xc>
 88c:	00 94       	com	r0
 88e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__negsi2>
 892:	57 fd       	sbrc	r21, 7
 894:	07 d0       	rcall	.+14     	; 0x8a4 <__divmodsi4_neg2>
 896:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__udivmodsi4>
 89a:	07 fc       	sbrc	r0, 7
 89c:	03 d0       	rcall	.+6      	; 0x8a4 <__divmodsi4_neg2>
 89e:	4e f4       	brtc	.+18     	; 0x8b2 <__divmodsi4_exit>
 8a0:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__negsi2>

000008a4 <__divmodsi4_neg2>:
 8a4:	50 95       	com	r21
 8a6:	40 95       	com	r20
 8a8:	30 95       	com	r19
 8aa:	21 95       	neg	r18
 8ac:	3f 4f       	sbci	r19, 0xFF	; 255
 8ae:	4f 4f       	sbci	r20, 0xFF	; 255
 8b0:	5f 4f       	sbci	r21, 0xFF	; 255

000008b2 <__divmodsi4_exit>:
 8b2:	08 95       	ret

000008b4 <__negsi2>:
 8b4:	90 95       	com	r25
 8b6:	80 95       	com	r24
 8b8:	70 95       	com	r23
 8ba:	61 95       	neg	r22
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <__tablejump2__>:
 8c4:	ee 0f       	add	r30, r30
 8c6:	ff 1f       	adc	r31, r31
 8c8:	05 90       	lpm	r0, Z+
 8ca:	f4 91       	lpm	r31, Z
 8cc:	e0 2d       	mov	r30, r0
 8ce:	09 94       	ijmp

000008d0 <__udivmodsi4>:
 8d0:	a1 e2       	ldi	r26, 0x21	; 33
 8d2:	1a 2e       	mov	r1, r26
 8d4:	aa 1b       	sub	r26, r26
 8d6:	bb 1b       	sub	r27, r27
 8d8:	fd 01       	movw	r30, r26
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <__udivmodsi4_ep>

000008dc <__udivmodsi4_loop>:
 8dc:	aa 1f       	adc	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	ee 1f       	adc	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	a2 17       	cp	r26, r18
 8e6:	b3 07       	cpc	r27, r19
 8e8:	e4 07       	cpc	r30, r20
 8ea:	f5 07       	cpc	r31, r21
 8ec:	20 f0       	brcs	.+8      	; 0x8f6 <__udivmodsi4_ep>
 8ee:	a2 1b       	sub	r26, r18
 8f0:	b3 0b       	sbc	r27, r19
 8f2:	e4 0b       	sbc	r30, r20
 8f4:	f5 0b       	sbc	r31, r21

000008f6 <__udivmodsi4_ep>:
 8f6:	66 1f       	adc	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	1a 94       	dec	r1
 900:	69 f7       	brne	.-38     	; 0x8dc <__udivmodsi4_loop>
 902:	60 95       	com	r22
 904:	70 95       	com	r23
 906:	80 95       	com	r24
 908:	90 95       	com	r25
 90a:	9b 01       	movw	r18, r22
 90c:	ac 01       	movw	r20, r24
 90e:	bd 01       	movw	r22, r26
 910:	cf 01       	movw	r24, r30
 912:	08 95       	ret

00000914 <setjmp>:
 914:	dc 01       	movw	r26, r24
 916:	2d 92       	st	X+, r2
 918:	3d 92       	st	X+, r3
 91a:	4d 92       	st	X+, r4
 91c:	5d 92       	st	X+, r5
 91e:	6d 92       	st	X+, r6
 920:	7d 92       	st	X+, r7
 922:	8d 92       	st	X+, r8
 924:	9d 92       	st	X+, r9
 926:	ad 92       	st	X+, r10
 928:	bd 92       	st	X+, r11
 92a:	cd 92       	st	X+, r12
 92c:	dd 92       	st	X+, r13
 92e:	ed 92       	st	X+, r14
 930:	fd 92       	st	X+, r15
 932:	0d 93       	st	X+, r16
 934:	1d 93       	st	X+, r17
 936:	cd 93       	st	X+, r28
 938:	dd 93       	st	X+, r29
 93a:	ff 91       	pop	r31
 93c:	ef 91       	pop	r30
 93e:	8d b7       	in	r24, 0x3d	; 61
 940:	8d 93       	st	X+, r24
 942:	8e b7       	in	r24, 0x3e	; 62
 944:	8d 93       	st	X+, r24
 946:	8f b7       	in	r24, 0x3f	; 63
 948:	8d 93       	st	X+, r24
 94a:	ed 93       	st	X+, r30
 94c:	fd 93       	st	X+, r31
 94e:	88 27       	eor	r24, r24
 950:	99 27       	eor	r25, r25
 952:	09 94       	ijmp

00000954 <longjmp>:
 954:	dc 01       	movw	r26, r24
 956:	cb 01       	movw	r24, r22
 958:	81 30       	cpi	r24, 0x01	; 1
 95a:	91 05       	cpc	r25, r1
 95c:	81 1d       	adc	r24, r1
 95e:	2d 90       	ld	r2, X+
 960:	3d 90       	ld	r3, X+
 962:	4d 90       	ld	r4, X+
 964:	5d 90       	ld	r5, X+
 966:	6d 90       	ld	r6, X+
 968:	7d 90       	ld	r7, X+
 96a:	8d 90       	ld	r8, X+
 96c:	9d 90       	ld	r9, X+
 96e:	ad 90       	ld	r10, X+
 970:	bd 90       	ld	r11, X+
 972:	cd 90       	ld	r12, X+
 974:	dd 90       	ld	r13, X+
 976:	ed 90       	ld	r14, X+
 978:	fd 90       	ld	r15, X+
 97a:	0d 91       	ld	r16, X+
 97c:	1d 91       	ld	r17, X+
 97e:	cd 91       	ld	r28, X+
 980:	dd 91       	ld	r29, X+
 982:	ed 91       	ld	r30, X+
 984:	fd 91       	ld	r31, X+
 986:	0d 90       	ld	r0, X+
 988:	f8 94       	cli
 98a:	fe bf       	out	0x3e, r31	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	ed bf       	out	0x3d, r30	; 61
 990:	ed 91       	ld	r30, X+
 992:	fd 91       	ld	r31, X+
 994:	09 94       	ijmp

00000996 <_exit>:
 996:	f8 94       	cli

00000998 <__stop_program>:
 998:	ff cf       	rjmp	.-2      	; 0x998 <__stop_program>
