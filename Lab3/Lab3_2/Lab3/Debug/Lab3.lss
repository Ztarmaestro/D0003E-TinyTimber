
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000a4c  00000ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  0080010c  0080010c  00000aec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000142c  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b15  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090d  00000000  00000000  00002b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d35  00000000  00000000  00003cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000049f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	7f 00       	.word	0x007f	; ????
  5e:	8a 00       	.word	0x008a	; ????
  60:	94 00       	.word	0x0094	; ????
  62:	9f 00       	.word	0x009f	; ????
  64:	aa 00       	.word	0x00aa	; ????
  66:	b5 00       	.word	0x00b5	; ????
  68:	c1 00       	.word	0x00c1	; ????
  6a:	cd 00       	.word	0x00cd	; ????
  6c:	d7 00       	.word	0x00d7	; ????
  6e:	e3 00       	.word	0x00e3	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e4       	ldi	r30, 0x4C	; 76
  84:	fa e0       	ldi	r31, 0x0A	; 10
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 30       	cpi	r26, 0x0C	; 12
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	ac e0       	ldi	r26, 0x0C	; 12
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a7 33       	cpi	r26, 0x37	; 55
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 29 03 	call	0x652	; 0x652 <main>
  a6:	0c 94 24 05 	jmp	0xa48	; 0xa48 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
}
void primes()
{
	long i = 25000;
	if (is_prime(prime) == 1){
		writeLong(i);
  ae:	c9 ef       	ldi	r28, 0xF9	; 249
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 3a 04 	call	0x874	; 0x874 <lock>
  bc:	88 81       	ld	r24, Y
  be:	81 27       	eor	r24, r17
  c0:	88 83       	st	Y, r24
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <blink+0x6>

000000c4 <LCD_Init>:
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	10 82       	st	Z, r1
  ce:	87 eb       	ldi	r24, 0xB7	; 183
  d0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
  d4:	87 e0       	ldi	r24, 0x07	; 7
  d6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
  da:	80 ec       	ldi	r24, 0xC0	; 192
  dc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  e0:	8f e0       	ldi	r24, 0x0F	; 15
  e2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  e6:	08 95       	ret

000000e8 <caseNumbers>:
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	f0 97       	sbiw	r30, 0x30	; 48
  ee:	ea 30       	cpi	r30, 0x0A	; 10
  f0:	f1 05       	cpc	r31, r1
  f2:	08 f0       	brcs	.+2      	; 0xf6 <caseNumbers+0xe>
  f4:	73 c0       	rjmp	.+230    	; 0x1dc <caseNumbers+0xf4>
  f6:	e2 5d       	subi	r30, 0xD2	; 210
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	0c 94 bb 04 	jmp	0x976	; 0x976 <__tablejump2__>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg1>
 104:	95 e0       	ldi	r25, 0x05	; 5
 106:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <reg2>
 10a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg3>
 10e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <reg4>
 112:	08 95       	ret
 114:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg1>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <reg2>
 11e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg3>
 122:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <reg4>
 126:	08 95       	ret
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg1>
 12e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <reg2>
 132:	9e e0       	ldi	r25, 0x0E	; 14
 134:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg3>
 138:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <reg4>
 13c:	08 95       	ret
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg1>
 144:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <reg2>
 148:	9b e0       	ldi	r25, 0x0B	; 11
 14a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg3>
 14e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <reg4>
 152:	08 95       	ret
 154:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg1>
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <reg2>
 15e:	8b e0       	ldi	r24, 0x0B	; 11
 160:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg3>
 164:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <reg4>
 168:	08 95       	ret
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg1>
 170:	94 e0       	ldi	r25, 0x04	; 4
 172:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <reg2>
 176:	9b e0       	ldi	r25, 0x0B	; 11
 178:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg3>
 17c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <reg4>
 180:	08 95       	ret
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg1>
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <reg2>
 18e:	9f e0       	ldi	r25, 0x0F	; 15
 190:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg3>
 194:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <reg4>
 198:	08 95       	ret
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg1>
 1a0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <reg2>
 1a4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg3>
 1a8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <reg4>
 1ac:	08 95       	ret
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg1>
 1b4:	95 e0       	ldi	r25, 0x05	; 5
 1b6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <reg2>
 1ba:	9f e0       	ldi	r25, 0x0F	; 15
 1bc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg3>
 1c0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <reg4>
 1c4:	08 95       	ret
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg1>
 1cc:	95 e0       	ldi	r25, 0x05	; 5
 1ce:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <reg2>
 1d2:	9b e0       	ldi	r25, 0x0B	; 11
 1d4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg3>
 1d8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <reg4>
 1dc:	08 95       	ret

000001de <casePosition>:
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	91 05       	cpc	r25, r1
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <casePosition+0x8>
 1e4:	66 c0       	rjmp	.+204    	; 0x2b2 <casePosition+0xd4>
 1e6:	2c f4       	brge	.+10     	; 0x1f2 <casePosition+0x14>
 1e8:	00 97       	sbiw	r24, 0x00	; 0
 1ea:	69 f0       	breq	.+26     	; 0x206 <casePosition+0x28>
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	61 f1       	breq	.+88     	; 0x248 <casePosition+0x6a>
 1f0:	08 95       	ret
 1f2:	84 30       	cpi	r24, 0x04	; 4
 1f4:	91 05       	cpc	r25, r1
 1f6:	09 f4       	brne	.+2      	; 0x1fa <casePosition+0x1c>
 1f8:	b2 c0       	rjmp	.+356    	; 0x35e <casePosition+0x180>
 1fa:	0c f4       	brge	.+2      	; 0x1fe <casePosition+0x20>
 1fc:	7b c0       	rjmp	.+246    	; 0x2f4 <casePosition+0x116>
 1fe:	05 97       	sbiw	r24, 0x05	; 5
 200:	09 f4       	brne	.+2      	; 0x204 <casePosition+0x26>
 202:	ce c0       	rjmp	.+412    	; 0x3a0 <casePosition+0x1c2>
 204:	08 95       	ret
 206:	ec ee       	ldi	r30, 0xEC	; 236
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg1>
 212:	89 2b       	or	r24, r25
 214:	80 83       	st	Z, r24
 216:	e1 ef       	ldi	r30, 0xF1	; 241
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 7f       	andi	r24, 0xF0	; 240
 21e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <reg2>
 222:	89 2b       	or	r24, r25
 224:	80 83       	st	Z, r24
 226:	e6 ef       	ldi	r30, 0xF6	; 246
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 7f       	andi	r24, 0xF0	; 240
 22e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg3>
 232:	89 2b       	or	r24, r25
 234:	80 83       	st	Z, r24
 236:	eb ef       	ldi	r30, 0xFB	; 251
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 7f       	andi	r24, 0xF0	; 240
 23e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <reg4>
 242:	89 2b       	or	r24, r25
 244:	80 83       	st	Z, r24
 246:	08 95       	ret
 248:	ec ee       	ldi	r30, 0xEC	; 236
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	20 81       	ld	r18, Z
 24e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg1>
 252:	30 e1       	ldi	r19, 0x10	; 16
 254:	93 9f       	mul	r25, r19
 256:	c0 01       	movw	r24, r0
 258:	11 24       	eor	r1, r1
 25a:	92 2f       	mov	r25, r18
 25c:	9f 70       	andi	r25, 0x0F	; 15
 25e:	89 2b       	or	r24, r25
 260:	80 83       	st	Z, r24
 262:	e1 ef       	ldi	r30, 0xF1	; 241
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	20 81       	ld	r18, Z
 268:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <reg2>
 26c:	30 e1       	ldi	r19, 0x10	; 16
 26e:	93 9f       	mul	r25, r19
 270:	c0 01       	movw	r24, r0
 272:	11 24       	eor	r1, r1
 274:	92 2f       	mov	r25, r18
 276:	9f 70       	andi	r25, 0x0F	; 15
 278:	89 2b       	or	r24, r25
 27a:	80 83       	st	Z, r24
 27c:	e6 ef       	ldi	r30, 0xF6	; 246
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	20 81       	ld	r18, Z
 282:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg3>
 286:	30 e1       	ldi	r19, 0x10	; 16
 288:	93 9f       	mul	r25, r19
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	92 2f       	mov	r25, r18
 290:	9f 70       	andi	r25, 0x0F	; 15
 292:	89 2b       	or	r24, r25
 294:	80 83       	st	Z, r24
 296:	eb ef       	ldi	r30, 0xFB	; 251
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	20 81       	ld	r18, Z
 29c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <reg4>
 2a0:	30 e1       	ldi	r19, 0x10	; 16
 2a2:	93 9f       	mul	r25, r19
 2a4:	c0 01       	movw	r24, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	92 2f       	mov	r25, r18
 2aa:	9f 70       	andi	r25, 0x0F	; 15
 2ac:	89 2b       	or	r24, r25
 2ae:	80 83       	st	Z, r24
 2b0:	08 95       	ret
 2b2:	ed ee       	ldi	r30, 0xED	; 237
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	80 7f       	andi	r24, 0xF0	; 240
 2ba:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg1>
 2be:	89 2b       	or	r24, r25
 2c0:	80 83       	st	Z, r24
 2c2:	e2 ef       	ldi	r30, 0xF2	; 242
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	80 7f       	andi	r24, 0xF0	; 240
 2ca:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <reg2>
 2ce:	89 2b       	or	r24, r25
 2d0:	80 83       	st	Z, r24
 2d2:	e7 ef       	ldi	r30, 0xF7	; 247
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	80 7f       	andi	r24, 0xF0	; 240
 2da:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg3>
 2de:	89 2b       	or	r24, r25
 2e0:	80 83       	st	Z, r24
 2e2:	ec ef       	ldi	r30, 0xFC	; 252
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 7f       	andi	r24, 0xF0	; 240
 2ea:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <reg4>
 2ee:	89 2b       	or	r24, r25
 2f0:	80 83       	st	Z, r24
 2f2:	08 95       	ret
 2f4:	ed ee       	ldi	r30, 0xED	; 237
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	20 81       	ld	r18, Z
 2fa:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg1>
 2fe:	30 e1       	ldi	r19, 0x10	; 16
 300:	93 9f       	mul	r25, r19
 302:	c0 01       	movw	r24, r0
 304:	11 24       	eor	r1, r1
 306:	92 2f       	mov	r25, r18
 308:	9f 70       	andi	r25, 0x0F	; 15
 30a:	89 2b       	or	r24, r25
 30c:	80 83       	st	Z, r24
 30e:	e2 ef       	ldi	r30, 0xF2	; 242
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	20 81       	ld	r18, Z
 314:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <reg2>
 318:	30 e1       	ldi	r19, 0x10	; 16
 31a:	93 9f       	mul	r25, r19
 31c:	c0 01       	movw	r24, r0
 31e:	11 24       	eor	r1, r1
 320:	92 2f       	mov	r25, r18
 322:	9f 70       	andi	r25, 0x0F	; 15
 324:	89 2b       	or	r24, r25
 326:	80 83       	st	Z, r24
 328:	e7 ef       	ldi	r30, 0xF7	; 247
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	20 81       	ld	r18, Z
 32e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg3>
 332:	30 e1       	ldi	r19, 0x10	; 16
 334:	93 9f       	mul	r25, r19
 336:	c0 01       	movw	r24, r0
 338:	11 24       	eor	r1, r1
 33a:	92 2f       	mov	r25, r18
 33c:	9f 70       	andi	r25, 0x0F	; 15
 33e:	89 2b       	or	r24, r25
 340:	80 83       	st	Z, r24
 342:	ec ef       	ldi	r30, 0xFC	; 252
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	20 81       	ld	r18, Z
 348:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <reg4>
 34c:	30 e1       	ldi	r19, 0x10	; 16
 34e:	93 9f       	mul	r25, r19
 350:	c0 01       	movw	r24, r0
 352:	11 24       	eor	r1, r1
 354:	92 2f       	mov	r25, r18
 356:	9f 70       	andi	r25, 0x0F	; 15
 358:	89 2b       	or	r24, r25
 35a:	80 83       	st	Z, r24
 35c:	08 95       	ret
 35e:	ee ee       	ldi	r30, 0xEE	; 238
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	80 7f       	andi	r24, 0xF0	; 240
 366:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg1>
 36a:	89 2b       	or	r24, r25
 36c:	80 83       	st	Z, r24
 36e:	e3 ef       	ldi	r30, 0xF3	; 243
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	80 7f       	andi	r24, 0xF0	; 240
 376:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <reg2>
 37a:	89 2b       	or	r24, r25
 37c:	80 83       	st	Z, r24
 37e:	e8 ef       	ldi	r30, 0xF8	; 248
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	80 7f       	andi	r24, 0xF0	; 240
 386:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg3>
 38a:	89 2b       	or	r24, r25
 38c:	80 83       	st	Z, r24
 38e:	ed ef       	ldi	r30, 0xFD	; 253
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	80 7f       	andi	r24, 0xF0	; 240
 396:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <reg4>
 39a:	89 2b       	or	r24, r25
 39c:	80 83       	st	Z, r24
 39e:	08 95       	ret
 3a0:	ee ee       	ldi	r30, 0xEE	; 238
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	20 81       	ld	r18, Z
 3a6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg1>
 3aa:	30 e1       	ldi	r19, 0x10	; 16
 3ac:	93 9f       	mul	r25, r19
 3ae:	c0 01       	movw	r24, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	92 2f       	mov	r25, r18
 3b4:	9f 70       	andi	r25, 0x0F	; 15
 3b6:	89 2b       	or	r24, r25
 3b8:	80 83       	st	Z, r24
 3ba:	e3 ef       	ldi	r30, 0xF3	; 243
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	20 81       	ld	r18, Z
 3c0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <reg2>
 3c4:	30 e1       	ldi	r19, 0x10	; 16
 3c6:	93 9f       	mul	r25, r19
 3c8:	c0 01       	movw	r24, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	92 2f       	mov	r25, r18
 3ce:	9f 70       	andi	r25, 0x0F	; 15
 3d0:	89 2b       	or	r24, r25
 3d2:	80 83       	st	Z, r24
 3d4:	e8 ef       	ldi	r30, 0xF8	; 248
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	20 81       	ld	r18, Z
 3da:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg3>
 3de:	30 e1       	ldi	r19, 0x10	; 16
 3e0:	93 9f       	mul	r25, r19
 3e2:	c0 01       	movw	r24, r0
 3e4:	11 24       	eor	r1, r1
 3e6:	92 2f       	mov	r25, r18
 3e8:	9f 70       	andi	r25, 0x0F	; 15
 3ea:	89 2b       	or	r24, r25
 3ec:	80 83       	st	Z, r24
 3ee:	ed ef       	ldi	r30, 0xFD	; 253
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	20 81       	ld	r18, Z
 3f4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <reg4>
 3f8:	30 e1       	ldi	r19, 0x10	; 16
 3fa:	93 9f       	mul	r25, r19
 3fc:	c0 01       	movw	r24, r0
 3fe:	11 24       	eor	r1, r1
 400:	92 2f       	mov	r25, r18
 402:	9f 70       	andi	r25, 0x0F	; 15
 404:	89 2b       	or	r24, r25
 406:	80 83       	st	Z, r24
 408:	08 95       	ret

0000040a <writeChar>:
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	eb 01       	movw	r28, r22
 410:	0e 94 74 00 	call	0xe8	; 0xe8 <caseNumbers>
 414:	ce 01       	movw	r24, r28
 416:	0e 94 ef 00 	call	0x1de	; 0x1de <casePosition>
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <is_prime>:
 420:	8f 92       	push	r8
 422:	9f 92       	push	r9
 424:	af 92       	push	r10
 426:	bf 92       	push	r11
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	4b 01       	movw	r8, r22
 432:	5c 01       	movw	r10, r24
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	88 16       	cp	r8, r24
 438:	91 04       	cpc	r9, r1
 43a:	a1 04       	cpc	r10, r1
 43c:	b1 04       	cpc	r11, r1
 43e:	ac f1       	brlt	.+106    	; 0x4aa <is_prime+0x8a>
 440:	d5 01       	movw	r26, r10
 442:	c4 01       	movw	r24, r8
 444:	81 70       	andi	r24, 0x01	; 1
 446:	99 27       	eor	r25, r25
 448:	aa 27       	eor	r26, r26
 44a:	b0 78       	andi	r27, 0x80	; 128
 44c:	bb 23       	and	r27, r27
 44e:	54 f4       	brge	.+20     	; 0x464 <is_prime+0x44>
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	a1 09       	sbc	r26, r1
 454:	b1 09       	sbc	r27, r1
 456:	8e 6f       	ori	r24, 0xFE	; 254
 458:	9f 6f       	ori	r25, 0xFF	; 255
 45a:	af 6f       	ori	r26, 0xFF	; 255
 45c:	bf 6f       	ori	r27, 0xFF	; 255
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	a1 1d       	adc	r26, r1
 462:	b1 1d       	adc	r27, r1
 464:	89 2b       	or	r24, r25
 466:	8a 2b       	or	r24, r26
 468:	8b 2b       	or	r24, r27
 46a:	21 f1       	breq	.+72     	; 0x4b4 <is_prime+0x94>
 46c:	c1 2c       	mov	r12, r1
 46e:	d1 2c       	mov	r13, r1
 470:	76 01       	movw	r14, r12
 472:	68 94       	set
 474:	c1 f8       	bld	r12, 1
 476:	0a c0       	rjmp	.+20     	; 0x48c <is_prime+0x6c>
 478:	c5 01       	movw	r24, r10
 47a:	b4 01       	movw	r22, r8
 47c:	a7 01       	movw	r20, r14
 47e:	96 01       	movw	r18, r12
 480:	0e 94 9c 04 	call	0x938	; 0x938 <__divmodsi4>
 484:	67 2b       	or	r22, r23
 486:	68 2b       	or	r22, r24
 488:	69 2b       	or	r22, r25
 48a:	c1 f0       	breq	.+48     	; 0x4bc <is_prime+0x9c>
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	c8 1a       	sub	r12, r24
 490:	d8 0a       	sbc	r13, r24
 492:	e8 0a       	sbc	r14, r24
 494:	f8 0a       	sbc	r15, r24
 496:	c8 14       	cp	r12, r8
 498:	d9 04       	cpc	r13, r9
 49a:	ea 04       	cpc	r14, r10
 49c:	fb 04       	cpc	r15, r11
 49e:	61 f7       	brne	.-40     	; 0x478 <is_prime+0x58>
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0c c0       	rjmp	.+24     	; 0x4c2 <is_prime+0xa2>
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <is_prime+0xa2>
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	cb 01       	movw	r24, r22
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <is_prime+0xa2>
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	cb 01       	movw	r24, r22
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	bf 90       	pop	r11
 4cc:	af 90       	pop	r10
 4ce:	9f 90       	pop	r9
 4d0:	8f 90       	pop	r8
 4d2:	08 95       	ret

000004d4 <printAt>:
		lock(&muteBlink);
		LCDDR13 ^= 0x01;
	}
}

void printAt(long num, int pos) {
 4d4:	8f 92       	push	r8
 4d6:	9f 92       	push	r9
 4d8:	af 92       	push	r10
 4da:	bf 92       	push	r11
 4dc:	cf 92       	push	r12
 4de:	df 92       	push	r13
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	4b 01       	movw	r8, r22
 4ea:	5c 01       	movw	r10, r24
 4ec:	ea 01       	movw	r28, r20
	//lock(&mute);
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 4ee:	24 e6       	ldi	r18, 0x64	; 100
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	0e 94 9c 04 	call	0x938	; 0x938 <__divmodsi4>
 4fa:	0f 2e       	mov	r0, r31
 4fc:	fa e0       	ldi	r31, 0x0A	; 10
 4fe:	cf 2e       	mov	r12, r31
 500:	d1 2c       	mov	r13, r1
 502:	e1 2c       	mov	r14, r1
 504:	f1 2c       	mov	r15, r1
 506:	f0 2d       	mov	r31, r0
 508:	a7 01       	movw	r20, r14
 50a:	96 01       	movw	r18, r12
 50c:	0e 94 9c 04 	call	0x938	; 0x938 <__divmodsi4>
 510:	be 01       	movw	r22, r28
 512:	80 e3       	ldi	r24, 0x30	; 48
 514:	82 0f       	add	r24, r18
 516:	0e 94 05 02 	call	0x40a	; 0x40a <writeChar>
	pp++;
 51a:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
 51c:	c5 01       	movw	r24, r10
 51e:	b4 01       	movw	r22, r8
 520:	a7 01       	movw	r20, r14
 522:	96 01       	movw	r18, r12
 524:	0e 94 9c 04 	call	0x938	; 0x938 <__divmodsi4>
 528:	86 2f       	mov	r24, r22
 52a:	be 01       	movw	r22, r28
 52c:	80 5d       	subi	r24, 0xD0	; 208
 52e:	0e 94 05 02 	call	0x40a	; 0x40a <writeChar>
	//unlock(&mute);
	//yield();
}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	ff 90       	pop	r15
 538:	ef 90       	pop	r14
 53a:	df 90       	pop	r13
 53c:	cf 90       	pop	r12
 53e:	bf 90       	pop	r11
 540:	af 90       	pop	r10
 542:	9f 90       	pop	r9
 544:	8f 90       	pop	r8
 546:	08 95       	ret

00000548 <button>:

void button(){
	long counter = 0;
 548:	c1 2c       	mov	r12, r1
 54a:	d1 2c       	mov	r13, r1
 54c:	76 01       	movw	r14, r12
	while(1){
		printAt(counter, 3);
 54e:	43 e0       	ldi	r20, 0x03	; 3
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	c7 01       	movw	r24, r14
 554:	b6 01       	movw	r22, r12
 556:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <printAt>
		lock(&muteButton);
 55a:	84 e0       	ldi	r24, 0x04	; 4
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 3a 04 	call	0x874	; 0x874 <lock>
		counter++;
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	c8 1a       	sub	r12, r24
 566:	d8 0a       	sbc	r13, r24
 568:	e8 0a       	sbc	r14, r24
 56a:	f8 0a       	sbc	r15, r24
	}
 56c:	f0 cf       	rjmp	.-32     	; 0x54e <button+0x6>

0000056e <computePrimes>:
}

void computePrimes(int pos) {
 56e:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 570:	c1 2c       	mov	r12, r1
 572:	d1 2c       	mov	r13, r1
 574:	76 01       	movw	r14, r12
 576:	c3 94       	inc	r12
		if (is_prime(n)) {
 578:	c7 01       	movw	r24, r14
 57a:	b6 01       	movw	r22, r12
 57c:	0e 94 10 02 	call	0x420	; 0x420 <is_prime>
 580:	67 2b       	or	r22, r23
 582:	68 2b       	or	r22, r24
 584:	69 2b       	or	r22, r25
 586:	29 f0       	breq	.+10     	; 0x592 <computePrimes+0x24>
			printAt(n, pos);
 588:	ae 01       	movw	r20, r28
 58a:	c7 01       	movw	r24, r14
 58c:	b6 01       	movw	r22, r12
 58e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	c8 1a       	sub	r12, r24
 596:	d8 0a       	sbc	r13, r24
 598:	e8 0a       	sbc	r14, r24
 59a:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 59c:	ed cf       	rjmp	.-38     	; 0x578 <computePrimes+0xa>

0000059e <__vector_3>:
}

ISR(PCINT1_vect){
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	2f 93       	push	r18
 5aa:	3f 93       	push	r19
 5ac:	4f 93       	push	r20
 5ae:	5f 93       	push	r21
 5b0:	6f 93       	push	r22
 5b2:	7f 93       	push	r23
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
 5b8:	af 93       	push	r26
 5ba:	bf 93       	push	r27
 5bc:	ef 93       	push	r30
 5be:	ff 93       	push	r31
	if ((1 << PINB) == 1){
 5c0:	23 b1       	in	r18, 0x03	; 3
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <__vector_3+0x2e>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	2a 95       	dec	r18
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <__vector_3+0x2a>
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	31 f4       	brne	.+12     	; 0x5e0 <__vector_3+0x42>
		unlock(&muteButton);
 5d4:	84 e0       	ldi	r24, 0x04	; 4
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <unlock>
		yield();
 5dc:	0e 94 18 04 	call	0x830	; 0x830 <yield>
	}
}
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	bf 91       	pop	r27
 5e6:	af 91       	pop	r26
 5e8:	9f 91       	pop	r25
 5ea:	8f 91       	pop	r24
 5ec:	7f 91       	pop	r23
 5ee:	6f 91       	pop	r22
 5f0:	5f 91       	pop	r21
 5f2:	4f 91       	pop	r20
 5f4:	3f 91       	pop	r19
 5f6:	2f 91       	pop	r18
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 602:	1f 92       	push	r1
 604:	0f 92       	push	r0
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	0f 92       	push	r0
 60a:	11 24       	eor	r1, r1
 60c:	2f 93       	push	r18
 60e:	3f 93       	push	r19
 610:	4f 93       	push	r20
 612:	5f 93       	push	r21
 614:	6f 93       	push	r22
 616:	7f 93       	push	r23
 618:	8f 93       	push	r24
 61a:	9f 93       	push	r25
 61c:	af 93       	push	r26
 61e:	bf 93       	push	r27
 620:	ef 93       	push	r30
 622:	ff 93       	push	r31
	unlock(&muteBlink);
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	0e 94 70 04 	call	0x8e0	; 0x8e0 <unlock>
	yield();
 62c:	0e 94 18 04 	call	0x830	; 0x830 <yield>
}
 630:	ff 91       	pop	r31
 632:	ef 91       	pop	r30
 634:	bf 91       	pop	r27
 636:	af 91       	pop	r26
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	7f 91       	pop	r23
 63e:	6f 91       	pop	r22
 640:	5f 91       	pop	r21
 642:	4f 91       	pop	r20
 644:	3f 91       	pop	r19
 646:	2f 91       	pop	r18
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <main>:

int main() {
	LCD_Init();
 652:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_Init>
	
	spawn(button, 0);
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	84 ea       	ldi	r24, 0xA4	; 164
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	0e 94 5f 03 	call	0x6be	; 0x6be <spawn>
	yield();
 662:	0e 94 18 04 	call	0x830	; 0x830 <yield>
	spawn(blink, 0);
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	87 e5       	ldi	r24, 0x57	; 87
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 5f 03 	call	0x6be	; 0x6be <spawn>
	yield();
 672:	0e 94 18 04 	call	0x830	; 0x830 <yield>
	computePrimes(0);	
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 b7 02 	call	0x56e	; 0x56e <computePrimes>

0000067e <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	00 d0       	rcall	.+0      	; 0x684 <dispatch+0x6>
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	9a 83       	std	Y+2, r25	; 0x02
 68a:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 68c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current>
 690:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current+0x1>
 694:	06 96       	adiw	r24, 0x06	; 6
 696:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <setjmp>
 69a:	89 2b       	or	r24, r25
 69c:	59 f4       	brne	.+22     	; 0x6b4 <dispatch+0x36>
        current = next;
 69e:	89 81       	ldd	r24, Y+1	; 0x01
 6a0:	9a 81       	ldd	r25, Y+2	; 0x02
 6a2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <current+0x1>
 6a6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current>
        longjmp(next->context,1);
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	06 96       	adiw	r24, 0x06	; 6
 6b0:	0e 94 03 05 	call	0xa06	; 0xa06 <longjmp>
    }
}
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	08 95       	ret

000006be <spawn>:

void spawn(void (* function)(int), int arg) {
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <spawn+0x6>
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 6c8:	f8 94       	cli
    if (!initialized) initialize();
 6ca:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 6ce:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 6d2:	23 2b       	or	r18, r19
 6d4:	89 f5       	brne	.+98     	; 0x738 <spawn+0x7a>
int initialized = 0;
	
static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
	threads[i].next = &threads[i+1];
 6d6:	20 ef       	ldi	r18, 0xF0	; 240
 6d8:	31 e0       	ldi	r19, 0x01	; 1
 6da:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <threads+0x5>
 6de:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <threads+0x4>
 6e2:	2d e5       	ldi	r18, 0x5D	; 93
 6e4:	32 e0       	ldi	r19, 0x02	; 2
 6e6:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <threads+0x72>
 6ea:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <threads+0x71>
 6ee:	2a ec       	ldi	r18, 0xCA	; 202
 6f0:	32 e0       	ldi	r19, 0x02	; 2
 6f2:	30 93 62 02 	sts	0x0262, r19	; 0x800262 <threads+0xdf>
 6f6:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 6fa:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <threads+0x14c>
 6fe:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <threads+0x14b>
	//External input
	EIMSK = (1 << PCIE1);
 702:	20 e8       	ldi	r18, 0x80	; 128
 704:	2d bb       	out	0x1d, r18	; 29
	PCMSK1 = (1 << PCINT15);
 706:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	//activate the button
	PORTB = (1 << PINB7);
 70a:	25 b9       	out	0x05, r18	; 5
	//timer with prescaler 1024
	TCCR1B = (1<<CS12) | (1 << CS10) | (1 << WGM12);
 70c:	2d e0       	ldi	r18, 0x0D	; 13
 70e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//500 ms period
	OCR1A = 0xF42;
 712:	22 e4       	ldi	r18, 0x42	; 66
 714:	3f e0       	ldi	r19, 0x0F	; 15
 716:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 71a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	TIMSK1 = (1 << OCIE1A);
 71e:	22 e0       	ldi	r18, 0x02	; 2
 720:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	//reset timer
	TCNT1 = 0;
 724:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 728:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	initialized = 1;
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
 734:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
		*queue = p;
	}
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 738:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <freeQ>
 73c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <freeQ+0x1>
 740:	3a 83       	std	Y+2, r19	; 0x02
 742:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 744:	23 2b       	or	r18, r19
 746:	a9 f0       	breq	.+42     	; 0x772 <spawn+0xb4>
        *queue = (*queue)->next;
 748:	e9 81       	ldd	r30, Y+1	; 0x01
 74a:	fa 81       	ldd	r31, Y+2	; 0x02
 74c:	44 81       	ldd	r20, Z+4	; 0x04
 74e:	55 81       	ldd	r21, Z+5	; 0x05
 750:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <freeQ+0x1>
 754:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 758:	91 83       	std	Z+1, r25	; 0x01
 75a:	80 83       	st	Z, r24
    newp->arg = arg;
 75c:	73 83       	std	Z+3, r23	; 0x03
 75e:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 760:	15 82       	std	Z+5, r1	; 0x05
 762:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 764:	cf 01       	movw	r24, r30
 766:	06 96       	adiw	r24, 0x06	; 6
 768:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <setjmp>
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	c1 f5       	brne	.+112    	; 0x7e0 <spawn+0x122>
 770:	01 c0       	rjmp	.+2      	; 0x774 <spawn+0xb6>
 772:	ff cf       	rjmp	.-2      	; 0x772 <spawn+0xb4>
        ENABLE();
 774:	78 94       	sei
        current->function(current->arg);
 776:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <current>
 77a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <current+0x1>
 77e:	ed 91       	ld	r30, X+
 780:	fc 91       	ld	r31, X
 782:	11 97       	sbiw	r26, 0x01	; 1
 784:	12 96       	adiw	r26, 0x02	; 2
 786:	8d 91       	ld	r24, X+
 788:	9c 91       	ld	r25, X
 78a:	13 97       	sbiw	r26, 0x03	; 3
 78c:	09 95       	icall
        DISABLE();
 78e:	f8 94       	cli
        enqueue(current, &freeQ);
 790:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <current>
 794:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <current+0x1>
	blinkTimer = 0;
}*/

static void enqueue(thread p, thread *queue) {

	p->next = NULL;
 798:	15 82       	std	Z+5, r1	; 0x05
 79a:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 79c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <freeQ>
 7a0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <freeQ+0x1>
 7a4:	00 97       	sbiw	r24, 0x00	; 0
 7a6:	29 f4       	brne	.+10     	; 0x7b2 <spawn+0xf4>
		*queue = p;
 7a8:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <freeQ+0x1>
 7ac:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <freeQ>
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <spawn+0x100>
		} else {
		thread q = *queue;
		p->next = q;
 7b2:	95 83       	std	Z+5, r25	; 0x05
 7b4:	84 83       	std	Z+4, r24	; 0x04
		*queue = p;
 7b6:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <freeQ+0x1>
 7ba:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <freeQ>
	}
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 7be:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 7c2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
    if (*queue) {
 7c6:	00 97       	sbiw	r24, 0x00	; 0
 7c8:	51 f0       	breq	.+20     	; 0x7de <spawn+0x120>
        *queue = (*queue)->next;
 7ca:	fc 01       	movw	r30, r24
 7cc:	24 81       	ldd	r18, Z+4	; 0x04
 7ce:	35 81       	ldd	r19, Z+5	; 0x05
 7d0:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <readyQ+0x1>
 7d4:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 7d8:	0e 94 3f 03 	call	0x67e	; 0x67e <dispatch>
 7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <spawn+0x122>
 7de:	ff cf       	rjmp	.-2      	; 0x7de <spawn+0x120>
    }
    SETSTACK(&newp->context, &newp->stack);
 7e0:	e9 81       	ldd	r30, Y+1	; 0x01
 7e2:	fa 81       	ldd	r31, Y+2	; 0x02
 7e4:	36 96       	adiw	r30, 0x06	; 6
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ea:	87 59       	subi	r24, 0x97	; 151
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	91 8b       	std	Z+17, r25	; 0x11
 7f0:	80 8b       	std	Z+16, r24	; 0x10
 7f2:	93 8b       	std	Z+19, r25	; 0x13
 7f4:	82 8b       	std	Z+18, r24	; 0x12
	blinkTimer = 0;
}*/

static void enqueue(thread p, thread *queue) {

	p->next = NULL;
 7f6:	e9 81       	ldd	r30, Y+1	; 0x01
 7f8:	fa 81       	ldd	r31, Y+2	; 0x02
 7fa:	15 82       	std	Z+5, r1	; 0x05
 7fc:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 7fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 802:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
 806:	00 97       	sbiw	r24, 0x00	; 0
 808:	29 f4       	brne	.+10     	; 0x814 <spawn+0x156>
		*queue = p;
 80a:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <readyQ+0x1>
 80e:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <readyQ>
 812:	08 c0       	rjmp	.+16     	; 0x824 <spawn+0x166>
		} else {
		thread q = *queue;
		p->next = q;
 814:	e9 81       	ldd	r30, Y+1	; 0x01
 816:	fa 81       	ldd	r31, Y+2	; 0x02
 818:	95 83       	std	Z+5, r25	; 0x05
 81a:	84 83       	std	Z+4, r24	; 0x04
		*queue = p;
 81c:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <readyQ+0x1>
 820:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 824:	78 94       	sei
}
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <yield>:

void yield(void) 
{
	DISABLE();	
 830:	f8 94       	cli
	if(readyQ != NULL){
 832:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 836:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	c9 f0       	breq	.+50     	; 0x870 <yield+0x40>
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 83e:	fc 01       	movw	r30, r24
 840:	24 81       	ldd	r18, Z+4	; 0x04
 842:	35 81       	ldd	r19, Z+5	; 0x05
void yield(void) 
{
	DISABLE();	
	if(readyQ != NULL){
		thread next = dequeue(&readyQ);
		enqueue(current, &readyQ);
 844:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <current>
 848:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <current+0x1>
	blinkTimer = 0;
}*/

static void enqueue(thread p, thread *queue) {

	p->next = NULL;
 84c:	15 82       	std	Z+5, r1	; 0x05
 84e:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 850:	21 15       	cp	r18, r1
 852:	31 05       	cpc	r19, r1
 854:	29 f4       	brne	.+10     	; 0x860 <yield+0x30>
		*queue = p;
 856:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <readyQ+0x1>
 85a:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <readyQ>
 85e:	06 c0       	rjmp	.+12     	; 0x86c <yield+0x3c>
		} else {
		thread q = *queue;
		p->next = q;
 860:	35 83       	std	Z+5, r19	; 0x05
 862:	24 83       	std	Z+4, r18	; 0x04
		*queue = p;
 864:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <readyQ+0x1>
 868:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <readyQ>
{
	DISABLE();	
	if(readyQ != NULL){
		thread next = dequeue(&readyQ);
		enqueue(current, &readyQ);
		dispatch(next);
 86c:	0e 94 3f 03 	call	0x67e	; 0x67e <dispatch>
	} ENABLE();
 870:	78 94       	sei
 872:	08 95       	ret

00000874 <lock>:
}

void lock(mutex *m) {
 874:	fc 01       	movw	r30, r24
	DISABLE();
 876:	f8 94       	cli
	if(m->locked == 0){
 878:	80 81       	ld	r24, Z
 87a:	91 81       	ldd	r25, Z+1	; 0x01
 87c:	89 2b       	or	r24, r25
 87e:	29 f4       	brne	.+10     	; 0x88a <lock+0x16>
		m->locked = 1;
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	91 83       	std	Z+1, r25	; 0x01
 886:	80 83       	st	Z, r24
 888:	29 c0       	rjmp	.+82     	; 0x8dc <lock+0x68>
		*queue = p;
	}
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 88a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <readyQ>
 88e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <readyQ+0x1>
    if (*queue) {
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	b9 f0       	breq	.+46     	; 0x8c4 <lock+0x50>
        *queue = (*queue)->next;
 896:	dc 01       	movw	r26, r24
 898:	14 96       	adiw	r26, 0x04	; 4
 89a:	2d 91       	ld	r18, X+
 89c:	3c 91       	ld	r19, X
 89e:	15 97       	sbiw	r26, 0x05	; 5
 8a0:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <readyQ+0x1>
 8a4:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <readyQ>
	if(m->locked == 0){
		m->locked = 1;
	}
	else{
		thread next = dequeue(&readyQ);
		enqueue(current, &(m->waitQ));
 8a8:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <current>
 8ac:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <current+0x1>
	blinkTimer = 0;
}*/

static void enqueue(thread p, thread *queue) {

	p->next = NULL;
 8b0:	15 96       	adiw	r26, 0x05	; 5
 8b2:	1c 92       	st	X, r1
 8b4:	1e 92       	st	-X, r1
 8b6:	14 97       	sbiw	r26, 0x04	; 4
	if (*queue == NULL) {
 8b8:	22 81       	ldd	r18, Z+2	; 0x02
 8ba:	33 81       	ldd	r19, Z+3	; 0x03
 8bc:	21 15       	cp	r18, r1
 8be:	31 05       	cpc	r19, r1
 8c0:	29 f4       	brne	.+10     	; 0x8cc <lock+0x58>
 8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <lock+0x52>
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <lock+0x50>
		*queue = p;
 8c6:	b3 83       	std	Z+3, r27	; 0x03
 8c8:	a2 83       	std	Z+2, r26	; 0x02
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <lock+0x64>
		} else {
		thread q = *queue;
		p->next = q;
 8cc:	15 96       	adiw	r26, 0x05	; 5
 8ce:	3c 93       	st	X, r19
 8d0:	2e 93       	st	-X, r18
 8d2:	14 97       	sbiw	r26, 0x04	; 4
		*queue = p;
 8d4:	b3 83       	std	Z+3, r27	; 0x03
 8d6:	a2 83       	std	Z+2, r26	; 0x02
		m->locked = 1;
	}
	else{
		thread next = dequeue(&readyQ);
		enqueue(current, &(m->waitQ));
		dispatch(next);
 8d8:	0e 94 3f 03 	call	0x67e	; 0x67e <dispatch>
	}
	ENABLE();
 8dc:	78 94       	sei
 8de:	08 95       	ret

000008e0 <unlock>:
}

void unlock(mutex *m) {
 8e0:	fc 01       	movw	r30, r24
	DISABLE();
 8e2:	f8 94       	cli
	if(m->waitQ != 0){
 8e4:	82 81       	ldd	r24, Z+2	; 0x02
 8e6:	93 81       	ldd	r25, Z+3	; 0x03
 8e8:	00 97       	sbiw	r24, 0x00	; 0
 8ea:	11 f1       	breq	.+68     	; 0x930 <unlock+0x50>
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 8ec:	dc 01       	movw	r26, r24
 8ee:	14 96       	adiw	r26, 0x04	; 4
 8f0:	2d 91       	ld	r18, X+
 8f2:	3c 91       	ld	r19, X
 8f4:	15 97       	sbiw	r26, 0x05	; 5
 8f6:	33 83       	std	Z+3, r19	; 0x03
 8f8:	22 83       	std	Z+2, r18	; 0x02

void unlock(mutex *m) {
	DISABLE();
	if(m->waitQ != 0){
		thread next = dequeue(&(m->waitQ));
		enqueue(current, &readyQ);
 8fa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <current>
 8fe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <current+0x1>
	blinkTimer = 0;
}*/

static void enqueue(thread p, thread *queue) {

	p->next = NULL;
 902:	15 82       	std	Z+5, r1	; 0x05
 904:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 906:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <readyQ>
 90a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <readyQ+0x1>
 90e:	21 15       	cp	r18, r1
 910:	31 05       	cpc	r19, r1
 912:	29 f4       	brne	.+10     	; 0x91e <unlock+0x3e>
		*queue = p;
 914:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <readyQ+0x1>
 918:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <readyQ>
 91c:	06 c0       	rjmp	.+12     	; 0x92a <unlock+0x4a>
		} else {
		thread q = *queue;
		p->next = q;
 91e:	35 83       	std	Z+5, r19	; 0x05
 920:	24 83       	std	Z+4, r18	; 0x04
		*queue = p;
 922:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <readyQ+0x1>
 926:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <readyQ>
void unlock(mutex *m) {
	DISABLE();
	if(m->waitQ != 0){
		thread next = dequeue(&(m->waitQ));
		enqueue(current, &readyQ);
		dispatch(next);
 92a:	0e 94 3f 03 	call	0x67e	; 0x67e <dispatch>
 92e:	02 c0       	rjmp	.+4      	; 0x934 <unlock+0x54>
	}
	else{
		m->locked = 0;
 930:	11 82       	std	Z+1, r1	; 0x01
 932:	10 82       	st	Z, r1
	}
	ENABLE();
 934:	78 94       	sei
 936:	08 95       	ret

00000938 <__divmodsi4>:
 938:	05 2e       	mov	r0, r21
 93a:	97 fb       	bst	r25, 7
 93c:	1e f4       	brtc	.+6      	; 0x944 <__divmodsi4+0xc>
 93e:	00 94       	com	r0
 940:	0e 94 b3 04 	call	0x966	; 0x966 <__negsi2>
 944:	57 fd       	sbrc	r21, 7
 946:	07 d0       	rcall	.+14     	; 0x956 <__divmodsi4_neg2>
 948:	0e 94 c1 04 	call	0x982	; 0x982 <__udivmodsi4>
 94c:	07 fc       	sbrc	r0, 7
 94e:	03 d0       	rcall	.+6      	; 0x956 <__divmodsi4_neg2>
 950:	4e f4       	brtc	.+18     	; 0x964 <__divmodsi4_exit>
 952:	0c 94 b3 04 	jmp	0x966	; 0x966 <__negsi2>

00000956 <__divmodsi4_neg2>:
 956:	50 95       	com	r21
 958:	40 95       	com	r20
 95a:	30 95       	com	r19
 95c:	21 95       	neg	r18
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
 960:	4f 4f       	sbci	r20, 0xFF	; 255
 962:	5f 4f       	sbci	r21, 0xFF	; 255

00000964 <__divmodsi4_exit>:
 964:	08 95       	ret

00000966 <__negsi2>:
 966:	90 95       	com	r25
 968:	80 95       	com	r24
 96a:	70 95       	com	r23
 96c:	61 95       	neg	r22
 96e:	7f 4f       	sbci	r23, 0xFF	; 255
 970:	8f 4f       	sbci	r24, 0xFF	; 255
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	08 95       	ret

00000976 <__tablejump2__>:
 976:	ee 0f       	add	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	05 90       	lpm	r0, Z+
 97c:	f4 91       	lpm	r31, Z
 97e:	e0 2d       	mov	r30, r0
 980:	09 94       	ijmp

00000982 <__udivmodsi4>:
 982:	a1 e2       	ldi	r26, 0x21	; 33
 984:	1a 2e       	mov	r1, r26
 986:	aa 1b       	sub	r26, r26
 988:	bb 1b       	sub	r27, r27
 98a:	fd 01       	movw	r30, r26
 98c:	0d c0       	rjmp	.+26     	; 0x9a8 <__udivmodsi4_ep>

0000098e <__udivmodsi4_loop>:
 98e:	aa 1f       	adc	r26, r26
 990:	bb 1f       	adc	r27, r27
 992:	ee 1f       	adc	r30, r30
 994:	ff 1f       	adc	r31, r31
 996:	a2 17       	cp	r26, r18
 998:	b3 07       	cpc	r27, r19
 99a:	e4 07       	cpc	r30, r20
 99c:	f5 07       	cpc	r31, r21
 99e:	20 f0       	brcs	.+8      	; 0x9a8 <__udivmodsi4_ep>
 9a0:	a2 1b       	sub	r26, r18
 9a2:	b3 0b       	sbc	r27, r19
 9a4:	e4 0b       	sbc	r30, r20
 9a6:	f5 0b       	sbc	r31, r21

000009a8 <__udivmodsi4_ep>:
 9a8:	66 1f       	adc	r22, r22
 9aa:	77 1f       	adc	r23, r23
 9ac:	88 1f       	adc	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	1a 94       	dec	r1
 9b2:	69 f7       	brne	.-38     	; 0x98e <__udivmodsi4_loop>
 9b4:	60 95       	com	r22
 9b6:	70 95       	com	r23
 9b8:	80 95       	com	r24
 9ba:	90 95       	com	r25
 9bc:	9b 01       	movw	r18, r22
 9be:	ac 01       	movw	r20, r24
 9c0:	bd 01       	movw	r22, r26
 9c2:	cf 01       	movw	r24, r30
 9c4:	08 95       	ret

000009c6 <setjmp>:
 9c6:	dc 01       	movw	r26, r24
 9c8:	2d 92       	st	X+, r2
 9ca:	3d 92       	st	X+, r3
 9cc:	4d 92       	st	X+, r4
 9ce:	5d 92       	st	X+, r5
 9d0:	6d 92       	st	X+, r6
 9d2:	7d 92       	st	X+, r7
 9d4:	8d 92       	st	X+, r8
 9d6:	9d 92       	st	X+, r9
 9d8:	ad 92       	st	X+, r10
 9da:	bd 92       	st	X+, r11
 9dc:	cd 92       	st	X+, r12
 9de:	dd 92       	st	X+, r13
 9e0:	ed 92       	st	X+, r14
 9e2:	fd 92       	st	X+, r15
 9e4:	0d 93       	st	X+, r16
 9e6:	1d 93       	st	X+, r17
 9e8:	cd 93       	st	X+, r28
 9ea:	dd 93       	st	X+, r29
 9ec:	ff 91       	pop	r31
 9ee:	ef 91       	pop	r30
 9f0:	8d b7       	in	r24, 0x3d	; 61
 9f2:	8d 93       	st	X+, r24
 9f4:	8e b7       	in	r24, 0x3e	; 62
 9f6:	8d 93       	st	X+, r24
 9f8:	8f b7       	in	r24, 0x3f	; 63
 9fa:	8d 93       	st	X+, r24
 9fc:	ed 93       	st	X+, r30
 9fe:	fd 93       	st	X+, r31
 a00:	88 27       	eor	r24, r24
 a02:	99 27       	eor	r25, r25
 a04:	09 94       	ijmp

00000a06 <longjmp>:
 a06:	dc 01       	movw	r26, r24
 a08:	cb 01       	movw	r24, r22
 a0a:	81 30       	cpi	r24, 0x01	; 1
 a0c:	91 05       	cpc	r25, r1
 a0e:	81 1d       	adc	r24, r1
 a10:	2d 90       	ld	r2, X+
 a12:	3d 90       	ld	r3, X+
 a14:	4d 90       	ld	r4, X+
 a16:	5d 90       	ld	r5, X+
 a18:	6d 90       	ld	r6, X+
 a1a:	7d 90       	ld	r7, X+
 a1c:	8d 90       	ld	r8, X+
 a1e:	9d 90       	ld	r9, X+
 a20:	ad 90       	ld	r10, X+
 a22:	bd 90       	ld	r11, X+
 a24:	cd 90       	ld	r12, X+
 a26:	dd 90       	ld	r13, X+
 a28:	ed 90       	ld	r14, X+
 a2a:	fd 90       	ld	r15, X+
 a2c:	0d 91       	ld	r16, X+
 a2e:	1d 91       	ld	r17, X+
 a30:	cd 91       	ld	r28, X+
 a32:	dd 91       	ld	r29, X+
 a34:	ed 91       	ld	r30, X+
 a36:	fd 91       	ld	r31, X+
 a38:	0d 90       	ld	r0, X+
 a3a:	f8 94       	cli
 a3c:	fe bf       	out	0x3e, r31	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	ed bf       	out	0x3d, r30	; 61
 a42:	ed 91       	ld	r30, X+
 a44:	fd 91       	ld	r31, X+
 a46:	09 94       	ijmp

00000a48 <_exit>:
 a48:	f8 94       	cli

00000a4a <__stop_program>:
 a4a:	ff cf       	rjmp	.-2      	; 0xa4a <__stop_program>
