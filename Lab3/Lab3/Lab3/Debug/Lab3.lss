
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000a3e  00000ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  00800104  00800104  00000ad6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001309  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b85  00000000  00000000  00001f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ad  00000000  00000000  00002aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057e  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bda  00000000  00000000  00003b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000476c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	b3 00       	.word	0x00b3	; ????
  5e:	be 00       	.word	0x00be	; ????
  60:	c8 00       	.word	0x00c8	; ????
  62:	d3 00       	.word	0x00d3	; ????
  64:	de 00       	.word	0x00de	; ????
  66:	e9 00       	.word	0x00e9	; ????
  68:	f5 00       	.word	0x00f5	; ????
  6a:	01 01       	movw	r0, r2
  6c:	0b 01       	movw	r0, r22
  6e:	17 01       	movw	r2, r14

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e3       	ldi	r30, 0x3E	; 62
  84:	fa e0       	ldi	r31, 0x0A	; 10
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 33       	cpi	r26, 0x33	; 51
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 4c 03 	call	0x698	; 0x698 <main>
  a6:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <button>:
{
	unsigned int timer1 = 0x3D08;
	//xoring the register and then resets TCNT1
	if (TCNT1 >= timer1){
		LCDDR13 ^= 0x01;
		TCNT1 = 0;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ee ef       	ldi	r30, 0xFE	; 254
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	23 b1       	in	r18, 0x03	; 3
  ba:	bc 01       	movw	r22, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <button+0x14>
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	2a 95       	dec	r18
  c4:	e2 f7       	brpl	.-8      	; 0xbe <button+0x10>
  c6:	67 2b       	or	r22, r23
  c8:	b1 f4       	brne	.+44     	; 0xf6 <button+0x48>
  ca:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <isPressed>
  ce:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <isPressed+0x1>
  d2:	21 30       	cpi	r18, 0x01	; 1
  d4:	31 05       	cpc	r19, r1
  d6:	79 f4       	brne	.+30     	; 0xf6 <button+0x48>
  d8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <isPressed+0x1>
  dc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <isPressed>
  e0:	23 b1       	in	r18, 0x03	; 3
  e2:	bc 01       	movw	r22, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <button+0x3c>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	2a 95       	dec	r18
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <button+0x38>
  ee:	61 30       	cpi	r22, 0x01	; 1
  f0:	71 05       	cpc	r23, r1
  f2:	11 f7       	brne	.-60     	; 0xb8 <button+0xa>
  f4:	10 c0       	rjmp	.+32     	; 0x116 <button+0x68>
  f6:	23 b1       	in	r18, 0x03	; 3
  f8:	bc 01       	movw	r22, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <button+0x52>
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	2a 95       	dec	r18
 102:	e2 f7       	brpl	.-8      	; 0xfc <button+0x4e>
 104:	61 30       	cpi	r22, 0x01	; 1
 106:	71 05       	cpc	r23, r1
 108:	b9 f6       	brne	.-82     	; 0xb8 <button+0xa>
 10a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <isPressed>
 10e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <isPressed+0x1>
 112:	23 2b       	or	r18, r19
 114:	89 f6       	brne	.-94     	; 0xb8 <button+0xa>
 116:	20 81       	ld	r18, Z
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	11 f4       	brne	.+4      	; 0x120 <button+0x72>
 11c:	10 82       	st	Z, r1
 11e:	01 c0       	rjmp	.+2      	; 0x122 <button+0x74>
 120:	40 83       	st	Z, r20
 122:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <isPressed+0x1>
 126:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <isPressed>
 12a:	c6 cf       	rjmp	.-116    	; 0xb8 <button+0xa>

0000012c <LCD_Init>:
 12c:	e1 e6       	ldi	r30, 0x61	; 97
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	80 83       	st	Z, r24
 134:	10 82       	st	Z, r1
 136:	87 eb       	ldi	r24, 0xB7	; 183
 138:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
 142:	80 ec       	ldi	r24, 0xC0	; 192
 144:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
 14e:	08 95       	ret

00000150 <caseNumbers>:
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	f0 97       	sbiw	r30, 0x30	; 48
 156:	ea 30       	cpi	r30, 0x0A	; 10
 158:	f1 05       	cpc	r31, r1
 15a:	08 f0       	brcs	.+2      	; 0x15e <caseNumbers+0xe>
 15c:	73 c0       	rjmp	.+230    	; 0x244 <caseNumbers+0xf4>
 15e:	e2 5d       	subi	r30, 0xD2	; 210
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	0c 94 b4 04 	jmp	0x968	; 0x968 <__tablejump2__>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
 16c:	95 e0       	ldi	r25, 0x05	; 5
 16e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 172:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
 176:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 17a:	08 95       	ret
 17c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <reg1>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 186:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reg3>
 18a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
 18e:	08 95       	ret
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
 196:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 19a:	9e e0       	ldi	r25, 0x0E	; 14
 19c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
 1a0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 1a4:	08 95       	ret
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
 1ac:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 1b0:	9b e0       	ldi	r25, 0x0B	; 11
 1b2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
 1b6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 1ba:	08 95       	ret
 1bc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <reg1>
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 1c6:	8b e0       	ldi	r24, 0x0B	; 11
 1c8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reg3>
 1cc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
 1d0:	08 95       	ret
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 1de:	9b e0       	ldi	r25, 0x0B	; 11
 1e0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
 1e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 1e8:	08 95       	ret
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
 1f0:	94 e0       	ldi	r25, 0x04	; 4
 1f2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
 1fc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
 208:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
 20c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reg3>
 210:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
 214:	08 95       	ret
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
 21c:	95 e0       	ldi	r25, 0x05	; 5
 21e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
 228:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 22c:	08 95       	ret
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
 234:	95 e0       	ldi	r25, 0x05	; 5
 236:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
 23a:	9b e0       	ldi	r25, 0x0B	; 11
 23c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
 240:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 244:	08 95       	ret

00000246 <casePosition>:
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	91 05       	cpc	r25, r1
 24a:	09 f4       	brne	.+2      	; 0x24e <casePosition+0x8>
 24c:	66 c0       	rjmp	.+204    	; 0x31a <casePosition+0xd4>
 24e:	2c f4       	brge	.+10     	; 0x25a <casePosition+0x14>
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	69 f0       	breq	.+26     	; 0x26e <casePosition+0x28>
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	61 f1       	breq	.+88     	; 0x2b0 <casePosition+0x6a>
 258:	08 95       	ret
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	91 05       	cpc	r25, r1
 25e:	09 f4       	brne	.+2      	; 0x262 <casePosition+0x1c>
 260:	b2 c0       	rjmp	.+356    	; 0x3c6 <casePosition+0x180>
 262:	0c f4       	brge	.+2      	; 0x266 <casePosition+0x20>
 264:	7b c0       	rjmp	.+246    	; 0x35c <casePosition+0x116>
 266:	05 97       	sbiw	r24, 0x05	; 5
 268:	09 f4       	brne	.+2      	; 0x26c <casePosition+0x26>
 26a:	ce c0       	rjmp	.+412    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 26c:	08 95       	ret
 26e:	ec ee       	ldi	r30, 0xEC	; 236
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 27a:	89 2b       	or	r24, r25
 27c:	80 83       	st	Z, r24
 27e:	e1 ef       	ldi	r30, 0xF1	; 241
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 7f       	andi	r24, 0xF0	; 240
 286:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 28a:	89 2b       	or	r24, r25
 28c:	80 83       	st	Z, r24
 28e:	e6 ef       	ldi	r30, 0xF6	; 246
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	80 7f       	andi	r24, 0xF0	; 240
 296:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 29a:	89 2b       	or	r24, r25
 29c:	80 83       	st	Z, r24
 29e:	eb ef       	ldi	r30, 0xFB	; 251
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	80 7f       	andi	r24, 0xF0	; 240
 2a6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 2aa:	89 2b       	or	r24, r25
 2ac:	80 83       	st	Z, r24
 2ae:	08 95       	ret
 2b0:	ec ee       	ldi	r30, 0xEC	; 236
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	20 81       	ld	r18, Z
 2b6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 2ba:	30 e1       	ldi	r19, 0x10	; 16
 2bc:	93 9f       	mul	r25, r19
 2be:	c0 01       	movw	r24, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	92 2f       	mov	r25, r18
 2c4:	9f 70       	andi	r25, 0x0F	; 15
 2c6:	89 2b       	or	r24, r25
 2c8:	80 83       	st	Z, r24
 2ca:	e1 ef       	ldi	r30, 0xF1	; 241
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	20 81       	ld	r18, Z
 2d0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 2d4:	30 e1       	ldi	r19, 0x10	; 16
 2d6:	93 9f       	mul	r25, r19
 2d8:	c0 01       	movw	r24, r0
 2da:	11 24       	eor	r1, r1
 2dc:	92 2f       	mov	r25, r18
 2de:	9f 70       	andi	r25, 0x0F	; 15
 2e0:	89 2b       	or	r24, r25
 2e2:	80 83       	st	Z, r24
 2e4:	e6 ef       	ldi	r30, 0xF6	; 246
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	20 81       	ld	r18, Z
 2ea:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 2ee:	30 e1       	ldi	r19, 0x10	; 16
 2f0:	93 9f       	mul	r25, r19
 2f2:	c0 01       	movw	r24, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	92 2f       	mov	r25, r18
 2f8:	9f 70       	andi	r25, 0x0F	; 15
 2fa:	89 2b       	or	r24, r25
 2fc:	80 83       	st	Z, r24
 2fe:	eb ef       	ldi	r30, 0xFB	; 251
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	20 81       	ld	r18, Z
 304:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 308:	30 e1       	ldi	r19, 0x10	; 16
 30a:	93 9f       	mul	r25, r19
 30c:	c0 01       	movw	r24, r0
 30e:	11 24       	eor	r1, r1
 310:	92 2f       	mov	r25, r18
 312:	9f 70       	andi	r25, 0x0F	; 15
 314:	89 2b       	or	r24, r25
 316:	80 83       	st	Z, r24
 318:	08 95       	ret
 31a:	ed ee       	ldi	r30, 0xED	; 237
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	80 7f       	andi	r24, 0xF0	; 240
 322:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 326:	89 2b       	or	r24, r25
 328:	80 83       	st	Z, r24
 32a:	e2 ef       	ldi	r30, 0xF2	; 242
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	80 7f       	andi	r24, 0xF0	; 240
 332:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 336:	89 2b       	or	r24, r25
 338:	80 83       	st	Z, r24
 33a:	e7 ef       	ldi	r30, 0xF7	; 247
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	80 7f       	andi	r24, 0xF0	; 240
 342:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 346:	89 2b       	or	r24, r25
 348:	80 83       	st	Z, r24
 34a:	ec ef       	ldi	r30, 0xFC	; 252
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	80 7f       	andi	r24, 0xF0	; 240
 352:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 356:	89 2b       	or	r24, r25
 358:	80 83       	st	Z, r24
 35a:	08 95       	ret
 35c:	ed ee       	ldi	r30, 0xED	; 237
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	20 81       	ld	r18, Z
 362:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 366:	30 e1       	ldi	r19, 0x10	; 16
 368:	93 9f       	mul	r25, r19
 36a:	c0 01       	movw	r24, r0
 36c:	11 24       	eor	r1, r1
 36e:	92 2f       	mov	r25, r18
 370:	9f 70       	andi	r25, 0x0F	; 15
 372:	89 2b       	or	r24, r25
 374:	80 83       	st	Z, r24
 376:	e2 ef       	ldi	r30, 0xF2	; 242
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	20 81       	ld	r18, Z
 37c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 380:	30 e1       	ldi	r19, 0x10	; 16
 382:	93 9f       	mul	r25, r19
 384:	c0 01       	movw	r24, r0
 386:	11 24       	eor	r1, r1
 388:	92 2f       	mov	r25, r18
 38a:	9f 70       	andi	r25, 0x0F	; 15
 38c:	89 2b       	or	r24, r25
 38e:	80 83       	st	Z, r24
 390:	e7 ef       	ldi	r30, 0xF7	; 247
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	20 81       	ld	r18, Z
 396:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 39a:	30 e1       	ldi	r19, 0x10	; 16
 39c:	93 9f       	mul	r25, r19
 39e:	c0 01       	movw	r24, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	92 2f       	mov	r25, r18
 3a4:	9f 70       	andi	r25, 0x0F	; 15
 3a6:	89 2b       	or	r24, r25
 3a8:	80 83       	st	Z, r24
 3aa:	ec ef       	ldi	r30, 0xFC	; 252
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	20 81       	ld	r18, Z
 3b0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 3b4:	30 e1       	ldi	r19, 0x10	; 16
 3b6:	93 9f       	mul	r25, r19
 3b8:	c0 01       	movw	r24, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	92 2f       	mov	r25, r18
 3be:	9f 70       	andi	r25, 0x0F	; 15
 3c0:	89 2b       	or	r24, r25
 3c2:	80 83       	st	Z, r24
 3c4:	08 95       	ret
 3c6:	ee ee       	ldi	r30, 0xEE	; 238
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	80 7f       	andi	r24, 0xF0	; 240
 3ce:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 3d2:	89 2b       	or	r24, r25
 3d4:	80 83       	st	Z, r24
 3d6:	e3 ef       	ldi	r30, 0xF3	; 243
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	80 7f       	andi	r24, 0xF0	; 240
 3de:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 3e2:	89 2b       	or	r24, r25
 3e4:	80 83       	st	Z, r24
 3e6:	e8 ef       	ldi	r30, 0xF8	; 248
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 7f       	andi	r24, 0xF0	; 240
 3ee:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 3f2:	89 2b       	or	r24, r25
 3f4:	80 83       	st	Z, r24
 3f6:	ed ef       	ldi	r30, 0xFD	; 253
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	80 7f       	andi	r24, 0xF0	; 240
 3fe:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 402:	89 2b       	or	r24, r25
 404:	80 83       	st	Z, r24
 406:	08 95       	ret
 408:	ee ee       	ldi	r30, 0xEE	; 238
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	20 81       	ld	r18, Z
 40e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 412:	30 e1       	ldi	r19, 0x10	; 16
 414:	93 9f       	mul	r25, r19
 416:	c0 01       	movw	r24, r0
 418:	11 24       	eor	r1, r1
 41a:	92 2f       	mov	r25, r18
 41c:	9f 70       	andi	r25, 0x0F	; 15
 41e:	89 2b       	or	r24, r25
 420:	80 83       	st	Z, r24
 422:	e3 ef       	ldi	r30, 0xF3	; 243
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	20 81       	ld	r18, Z
 428:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 42c:	30 e1       	ldi	r19, 0x10	; 16
 42e:	93 9f       	mul	r25, r19
 430:	c0 01       	movw	r24, r0
 432:	11 24       	eor	r1, r1
 434:	92 2f       	mov	r25, r18
 436:	9f 70       	andi	r25, 0x0F	; 15
 438:	89 2b       	or	r24, r25
 43a:	80 83       	st	Z, r24
 43c:	e8 ef       	ldi	r30, 0xF8	; 248
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	20 81       	ld	r18, Z
 442:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 446:	30 e1       	ldi	r19, 0x10	; 16
 448:	93 9f       	mul	r25, r19
 44a:	c0 01       	movw	r24, r0
 44c:	11 24       	eor	r1, r1
 44e:	92 2f       	mov	r25, r18
 450:	9f 70       	andi	r25, 0x0F	; 15
 452:	89 2b       	or	r24, r25
 454:	80 83       	st	Z, r24
 456:	ed ef       	ldi	r30, 0xFD	; 253
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	20 81       	ld	r18, Z
 45c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 460:	30 e1       	ldi	r19, 0x10	; 16
 462:	93 9f       	mul	r25, r19
 464:	c0 01       	movw	r24, r0
 466:	11 24       	eor	r1, r1
 468:	92 2f       	mov	r25, r18
 46a:	9f 70       	andi	r25, 0x0F	; 15
 46c:	89 2b       	or	r24, r25
 46e:	80 83       	st	Z, r24
 470:	08 95       	ret

00000472 <writeChar>:
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	eb 01       	movw	r28, r22
 478:	0e 94 a8 00 	call	0x150	; 0x150 <caseNumbers>
 47c:	ce 01       	movw	r24, r28
 47e:	0e 94 23 01 	call	0x246	; 0x246 <casePosition>
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <is_prime>:
 488:	8f 92       	push	r8
 48a:	9f 92       	push	r9
 48c:	af 92       	push	r10
 48e:	bf 92       	push	r11
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	4b 01       	movw	r8, r22
 49a:	5c 01       	movw	r10, r24
 49c:	83 e0       	ldi	r24, 0x03	; 3
 49e:	88 16       	cp	r8, r24
 4a0:	91 04       	cpc	r9, r1
 4a2:	a1 04       	cpc	r10, r1
 4a4:	b1 04       	cpc	r11, r1
 4a6:	ac f1       	brlt	.+106    	; 0x512 <__stack+0x13>
 4a8:	d5 01       	movw	r26, r10
 4aa:	c4 01       	movw	r24, r8
 4ac:	81 70       	andi	r24, 0x01	; 1
 4ae:	99 27       	eor	r25, r25
 4b0:	aa 27       	eor	r26, r26
 4b2:	b0 78       	andi	r27, 0x80	; 128
 4b4:	bb 23       	and	r27, r27
 4b6:	54 f4       	brge	.+20     	; 0x4cc <is_prime+0x44>
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	a1 09       	sbc	r26, r1
 4bc:	b1 09       	sbc	r27, r1
 4be:	8e 6f       	ori	r24, 0xFE	; 254
 4c0:	9f 6f       	ori	r25, 0xFF	; 255
 4c2:	af 6f       	ori	r26, 0xFF	; 255
 4c4:	bf 6f       	ori	r27, 0xFF	; 255
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	a1 1d       	adc	r26, r1
 4ca:	b1 1d       	adc	r27, r1
 4cc:	89 2b       	or	r24, r25
 4ce:	8a 2b       	or	r24, r26
 4d0:	8b 2b       	or	r24, r27
 4d2:	21 f1       	breq	.+72     	; 0x51c <__stack+0x1d>
 4d4:	c1 2c       	mov	r12, r1
 4d6:	d1 2c       	mov	r13, r1
 4d8:	76 01       	movw	r14, r12
 4da:	68 94       	set
 4dc:	c1 f8       	bld	r12, 1
 4de:	0a c0       	rjmp	.+20     	; 0x4f4 <is_prime+0x6c>
 4e0:	c5 01       	movw	r24, r10
 4e2:	b4 01       	movw	r22, r8
 4e4:	a7 01       	movw	r20, r14
 4e6:	96 01       	movw	r18, r12
 4e8:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodsi4>
 4ec:	67 2b       	or	r22, r23
 4ee:	68 2b       	or	r22, r24
 4f0:	69 2b       	or	r22, r25
 4f2:	c1 f0       	breq	.+48     	; 0x524 <__stack+0x25>
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	c8 1a       	sub	r12, r24
 4f8:	d8 0a       	sbc	r13, r24
 4fa:	e8 0a       	sbc	r14, r24
 4fc:	f8 0a       	sbc	r15, r24
 4fe:	c8 14       	cp	r12, r8
 500:	d9 04       	cpc	r13, r9
 502:	ea 04       	cpc	r14, r10
 504:	fb 04       	cpc	r15, r11
 506:	61 f7       	brne	.-40     	; 0x4e0 <is_prime+0x58>
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0c c0       	rjmp	.+24     	; 0x52a <__stack+0x2b>
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	07 c0       	rjmp	.+14     	; 0x52a <__stack+0x2b>
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	cb 01       	movw	r24, r22
 522:	03 c0       	rjmp	.+6      	; 0x52a <__stack+0x2b>
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	cb 01       	movw	r24, r22
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	df 90       	pop	r13
 530:	cf 90       	pop	r12
 532:	bf 90       	pop	r11
 534:	af 90       	pop	r10
 536:	9f 90       	pop	r9
 538:	8f 90       	pop	r8
 53a:	08 95       	ret

0000053c <printAt>:
			}
			isPressed = 1;
		}
	}
}
void printAt(long num, int pos) {
 53c:	8f 92       	push	r8
 53e:	9f 92       	push	r9
 540:	af 92       	push	r10
 542:	bf 92       	push	r11
 544:	cf 92       	push	r12
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	4b 01       	movw	r8, r22
 552:	5c 01       	movw	r10, r24
 554:	ea 01       	movw	r28, r20
	lock(&mute);
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	0e 94 49 04 	call	0x892	; 0x892 <lock>
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 55e:	c5 01       	movw	r24, r10
 560:	b4 01       	movw	r22, r8
 562:	24 e6       	ldi	r18, 0x64	; 100
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodsi4>
 56e:	0f 2e       	mov	r0, r31
 570:	fa e0       	ldi	r31, 0x0A	; 10
 572:	cf 2e       	mov	r12, r31
 574:	d1 2c       	mov	r13, r1
 576:	e1 2c       	mov	r14, r1
 578:	f1 2c       	mov	r15, r1
 57a:	f0 2d       	mov	r31, r0
 57c:	a7 01       	movw	r20, r14
 57e:	96 01       	movw	r18, r12
 580:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodsi4>
 584:	be 01       	movw	r22, r28
 586:	80 e3       	ldi	r24, 0x30	; 48
 588:	82 0f       	add	r24, r18
 58a:	0e 94 39 02 	call	0x472	; 0x472 <writeChar>
	pp++;
 58e:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
 590:	c5 01       	movw	r24, r10
 592:	b4 01       	movw	r22, r8
 594:	a7 01       	movw	r20, r14
 596:	96 01       	movw	r18, r12
 598:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodsi4>
 59c:	86 2f       	mov	r24, r22
 59e:	be 01       	movw	r22, r28
 5a0:	80 5d       	subi	r24, 0xD0	; 208
 5a2:	0e 94 39 02 	call	0x472	; 0x472 <writeChar>
	unlock(&mute);
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 70 04 	call	0x8e0	; 0x8e0 <unlock>
//	yield();
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	ff 90       	pop	r15
 5b4:	ef 90       	pop	r14
 5b6:	df 90       	pop	r13
 5b8:	cf 90       	pop	r12
 5ba:	bf 90       	pop	r11
 5bc:	af 90       	pop	r10
 5be:	9f 90       	pop	r9
 5c0:	8f 90       	pop	r8
 5c2:	08 95       	ret

000005c4 <computePrimes>:


void computePrimes(int pos) {
 5c4:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 5c6:	c1 2c       	mov	r12, r1
 5c8:	d1 2c       	mov	r13, r1
 5ca:	76 01       	movw	r14, r12
 5cc:	c3 94       	inc	r12
		if (is_prime(n)) {
 5ce:	c7 01       	movw	r24, r14
 5d0:	b6 01       	movw	r22, r12
 5d2:	0e 94 44 02 	call	0x488	; 0x488 <is_prime>
 5d6:	67 2b       	or	r22, r23
 5d8:	68 2b       	or	r22, r24
 5da:	69 2b       	or	r22, r25
 5dc:	29 f0       	breq	.+10     	; 0x5e8 <computePrimes+0x24>
			printAt(n, pos);
 5de:	ae 01       	movw	r20, r28
 5e0:	c7 01       	movw	r24, r14
 5e2:	b6 01       	movw	r22, r12
 5e4:	0e 94 9e 02 	call	0x53c	; 0x53c <printAt>


void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	c8 1a       	sub	r12, r24
 5ec:	d8 0a       	sbc	r13, r24
 5ee:	e8 0a       	sbc	r14, r24
 5f0:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 5f2:	ed cf       	rjmp	.-38     	; 0x5ce <computePrimes+0xa>

000005f4 <__vector_3>:
}

ISR(PCINT1_vect){
 5f4:	1f 92       	push	r1
 5f6:	0f 92       	push	r0
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	0f 92       	push	r0
 5fc:	11 24       	eor	r1, r1
 5fe:	2f 93       	push	r18
 600:	3f 93       	push	r19
 602:	4f 93       	push	r20
 604:	5f 93       	push	r21
 606:	6f 93       	push	r22
 608:	7f 93       	push	r23
 60a:	8f 93       	push	r24
 60c:	9f 93       	push	r25
 60e:	af 93       	push	r26
 610:	bf 93       	push	r27
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
		if ((1 << PINB) == 0){
 616:	23 b1       	in	r18, 0x03	; 3
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <__vector_3+0x2e>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	2a 95       	dec	r18
 624:	e2 f7       	brpl	.-8      	; 0x61e <__vector_3+0x2a>
 626:	89 2b       	or	r24, r25
 628:	11 f4       	brne	.+4      	; 0x62e <__vector_3+0x3a>
			yield();
 62a:	0e 94 2e 04 	call	0x85c	; 0x85c <yield>
		}
}
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <__vector_7>:
ISR(TIMER1_COMPA_vect){
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	2f 93       	push	r18
 65c:	3f 93       	push	r19
 65e:	4f 93       	push	r20
 660:	5f 93       	push	r21
 662:	6f 93       	push	r22
 664:	7f 93       	push	r23
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
	yield();
 672:	0e 94 2e 04 	call	0x85c	; 0x85c <yield>
}
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <main>:

int main() {
	LCD_Init();
 698:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Init>
	spawn(computePrimes, 0);
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	82 ee       	ldi	r24, 0xE2	; 226
 6a2:	92 e0       	ldi	r25, 0x02	; 2
 6a4:	0e 94 94 03 	call	0x728	; 0x728 <spawn>
	spawn(button, 3);
 6a8:	63 e0       	ldi	r22, 0x03	; 3
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	87 e5       	ldi	r24, 0x57	; 87
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 94 03 	call	0x728	; 0x728 <spawn>
	//computePrimes(3);
}
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	08 95       	ret

000006ba <enqueue>:
	;
	*/


static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 6ba:	dc 01       	movw	r26, r24
 6bc:	15 96       	adiw	r26, 0x05	; 5
 6be:	1c 92       	st	X, r1
 6c0:	1e 92       	st	-X, r1
 6c2:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 6c4:	db 01       	movw	r26, r22
 6c6:	ed 91       	ld	r30, X+
 6c8:	fc 91       	ld	r31, X
 6ca:	11 97       	sbiw	r26, 0x01	; 1
 6cc:	30 97       	sbiw	r30, 0x00	; 0
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <enqueue+0x1e>
        *queue = p;
 6d0:	8d 93       	st	X+, r24
 6d2:	9c 93       	st	X, r25
 6d4:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 6d6:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 6d8:	24 81       	ldd	r18, Z+4	; 0x04
 6da:	35 81       	ldd	r19, Z+5	; 0x05
 6dc:	21 15       	cp	r18, r1
 6de:	31 05       	cpc	r19, r1
 6e0:	d1 f7       	brne	.-12     	; 0x6d6 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 6e2:	95 83       	std	Z+5, r25	; 0x05
 6e4:	84 83       	std	Z+4, r24	; 0x04
 6e6:	08 95       	ret

000006e8 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	00 d0       	rcall	.+0      	; 0x6ee <dispatch+0x6>
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
 6f2:	9a 83       	std	Y+2, r25	; 0x02
 6f4:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 6f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6fe:	06 96       	adiw	r24, 0x06	; 6
 700:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <setjmp>
 704:	89 2b       	or	r24, r25
 706:	59 f4       	brne	.+22     	; 0x71e <dispatch+0x36>
        current = next;
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	9a 81       	ldd	r25, Y+2	; 0x02
 70c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 710:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	06 96       	adiw	r24, 0x06	; 6
 71a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <longjmp>
    }
}
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <spawn>:

void spawn(void (* function)(int), int arg) {
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	00 d0       	rcall	.+0      	; 0x72e <spawn+0x6>
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
 732:	ac 01       	movw	r20, r24
    thread newp;

    DISABLE();
 734:	f8 94       	cli
    if (!initialized) initialize();
 736:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <initialized>
 73a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <initialized+0x1>
 73e:	89 2b       	or	r24, r25
 740:	91 f5       	brne	.+100    	; 0x7a6 <spawn+0x7e>

	
static void initialize(void) {
		int i;
		for (i=0; i<NTHREADS-1; i++)
		threads[i].next = &threads[i+1];
 742:	8c ee       	ldi	r24, 0xEC	; 236
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <threads+0x5>
 74a:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <threads+0x4>
 74e:	89 e5       	ldi	r24, 0x59	; 89
 750:	92 e0       	ldi	r25, 0x02	; 2
 752:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <threads+0x72>
 756:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <threads+0x71>
 75a:	86 ec       	ldi	r24, 0xC6	; 198
 75c:	92 e0       	ldi	r25, 0x02	; 2
 75e:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <threads+0xdf>
 762:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <threads+0xde>
		threads[NTHREADS-1].next = NULL;
 766:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <threads+0x14c>
 76a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <threads+0x14b>
		//External input
		EIMSK = (1 << PCIE1);
 76e:	90 e8       	ldi	r25, 0x80	; 128
 770:	9d bb       	out	0x1d, r25	; 29
		PCMSK1 = (1 << PCINT15);
 772:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
		//DDRB = (1 << PINB7);
		//activate the button
		PORTB = (1 << PINB7);
 776:	95 b9       	out	0x05, r25	; 5
		//timer with prescaler 1024
		TCCR1B = (1<<CS12) | (1 << CS10) | (1 << WGM12);
 778:	8d e0       	ldi	r24, 0x0D	; 13
 77a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		//button setting
		PORTB = (1 << PINB7);
 77e:	95 b9       	out	0x05, r25	; 5
		//50 ms period
		OCR1A = 0x187;
 780:	87 e8       	ldi	r24, 0x87	; 135
 782:	91 e0       	ldi	r25, 0x01	; 1
 784:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 788:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		TIMSK1 = (1 << OCIE1A);
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

		//reset timer
		TCNT1 = 0;
 792:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 796:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		initialized = 1;
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <initialized+0x1>
 7a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 7a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 7aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 7ae:	9a 83       	std	Y+2, r25	; 0x02
 7b0:	89 83       	std	Y+1, r24	; 0x01
    if (*queue) {
 7b2:	00 97       	sbiw	r24, 0x00	; 0
 7b4:	a1 f0       	breq	.+40     	; 0x7de <spawn+0xb6>
        *queue = (*queue)->next;
 7b6:	fc 01       	movw	r30, r24
 7b8:	84 81       	ldd	r24, Z+4	; 0x04
 7ba:	95 81       	ldd	r25, Z+5	; 0x05
 7bc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 7c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 7c4:	51 83       	std	Z+1, r21	; 0x01
 7c6:	40 83       	st	Z, r20
    newp->arg = arg;
 7c8:	73 83       	std	Z+3, r23	; 0x03
 7ca:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 7cc:	15 82       	std	Z+5, r1	; 0x05
 7ce:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 7d0:	cf 01       	movw	r24, r30
 7d2:	06 96       	adiw	r24, 0x06	; 6
 7d4:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <setjmp>
 7d8:	01 97       	sbiw	r24, 0x01	; 1
 7da:	49 f5       	brne	.+82     	; 0x82e <spawn+0x106>
 7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <spawn+0xb8>
 7de:	ff cf       	rjmp	.-2      	; 0x7de <spawn+0xb6>
        ENABLE();
 7e0:	78 94       	sei
        current->function(current->arg);
 7e2:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 7e6:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 7ea:	ed 91       	ld	r30, X+
 7ec:	fc 91       	ld	r31, X
 7ee:	11 97       	sbiw	r26, 0x01	; 1
 7f0:	12 96       	adiw	r26, 0x02	; 2
 7f2:	8d 91       	ld	r24, X+
 7f4:	9c 91       	ld	r25, X
 7f6:	13 97       	sbiw	r26, 0x03	; 3
 7f8:	09 95       	icall
        DISABLE();
 7fa:	f8 94       	cli
        enqueue(current, &freeQ);
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	71 e0       	ldi	r23, 0x01	; 1
 800:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 804:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 808:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 80c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <readyQ>
 810:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <readyQ+0x1>
    if (*queue) {
 814:	00 97       	sbiw	r24, 0x00	; 0
 816:	51 f0       	breq	.+20     	; 0x82c <spawn+0x104>
        *queue = (*queue)->next;
 818:	fc 01       	movw	r30, r24
 81a:	24 81       	ldd	r18, Z+4	; 0x04
 81c:	35 81       	ldd	r19, Z+5	; 0x05
 81e:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <readyQ+0x1>
 822:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 826:	0e 94 74 03 	call	0x6e8	; 0x6e8 <dispatch>
 82a:	01 c0       	rjmp	.+2      	; 0x82e <spawn+0x106>
 82c:	ff cf       	rjmp	.-2      	; 0x82c <spawn+0x104>
    }
    SETSTACK(&newp->context, &newp->stack);
 82e:	e9 81       	ldd	r30, Y+1	; 0x01
 830:	fa 81       	ldd	r31, Y+2	; 0x02
 832:	36 96       	adiw	r30, 0x06	; 6
 834:	89 81       	ldd	r24, Y+1	; 0x01
 836:	9a 81       	ldd	r25, Y+2	; 0x02
 838:	87 59       	subi	r24, 0x97	; 151
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	91 8b       	std	Z+17, r25	; 0x11
 83e:	80 8b       	std	Z+16, r24	; 0x10
 840:	93 8b       	std	Z+19, r25	; 0x13
 842:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 844:	6c e0       	ldi	r22, 0x0C	; 12
 846:	71 e0       	ldi	r23, 0x01	; 1
 848:	89 81       	ldd	r24, Y+1	; 0x01
 84a:	9a 81       	ldd	r25, Y+2	; 0x02
 84c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
    ENABLE();
 850:	78 94       	sei
}
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	08 95       	ret

0000085c <yield>:

void yield(void) 
{
	DISABLE();	
 85c:	f8 94       	cli
	enqueue(current, &readyQ);
 85e:	6c e0       	ldi	r22, 0x0C	; 12
 860:	71 e0       	ldi	r23, 0x01	; 1
 862:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 866:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 86a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 86e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <readyQ>
 872:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <readyQ+0x1>
    if (*queue) {
 876:	00 97       	sbiw	r24, 0x00	; 0
 878:	59 f0       	breq	.+22     	; 0x890 <yield+0x34>
        *queue = (*queue)->next;
 87a:	fc 01       	movw	r30, r24
 87c:	24 81       	ldd	r18, Z+4	; 0x04
 87e:	35 81       	ldd	r19, Z+5	; 0x05
 880:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <readyQ+0x1>
 884:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <readyQ>

void yield(void) 
{
	DISABLE();	
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 888:	0e 94 74 03 	call	0x6e8	; 0x6e8 <dispatch>
	ENABLE();
 88c:	78 94       	sei
 88e:	08 95       	ret
 890:	ff cf       	rjmp	.-2      	; 0x890 <yield+0x34>

00000892 <lock>:
}

void lock(mutex *m) {
	DISABLE();
 892:	f8 94       	cli
	if(m->locked == 0){
 894:	fc 01       	movw	r30, r24
 896:	20 81       	ld	r18, Z
 898:	31 81       	ldd	r19, Z+1	; 0x01
 89a:	23 2b       	or	r18, r19
 89c:	29 f4       	brne	.+10     	; 0x8a8 <lock+0x16>
		m->locked = 1;
 89e:	21 e0       	ldi	r18, 0x01	; 1
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	31 83       	std	Z+1, r19	; 0x01
 8a4:	20 83       	st	Z, r18
 8a6:	1a c0       	rjmp	.+52     	; 0x8dc <lock+0x4a>
	}
	else{
		enqueue(current, &(m->waitQ));
 8a8:	bc 01       	movw	r22, r24
 8aa:	6e 5f       	subi	r22, 0xFE	; 254
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 8b6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 8ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <readyQ>
 8be:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <readyQ+0x1>
    if (*queue) {
 8c2:	00 97       	sbiw	r24, 0x00	; 0
 8c4:	51 f0       	breq	.+20     	; 0x8da <lock+0x48>
        *queue = (*queue)->next;
 8c6:	fc 01       	movw	r30, r24
 8c8:	24 81       	ldd	r18, Z+4	; 0x04
 8ca:	35 81       	ldd	r19, Z+5	; 0x05
 8cc:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <readyQ+0x1>
 8d0:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <readyQ>
	if(m->locked == 0){
		m->locked = 1;
	}
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 8d4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <dispatch>
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <lock+0x4a>
 8da:	ff cf       	rjmp	.-2      	; 0x8da <lock+0x48>
	}
	ENABLE();
 8dc:	78 94       	sei
 8de:	08 95       	ret

000008e0 <unlock>:
}

void unlock(mutex *m) {
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
	DISABLE();
 8e4:	f8 94       	cli
	if(m->waitQ != 0){
 8e6:	fc 01       	movw	r30, r24
 8e8:	22 81       	ldd	r18, Z+2	; 0x02
 8ea:	33 81       	ldd	r19, Z+3	; 0x03
 8ec:	23 2b       	or	r18, r19
 8ee:	b1 f0       	breq	.+44     	; 0x91c <unlock+0x3c>
 8f0:	ec 01       	movw	r28, r24
		enqueue(current, &readyQ);
 8f2:	6c e0       	ldi	r22, 0x0C	; 12
 8f4:	71 e0       	ldi	r23, 0x01	; 1
 8f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 8fe:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 902:	8a 81       	ldd	r24, Y+2	; 0x02
 904:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 906:	00 97       	sbiw	r24, 0x00	; 0
 908:	41 f0       	breq	.+16     	; 0x91a <unlock+0x3a>
        *queue = (*queue)->next;
 90a:	fc 01       	movw	r30, r24
 90c:	24 81       	ldd	r18, Z+4	; 0x04
 90e:	35 81       	ldd	r19, Z+5	; 0x05
 910:	3b 83       	std	Y+3, r19	; 0x03
 912:	2a 83       	std	Y+2, r18	; 0x02

void unlock(mutex *m) {
	DISABLE();
	if(m->waitQ != 0){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 914:	0e 94 74 03 	call	0x6e8	; 0x6e8 <dispatch>
 918:	04 c0       	rjmp	.+8      	; 0x922 <unlock+0x42>
 91a:	ff cf       	rjmp	.-2      	; 0x91a <unlock+0x3a>
	}
	else{
		m->locked = 0;
 91c:	fc 01       	movw	r30, r24
 91e:	11 82       	std	Z+1, r1	; 0x01
 920:	10 82       	st	Z, r1
	}
	ENABLE();
 922:	78 94       	sei
}
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	08 95       	ret

0000092a <__divmodsi4>:
 92a:	05 2e       	mov	r0, r21
 92c:	97 fb       	bst	r25, 7
 92e:	1e f4       	brtc	.+6      	; 0x936 <__divmodsi4+0xc>
 930:	00 94       	com	r0
 932:	0e 94 ac 04 	call	0x958	; 0x958 <__negsi2>
 936:	57 fd       	sbrc	r21, 7
 938:	07 d0       	rcall	.+14     	; 0x948 <__divmodsi4_neg2>
 93a:	0e 94 ba 04 	call	0x974	; 0x974 <__udivmodsi4>
 93e:	07 fc       	sbrc	r0, 7
 940:	03 d0       	rcall	.+6      	; 0x948 <__divmodsi4_neg2>
 942:	4e f4       	brtc	.+18     	; 0x956 <__divmodsi4_exit>
 944:	0c 94 ac 04 	jmp	0x958	; 0x958 <__negsi2>

00000948 <__divmodsi4_neg2>:
 948:	50 95       	com	r21
 94a:	40 95       	com	r20
 94c:	30 95       	com	r19
 94e:	21 95       	neg	r18
 950:	3f 4f       	sbci	r19, 0xFF	; 255
 952:	4f 4f       	sbci	r20, 0xFF	; 255
 954:	5f 4f       	sbci	r21, 0xFF	; 255

00000956 <__divmodsi4_exit>:
 956:	08 95       	ret

00000958 <__negsi2>:
 958:	90 95       	com	r25
 95a:	80 95       	com	r24
 95c:	70 95       	com	r23
 95e:	61 95       	neg	r22
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	08 95       	ret

00000968 <__tablejump2__>:
 968:	ee 0f       	add	r30, r30
 96a:	ff 1f       	adc	r31, r31
 96c:	05 90       	lpm	r0, Z+
 96e:	f4 91       	lpm	r31, Z
 970:	e0 2d       	mov	r30, r0
 972:	09 94       	ijmp

00000974 <__udivmodsi4>:
 974:	a1 e2       	ldi	r26, 0x21	; 33
 976:	1a 2e       	mov	r1, r26
 978:	aa 1b       	sub	r26, r26
 97a:	bb 1b       	sub	r27, r27
 97c:	fd 01       	movw	r30, r26
 97e:	0d c0       	rjmp	.+26     	; 0x99a <__udivmodsi4_ep>

00000980 <__udivmodsi4_loop>:
 980:	aa 1f       	adc	r26, r26
 982:	bb 1f       	adc	r27, r27
 984:	ee 1f       	adc	r30, r30
 986:	ff 1f       	adc	r31, r31
 988:	a2 17       	cp	r26, r18
 98a:	b3 07       	cpc	r27, r19
 98c:	e4 07       	cpc	r30, r20
 98e:	f5 07       	cpc	r31, r21
 990:	20 f0       	brcs	.+8      	; 0x99a <__udivmodsi4_ep>
 992:	a2 1b       	sub	r26, r18
 994:	b3 0b       	sbc	r27, r19
 996:	e4 0b       	sbc	r30, r20
 998:	f5 0b       	sbc	r31, r21

0000099a <__udivmodsi4_ep>:
 99a:	66 1f       	adc	r22, r22
 99c:	77 1f       	adc	r23, r23
 99e:	88 1f       	adc	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	1a 94       	dec	r1
 9a4:	69 f7       	brne	.-38     	; 0x980 <__udivmodsi4_loop>
 9a6:	60 95       	com	r22
 9a8:	70 95       	com	r23
 9aa:	80 95       	com	r24
 9ac:	90 95       	com	r25
 9ae:	9b 01       	movw	r18, r22
 9b0:	ac 01       	movw	r20, r24
 9b2:	bd 01       	movw	r22, r26
 9b4:	cf 01       	movw	r24, r30
 9b6:	08 95       	ret

000009b8 <setjmp>:
 9b8:	dc 01       	movw	r26, r24
 9ba:	2d 92       	st	X+, r2
 9bc:	3d 92       	st	X+, r3
 9be:	4d 92       	st	X+, r4
 9c0:	5d 92       	st	X+, r5
 9c2:	6d 92       	st	X+, r6
 9c4:	7d 92       	st	X+, r7
 9c6:	8d 92       	st	X+, r8
 9c8:	9d 92       	st	X+, r9
 9ca:	ad 92       	st	X+, r10
 9cc:	bd 92       	st	X+, r11
 9ce:	cd 92       	st	X+, r12
 9d0:	dd 92       	st	X+, r13
 9d2:	ed 92       	st	X+, r14
 9d4:	fd 92       	st	X+, r15
 9d6:	0d 93       	st	X+, r16
 9d8:	1d 93       	st	X+, r17
 9da:	cd 93       	st	X+, r28
 9dc:	dd 93       	st	X+, r29
 9de:	ff 91       	pop	r31
 9e0:	ef 91       	pop	r30
 9e2:	8d b7       	in	r24, 0x3d	; 61
 9e4:	8d 93       	st	X+, r24
 9e6:	8e b7       	in	r24, 0x3e	; 62
 9e8:	8d 93       	st	X+, r24
 9ea:	8f b7       	in	r24, 0x3f	; 63
 9ec:	8d 93       	st	X+, r24
 9ee:	ed 93       	st	X+, r30
 9f0:	fd 93       	st	X+, r31
 9f2:	88 27       	eor	r24, r24
 9f4:	99 27       	eor	r25, r25
 9f6:	09 94       	ijmp

000009f8 <longjmp>:
 9f8:	dc 01       	movw	r26, r24
 9fa:	cb 01       	movw	r24, r22
 9fc:	81 30       	cpi	r24, 0x01	; 1
 9fe:	91 05       	cpc	r25, r1
 a00:	81 1d       	adc	r24, r1
 a02:	2d 90       	ld	r2, X+
 a04:	3d 90       	ld	r3, X+
 a06:	4d 90       	ld	r4, X+
 a08:	5d 90       	ld	r5, X+
 a0a:	6d 90       	ld	r6, X+
 a0c:	7d 90       	ld	r7, X+
 a0e:	8d 90       	ld	r8, X+
 a10:	9d 90       	ld	r9, X+
 a12:	ad 90       	ld	r10, X+
 a14:	bd 90       	ld	r11, X+
 a16:	cd 90       	ld	r12, X+
 a18:	dd 90       	ld	r13, X+
 a1a:	ed 90       	ld	r14, X+
 a1c:	fd 90       	ld	r15, X+
 a1e:	0d 91       	ld	r16, X+
 a20:	1d 91       	ld	r17, X+
 a22:	cd 91       	ld	r28, X+
 a24:	dd 91       	ld	r29, X+
 a26:	ed 91       	ld	r30, X+
 a28:	fd 91       	ld	r31, X+
 a2a:	0d 90       	ld	r0, X+
 a2c:	f8 94       	cli
 a2e:	fe bf       	out	0x3e, r31	; 62
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	ed bf       	out	0x3d, r30	; 61
 a34:	ed 91       	ld	r30, X+
 a36:	fd 91       	ld	r31, X+
 a38:	09 94       	ijmp

00000a3a <_exit>:
 a3a:	f8 94       	cli

00000a3c <__stop_program>:
 a3c:	ff cf       	rjmp	.-2      	; 0xa3c <__stop_program>
