
Lab 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000008a6  0000093a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  00800104  00800104  0000093e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001043  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adb  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f4  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000542  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c5  00000000  00000000  00003396  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003c5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	7c 00       	.word	0x007c	; ????
  5e:	87 00       	.word	0x0087	; ????
  60:	91 00       	.word	0x0091	; ????
  62:	9c 00       	.word	0x009c	; ????
  64:	a7 00       	.word	0x00a7	; ????
  66:	b2 00       	.word	0x00b2	; ????
  68:	be 00       	.word	0x00be	; ????
  6a:	ca 00       	.word	0x00ca	; ????
  6c:	d4 00       	.word	0x00d4	; ????
  6e:	e0 00       	.word	0x00e0	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 ea       	ldi	r30, 0xA6	; 166
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ad 32       	cpi	r26, 0x2D	; 45
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <main>
  a6:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:

//settings for avr
void LCD_Init(void)
{
	//setting for the AVR//
	CLKPR = 0x80;
  ae:	e1 e6       	ldi	r30, 0x61	; 97
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
  b6:	10 82       	st	Z, r1
	//external async clock, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2);
  b8:	97 eb       	ldi	r25, 0xB7	; 183
  ba:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	//clock divider N=8
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	//LCD low power, no frame interrupt no blanking
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  c4:	90 ec       	ldi	r25, 0xC0	; 192
  c6:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	//Drive time 300ms, control voltage 3,35V
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  ca:	9f e0       	ldi	r25, 0x0F	; 15
  cc:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
	//timer with prescaler 256
	TCCR1B = (1<<CS12);
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//button setting
	PORTB = (1 << PINB7);
  d6:	85 b9       	out	0x05, r24	; 5
	//External input
	EIMSK = (1 << PCIE1);
  d8:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 = (1 << PCINT15);
  da:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	DDRB = (1 << PINB7);
  de:	84 b9       	out	0x04, r24	; 4
  e0:	08 95       	ret

000000e2 <caseNumbers>:
}
//cases for number 0-9
void caseNumbers(char ch)
{
	//cases for every number 0-9
	switch (ch)
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	f0 97       	sbiw	r30, 0x30	; 48
  e8:	ea 30       	cpi	r30, 0x0A	; 10
  ea:	f1 05       	cpc	r31, r1
  ec:	08 f0       	brcs	.+2      	; 0xf0 <caseNumbers+0xe>
  ee:	73 c0       	rjmp	.+230    	; 0x1d6 <caseNumbers+0xf4>
  f0:	e2 5d       	subi	r30, 0xD2	; 210
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__tablejump2__>
	{
		case '0' :
		reg1 = 0x01;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <reg1>
		reg2 = 0x05;
  fe:	95 e0       	ldi	r25, 0x05	; 5
 100:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <reg2>
		reg3 = 0x05;
 104:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <reg3>
		reg4 = 0x01;
 108:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <reg4>
		break;
 10c:	08 95       	ret
		case '1' :
		reg1 = 0x00;
 10e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <reg1>
		reg2 = 0x01;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <reg2>
		reg3 = 0x01;
 118:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <reg3>
		reg4 = 0x00;
 11c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <reg4>
		break;
 120:	08 95       	ret
		case '2' :
		reg1 = 0x01;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <reg1>
		reg2 = 0x01;
 128:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <reg2>
		reg3 = 0x0E;
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <reg3>
		reg4 = 0x01;
 132:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <reg4>
		break;
 136:	08 95       	ret
		case '3' :
		reg1 = 0x01;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <reg1>
		reg2 = 0x01;
 13e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <reg2>
		reg3 = 0x0B;
 142:	9b e0       	ldi	r25, 0x0B	; 11
 144:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <reg3>
		reg4 = 0x01;
 148:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <reg4>
		break;
 14c:	08 95       	ret
		case '4' :
		reg1 = 0x00;
 14e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <reg1>
		reg2 = 0x05;
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <reg2>
		reg3 = 0x0B;
 158:	8b e0       	ldi	r24, 0x0B	; 11
 15a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <reg3>
		reg4 = 0x00;
 15e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <reg4>
		break;
 162:	08 95       	ret
		case '5':
		reg1 = 0x01;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <reg1>
		reg2 = 0x04;
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <reg2>
		reg3 = 0x0B;
 170:	9b e0       	ldi	r25, 0x0B	; 11
 172:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <reg3>
		reg4 = 0x01;
 176:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <reg4>
		break;
 17a:	08 95       	ret
		case '6' :
		reg1 = 0x01;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <reg1>
		reg2 = 0x04;
 182:	94 e0       	ldi	r25, 0x04	; 4
 184:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <reg2>
		reg3 = 0x0F;
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <reg3>
		reg4 = 0x01;
 18e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <reg4>
		break;
 192:	08 95       	ret
		case '7' :
		reg1 = 0x01;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <reg1>
		reg2 = 0x01;
 19a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <reg2>
		reg3 = 0x01;
 19e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <reg3>
		reg4 = 0x00;
 1a2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <reg4>
		break;
 1a6:	08 95       	ret
		case '8' :
		reg1 = 0x01;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <reg1>
		reg2 = 0x05;
 1ae:	95 e0       	ldi	r25, 0x05	; 5
 1b0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <reg2>
		reg3 = 0x0F;
 1b4:	9f e0       	ldi	r25, 0x0F	; 15
 1b6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <reg3>
		reg4 = 0x01;
 1ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <reg4>
		break;
 1be:	08 95       	ret
		case '9' :
		reg1 = 0x01;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <reg1>
		reg2 = 0x05;
 1c6:	95 e0       	ldi	r25, 0x05	; 5
 1c8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <reg2>
		reg3 = 0x0B;
 1cc:	9b e0       	ldi	r25, 0x0B	; 11
 1ce:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <reg3>
		reg4 = 0x01;
 1d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <reg4>
 1d6:	08 95       	ret

000001d8 <casePosition>:
//cases for all positions on the avr
void casePosition(int pos)
{
	//cases for each position
	//Bitmask and shifts are used to manipulate bits
	switch (pos)
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	91 05       	cpc	r25, r1
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <casePosition+0x8>
 1de:	66 c0       	rjmp	.+204    	; 0x2ac <casePosition+0xd4>
 1e0:	2c f4       	brge	.+10     	; 0x1ec <casePosition+0x14>
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	69 f0       	breq	.+26     	; 0x200 <casePosition+0x28>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	61 f1       	breq	.+88     	; 0x242 <casePosition+0x6a>
 1ea:	08 95       	ret
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	91 05       	cpc	r25, r1
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <casePosition+0x1c>
 1f2:	b2 c0       	rjmp	.+356    	; 0x358 <casePosition+0x180>
 1f4:	0c f4       	brge	.+2      	; 0x1f8 <casePosition+0x20>
 1f6:	7b c0       	rjmp	.+246    	; 0x2ee <casePosition+0x116>
 1f8:	05 97       	sbiw	r24, 0x05	; 5
 1fa:	09 f4       	brne	.+2      	; 0x1fe <casePosition+0x26>
 1fc:	ce c0       	rjmp	.+412    	; 0x39a <casePosition+0x1c2>
 1fe:	08 95       	ret
	{
		case 0:
		LCDDR0  = (LCDDR0 & 0xF0) | reg1;
 200:	ec ee       	ldi	r30, 0xEC	; 236
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <reg1>
 20c:	89 2b       	or	r24, r25
 20e:	80 83       	st	Z, r24
		LCDDR5  = (LCDDR5 & 0xF0) | reg2;
 210:	e1 ef       	ldi	r30, 0xF1	; 241
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <reg2>
 21c:	89 2b       	or	r24, r25
 21e:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10 & 0xF0) | reg3;
 220:	e6 ef       	ldi	r30, 0xF6	; 246
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <reg3>
 22c:	89 2b       	or	r24, r25
 22e:	80 83       	st	Z, r24
		LCDDR15 = (LCDDR15 & 0xF0) | reg4;
 230:	eb ef       	ldi	r30, 0xFB	; 251
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <reg4>
 23c:	89 2b       	or	r24, r25
 23e:	80 83       	st	Z, r24
		
		break;
 240:	08 95       	ret
		case 1:
		LCDDR0  = (LCDDR0 & 0x0F) | reg1 << 4;
 242:	ec ee       	ldi	r30, 0xEC	; 236
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	20 81       	ld	r18, Z
 248:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <reg1>
 24c:	30 e1       	ldi	r19, 0x10	; 16
 24e:	93 9f       	mul	r25, r19
 250:	c0 01       	movw	r24, r0
 252:	11 24       	eor	r1, r1
 254:	92 2f       	mov	r25, r18
 256:	9f 70       	andi	r25, 0x0F	; 15
 258:	89 2b       	or	r24, r25
 25a:	80 83       	st	Z, r24
		LCDDR5  = (LCDDR5 & 0x0F) | reg2 << 4;
 25c:	e1 ef       	ldi	r30, 0xF1	; 241
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	20 81       	ld	r18, Z
 262:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <reg2>
 266:	30 e1       	ldi	r19, 0x10	; 16
 268:	93 9f       	mul	r25, r19
 26a:	c0 01       	movw	r24, r0
 26c:	11 24       	eor	r1, r1
 26e:	92 2f       	mov	r25, r18
 270:	9f 70       	andi	r25, 0x0F	; 15
 272:	89 2b       	or	r24, r25
 274:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10 & 0x0F) | reg3 << 4;
 276:	e6 ef       	ldi	r30, 0xF6	; 246
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	20 81       	ld	r18, Z
 27c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <reg3>
 280:	30 e1       	ldi	r19, 0x10	; 16
 282:	93 9f       	mul	r25, r19
 284:	c0 01       	movw	r24, r0
 286:	11 24       	eor	r1, r1
 288:	92 2f       	mov	r25, r18
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	89 2b       	or	r24, r25
 28e:	80 83       	st	Z, r24
		LCDDR15 = (LCDDR15 & 0x0F) | reg4 << 4;
 290:	eb ef       	ldi	r30, 0xFB	; 251
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	20 81       	ld	r18, Z
 296:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <reg4>
 29a:	30 e1       	ldi	r19, 0x10	; 16
 29c:	93 9f       	mul	r25, r19
 29e:	c0 01       	movw	r24, r0
 2a0:	11 24       	eor	r1, r1
 2a2:	92 2f       	mov	r25, r18
 2a4:	9f 70       	andi	r25, 0x0F	; 15
 2a6:	89 2b       	or	r24, r25
 2a8:	80 83       	st	Z, r24
		break;
 2aa:	08 95       	ret
		case 2:
		LCDDR1  = (LCDDR1 & 0xF0) | reg1;
 2ac:	ed ee       	ldi	r30, 0xED	; 237
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	80 7f       	andi	r24, 0xF0	; 240
 2b4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <reg1>
 2b8:	89 2b       	or	r24, r25
 2ba:	80 83       	st	Z, r24
		LCDDR6  = (LCDDR6 & 0xF0) |reg2;
 2bc:	e2 ef       	ldi	r30, 0xF2	; 242
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 7f       	andi	r24, 0xF0	; 240
 2c4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <reg2>
 2c8:	89 2b       	or	r24, r25
 2ca:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11 & 0xF0) |reg3;
 2cc:	e7 ef       	ldi	r30, 0xF7	; 247
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	80 7f       	andi	r24, 0xF0	; 240
 2d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <reg3>
 2d8:	89 2b       	or	r24, r25
 2da:	80 83       	st	Z, r24
		LCDDR16 = (LCDDR16 & 0xF0) |reg4;
 2dc:	ec ef       	ldi	r30, 0xFC	; 252
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <reg4>
 2e8:	89 2b       	or	r24, r25
 2ea:	80 83       	st	Z, r24
		break;
 2ec:	08 95       	ret
		
		case 3:
		LCDDR1  = (LCDDR1 & 0x0F) | reg1 << 4;
 2ee:	ed ee       	ldi	r30, 0xED	; 237
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	20 81       	ld	r18, Z
 2f4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <reg1>
 2f8:	30 e1       	ldi	r19, 0x10	; 16
 2fa:	93 9f       	mul	r25, r19
 2fc:	c0 01       	movw	r24, r0
 2fe:	11 24       	eor	r1, r1
 300:	92 2f       	mov	r25, r18
 302:	9f 70       	andi	r25, 0x0F	; 15
 304:	89 2b       	or	r24, r25
 306:	80 83       	st	Z, r24
		LCDDR6  = (LCDDR6 & 0x0F) | reg2 << 4;
 308:	e2 ef       	ldi	r30, 0xF2	; 242
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	20 81       	ld	r18, Z
 30e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <reg2>
 312:	30 e1       	ldi	r19, 0x10	; 16
 314:	93 9f       	mul	r25, r19
 316:	c0 01       	movw	r24, r0
 318:	11 24       	eor	r1, r1
 31a:	92 2f       	mov	r25, r18
 31c:	9f 70       	andi	r25, 0x0F	; 15
 31e:	89 2b       	or	r24, r25
 320:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11 & 0x0F) | reg3 << 4;
 322:	e7 ef       	ldi	r30, 0xF7	; 247
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	20 81       	ld	r18, Z
 328:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <reg3>
 32c:	30 e1       	ldi	r19, 0x10	; 16
 32e:	93 9f       	mul	r25, r19
 330:	c0 01       	movw	r24, r0
 332:	11 24       	eor	r1, r1
 334:	92 2f       	mov	r25, r18
 336:	9f 70       	andi	r25, 0x0F	; 15
 338:	89 2b       	or	r24, r25
 33a:	80 83       	st	Z, r24
		LCDDR16 = (LCDDR16 & 0x0F) | reg4 << 4;
 33c:	ec ef       	ldi	r30, 0xFC	; 252
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	20 81       	ld	r18, Z
 342:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <reg4>
 346:	30 e1       	ldi	r19, 0x10	; 16
 348:	93 9f       	mul	r25, r19
 34a:	c0 01       	movw	r24, r0
 34c:	11 24       	eor	r1, r1
 34e:	92 2f       	mov	r25, r18
 350:	9f 70       	andi	r25, 0x0F	; 15
 352:	89 2b       	or	r24, r25
 354:	80 83       	st	Z, r24
		break;
 356:	08 95       	ret

		case 4:
		LCDDR2  = (LCDDR2 & 0xF0) |reg1;
 358:	ee ee       	ldi	r30, 0xEE	; 238
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	80 7f       	andi	r24, 0xF0	; 240
 360:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <reg1>
 364:	89 2b       	or	r24, r25
 366:	80 83       	st	Z, r24
		LCDDR7  = (LCDDR7 & 0xF0) |reg2;
 368:	e3 ef       	ldi	r30, 0xF3	; 243
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	80 7f       	andi	r24, 0xF0	; 240
 370:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <reg2>
 374:	89 2b       	or	r24, r25
 376:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12 & 0xF0) |reg3;
 378:	e8 ef       	ldi	r30, 0xF8	; 248
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	80 7f       	andi	r24, 0xF0	; 240
 380:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <reg3>
 384:	89 2b       	or	r24, r25
 386:	80 83       	st	Z, r24
		LCDDR17 = (LCDDR17 & 0xF0) |reg4;
 388:	ed ef       	ldi	r30, 0xFD	; 253
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	80 7f       	andi	r24, 0xF0	; 240
 390:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <reg4>
 394:	89 2b       	or	r24, r25
 396:	80 83       	st	Z, r24
		break;
 398:	08 95       	ret

		case 5:
		LCDDR2  = (LCDDR2 & 0x0F) | reg1 << 4;
 39a:	ee ee       	ldi	r30, 0xEE	; 238
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	20 81       	ld	r18, Z
 3a0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <reg1>
 3a4:	30 e1       	ldi	r19, 0x10	; 16
 3a6:	93 9f       	mul	r25, r19
 3a8:	c0 01       	movw	r24, r0
 3aa:	11 24       	eor	r1, r1
 3ac:	92 2f       	mov	r25, r18
 3ae:	9f 70       	andi	r25, 0x0F	; 15
 3b0:	89 2b       	or	r24, r25
 3b2:	80 83       	st	Z, r24
		LCDDR7  = (LCDDR7 & 0x0F) | reg2 << 4;
 3b4:	e3 ef       	ldi	r30, 0xF3	; 243
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	20 81       	ld	r18, Z
 3ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <reg2>
 3be:	30 e1       	ldi	r19, 0x10	; 16
 3c0:	93 9f       	mul	r25, r19
 3c2:	c0 01       	movw	r24, r0
 3c4:	11 24       	eor	r1, r1
 3c6:	92 2f       	mov	r25, r18
 3c8:	9f 70       	andi	r25, 0x0F	; 15
 3ca:	89 2b       	or	r24, r25
 3cc:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12 & 0x0F) | reg3 << 4;
 3ce:	e8 ef       	ldi	r30, 0xF8	; 248
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	20 81       	ld	r18, Z
 3d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <reg3>
 3d8:	30 e1       	ldi	r19, 0x10	; 16
 3da:	93 9f       	mul	r25, r19
 3dc:	c0 01       	movw	r24, r0
 3de:	11 24       	eor	r1, r1
 3e0:	92 2f       	mov	r25, r18
 3e2:	9f 70       	andi	r25, 0x0F	; 15
 3e4:	89 2b       	or	r24, r25
 3e6:	80 83       	st	Z, r24
		LCDDR17 = (LCDDR17 & 0x0F) | reg4 << 4;
 3e8:	ed ef       	ldi	r30, 0xFD	; 253
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	20 81       	ld	r18, Z
 3ee:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <reg4>
 3f2:	30 e1       	ldi	r19, 0x10	; 16
 3f4:	93 9f       	mul	r25, r19
 3f6:	c0 01       	movw	r24, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	92 2f       	mov	r25, r18
 3fc:	9f 70       	andi	r25, 0x0F	; 15
 3fe:	89 2b       	or	r24, r25
 400:	80 83       	st	Z, r24
 402:	08 95       	ret

00000404 <writeChar>:
	}
}

//function to write a char at a position
void writeChar(char ch, int pos)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	eb 01       	movw	r28, r22
	
	caseNumbers(ch);
 40a:	0e 94 71 00 	call	0xe2	; 0xe2 <caseNumbers>
	casePosition(pos);
 40e:	ce 01       	movw	r24, r28
 410:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <casePosition>
	
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <is_prime>:
long is_prime(long i)
{
 41a:	8f 92       	push	r8
 41c:	9f 92       	push	r9
 41e:	af 92       	push	r10
 420:	bf 92       	push	r11
 422:	cf 92       	push	r12
 424:	df 92       	push	r13
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
 42a:	4b 01       	movw	r8, r22
 42c:	5c 01       	movw	r10, r24
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	88 16       	cp	r8, r24
 432:	91 04       	cpc	r9, r1
 434:	a1 04       	cpc	r10, r1
 436:	b1 04       	cpc	r11, r1
 438:	ac f1       	brlt	.+106    	; 0x4a4 <is_prime+0x8a>
		rest = i % n;
 43a:	d5 01       	movw	r26, r10
 43c:	c4 01       	movw	r24, r8
 43e:	81 70       	andi	r24, 0x01	; 1
 440:	99 27       	eor	r25, r25
 442:	aa 27       	eor	r26, r26
 444:	b0 78       	andi	r27, 0x80	; 128
 446:	bb 23       	and	r27, r27
 448:	54 f4       	brge	.+20     	; 0x45e <is_prime+0x44>
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	a1 09       	sbc	r26, r1
 44e:	b1 09       	sbc	r27, r1
 450:	8e 6f       	ori	r24, 0xFE	; 254
 452:	9f 6f       	ori	r25, 0xFF	; 255
 454:	af 6f       	ori	r26, 0xFF	; 255
 456:	bf 6f       	ori	r27, 0xFF	; 255
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	a1 1d       	adc	r26, r1
 45c:	b1 1d       	adc	r27, r1
		if (rest == 0){
 45e:	89 2b       	or	r24, r25
 460:	8a 2b       	or	r24, r26
 462:	8b 2b       	or	r24, r27
 464:	21 f1       	breq	.+72     	; 0x4ae <is_prime+0x94>
 466:	c1 2c       	mov	r12, r1
 468:	d1 2c       	mov	r13, r1
 46a:	76 01       	movw	r14, r12
 46c:	68 94       	set
 46e:	c1 f8       	bld	r12, 1
 470:	0a c0       	rjmp	.+20     	; 0x486 <is_prime+0x6c>
}
long is_prime(long i)
{
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
		rest = i % n;
 472:	c5 01       	movw	r24, r10
 474:	b4 01       	movw	r22, r8
 476:	a7 01       	movw	r20, r14
 478:	96 01       	movw	r18, r12
 47a:	0e 94 c9 03 	call	0x792	; 0x792 <__divmodsi4>
		if (rest == 0){
 47e:	67 2b       	or	r22, r23
 480:	68 2b       	or	r22, r24
 482:	69 2b       	or	r22, r25
 484:	c1 f0       	breq	.+48     	; 0x4b6 <is_prime+0x9c>
	
}
long is_prime(long i)
{
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	c8 1a       	sub	r12, r24
 48a:	d8 0a       	sbc	r13, r24
 48c:	e8 0a       	sbc	r14, r24
 48e:	f8 0a       	sbc	r15, r24
 490:	c8 14       	cp	r12, r8
 492:	d9 04       	cpc	r13, r9
 494:	ea 04       	cpc	r14, r10
 496:	fb 04       	cpc	r15, r11
 498:	61 f7       	brne	.-40     	; 0x472 <is_prime+0x58>
		rest = i % n;
		if (rest == 0){
			return 0;
		}
	}
	return 1;
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0c c0       	rjmp	.+24     	; 0x4bc <is_prime+0xa2>
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <is_prime+0xa2>
{
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
		rest = i % n;
		if (rest == 0){
			return 0;
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	cb 01       	movw	r24, r22
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <is_prime+0xa2>
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	cb 01       	movw	r24, r22
		}
	}
	return 1;
}
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	df 90       	pop	r13
 4c2:	cf 90       	pop	r12
 4c4:	bf 90       	pop	r11
 4c6:	af 90       	pop	r10
 4c8:	9f 90       	pop	r9
 4ca:	8f 90       	pop	r8
 4cc:	08 95       	ret

000004ce <printAt>:

void printAt(long num, int pos) {
 4ce:	8f 92       	push	r8
 4d0:	9f 92       	push	r9
 4d2:	af 92       	push	r10
 4d4:	bf 92       	push	r11
 4d6:	cf 92       	push	r12
 4d8:	df 92       	push	r13
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	4b 01       	movw	r8, r22
 4e4:	5c 01       	movw	r10, r24
 4e6:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 4e8:	24 e6       	ldi	r18, 0x64	; 100
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	0e 94 c9 03 	call	0x792	; 0x792 <__divmodsi4>
 4f4:	0f 2e       	mov	r0, r31
 4f6:	fa e0       	ldi	r31, 0x0A	; 10
 4f8:	cf 2e       	mov	r12, r31
 4fa:	d1 2c       	mov	r13, r1
 4fc:	e1 2c       	mov	r14, r1
 4fe:	f1 2c       	mov	r15, r1
 500:	f0 2d       	mov	r31, r0
 502:	a7 01       	movw	r20, r14
 504:	96 01       	movw	r18, r12
 506:	0e 94 c9 03 	call	0x792	; 0x792 <__divmodsi4>
 50a:	be 01       	movw	r22, r28
 50c:	80 e3       	ldi	r24, 0x30	; 48
 50e:	82 0f       	add	r24, r18
 510:	0e 94 02 02 	call	0x404	; 0x404 <writeChar>
	pp++;
 514:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
 516:	c5 01       	movw	r24, r10
 518:	b4 01       	movw	r22, r8
 51a:	a7 01       	movw	r20, r14
 51c:	96 01       	movw	r18, r12
 51e:	0e 94 c9 03 	call	0x792	; 0x792 <__divmodsi4>
 522:	86 2f       	mov	r24, r22
 524:	be 01       	movw	r22, r28
 526:	80 5d       	subi	r24, 0xD0	; 208
 528:	0e 94 02 02 	call	0x404	; 0x404 <writeChar>
//	yield();
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	ff 90       	pop	r15
 532:	ef 90       	pop	r14
 534:	df 90       	pop	r13
 536:	cf 90       	pop	r12
 538:	bf 90       	pop	r11
 53a:	af 90       	pop	r10
 53c:	9f 90       	pop	r9
 53e:	8f 90       	pop	r8
 540:	08 95       	ret

00000542 <computePrimes>:

void computePrimes(int pos) {
 542:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 544:	c1 2c       	mov	r12, r1
 546:	d1 2c       	mov	r13, r1
 548:	76 01       	movw	r14, r12
 54a:	c3 94       	inc	r12
		if (is_prime(n)) {
 54c:	c7 01       	movw	r24, r14
 54e:	b6 01       	movw	r22, r12
 550:	0e 94 0d 02 	call	0x41a	; 0x41a <is_prime>
 554:	67 2b       	or	r22, r23
 556:	68 2b       	or	r22, r24
 558:	69 2b       	or	r22, r25
 55a:	29 f0       	breq	.+10     	; 0x566 <computePrimes+0x24>
			printAt(n, pos);
 55c:	ae 01       	movw	r20, r28
 55e:	c7 01       	movw	r24, r14
 560:	b6 01       	movw	r22, r12
 562:	0e 94 67 02 	call	0x4ce	; 0x4ce <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	c8 1a       	sub	r12, r24
 56a:	d8 0a       	sbc	r13, r24
 56c:	e8 0a       	sbc	r14, r24
 56e:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 570:	ed cf       	rjmp	.-38     	; 0x54c <computePrimes+0xa>

00000572 <__vector_3>:
}

ISR(PCINT1_vect){
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
		//"resets" the button when it has been pressed

		if ((1 << PINB) == 0){
 594:	23 b1       	in	r18, 0x03	; 3
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__vector_3+0x2e>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	2a 95       	dec	r18
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <__vector_3+0x2a>
 5a4:	89 2b       	or	r24, r25
 5a6:	11 f4       	brne	.+4      	; 0x5ac <__vector_3+0x3a>
			yield();
 5a8:	0e 94 ae 03 	call	0x75c	; 0x75c <yield>
			}
			isPressed = 1;*/
		
	

}
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <main>:

int main() {
	LCD_Init();
 5ce:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
	spawn(computePrimes, 0);
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	81 ea       	ldi	r24, 0xA1	; 161
 5d8:	92 e0       	ldi	r25, 0x02	; 2
 5da:	0e 94 2a 03 	call	0x654	; 0x654 <spawn>
	computePrimes(3);
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 a1 02 	call	0x542	; 0x542 <computePrimes>

000005e6 <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5e6:	dc 01       	movw	r26, r24
 5e8:	15 96       	adiw	r26, 0x05	; 5
 5ea:	1c 92       	st	X, r1
 5ec:	1e 92       	st	-X, r1
 5ee:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 5f0:	db 01       	movw	r26, r22
 5f2:	ed 91       	ld	r30, X+
 5f4:	fc 91       	ld	r31, X
 5f6:	11 97       	sbiw	r26, 0x01	; 1
 5f8:	30 97       	sbiw	r30, 0x00	; 0
 5fa:	21 f4       	brne	.+8      	; 0x604 <enqueue+0x1e>
        *queue = p;
 5fc:	8d 93       	st	X+, r24
 5fe:	9c 93       	st	X, r25
 600:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 602:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 604:	24 81       	ldd	r18, Z+4	; 0x04
 606:	35 81       	ldd	r19, Z+5	; 0x05
 608:	21 15       	cp	r18, r1
 60a:	31 05       	cpc	r19, r1
 60c:	d1 f7       	brne	.-12     	; 0x602 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 60e:	95 83       	std	Z+5, r25	; 0x05
 610:	84 83       	std	Z+4, r24	; 0x04
 612:	08 95       	ret

00000614 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	00 d0       	rcall	.+0      	; 0x61a <dispatch+0x6>
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	9a 83       	std	Y+2, r25	; 0x02
 620:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 622:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 626:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 62a:	06 96       	adiw	r24, 0x06	; 6
 62c:	0e 94 10 04 	call	0x820	; 0x820 <setjmp>
 630:	89 2b       	or	r24, r25
 632:	59 f4       	brne	.+22     	; 0x64a <dispatch+0x36>
        current = next;
 634:	89 81       	ldd	r24, Y+1	; 0x01
 636:	9a 81       	ldd	r25, Y+2	; 0x02
 638:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 63c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	06 96       	adiw	r24, 0x06	; 6
 646:	0e 94 30 04 	call	0x860	; 0x860 <longjmp>
    }
}
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <spawn>:

void spawn(void (* function)(int), int arg) {
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	00 d0       	rcall	.+0      	; 0x65a <spawn+0x6>
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 65e:	f8 94       	cli
    if (!initialized) initialize();
 660:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 664:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 668:	23 2b       	or	r18, r19
 66a:	e1 f4       	brne	.+56     	; 0x6a4 <spawn+0x50>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 66c:	26 ee       	ldi	r18, 0xE6	; 230
 66e:	31 e0       	ldi	r19, 0x01	; 1
 670:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <threads+0x5>
 674:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <threads+0x4>
 678:	23 e5       	ldi	r18, 0x53	; 83
 67a:	32 e0       	ldi	r19, 0x02	; 2
 67c:	30 93 eb 01 	sts	0x01EB, r19	; 0x8001eb <threads+0x72>
 680:	20 93 ea 01 	sts	0x01EA, r18	; 0x8001ea <threads+0x71>
 684:	20 ec       	ldi	r18, 0xC0	; 192
 686:	32 e0       	ldi	r19, 0x02	; 2
 688:	30 93 58 02 	sts	0x0258, r19	; 0x800258 <threads+0xdf>
 68c:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 690:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <threads+0x14c>
 694:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <threads+0x14b>


    initialized = 1;
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 6a0:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 6a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 6ac:	3a 83       	std	Y+2, r19	; 0x02
 6ae:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 6b0:	23 2b       	or	r18, r19
 6b2:	a9 f0       	breq	.+42     	; 0x6de <spawn+0x8a>
        *queue = (*queue)->next;
 6b4:	e9 81       	ldd	r30, Y+1	; 0x01
 6b6:	fa 81       	ldd	r31, Y+2	; 0x02
 6b8:	44 81       	ldd	r20, Z+4	; 0x04
 6ba:	55 81       	ldd	r21, Z+5	; 0x05
 6bc:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 6c0:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 6c4:	91 83       	std	Z+1, r25	; 0x01
 6c6:	80 83       	st	Z, r24
    newp->arg = arg;
 6c8:	73 83       	std	Z+3, r23	; 0x03
 6ca:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 6cc:	15 82       	std	Z+5, r1	; 0x05
 6ce:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 6d0:	cf 01       	movw	r24, r30
 6d2:	06 96       	adiw	r24, 0x06	; 6
 6d4:	0e 94 10 04 	call	0x820	; 0x820 <setjmp>
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	49 f5       	brne	.+82     	; 0x72e <spawn+0xda>
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <spawn+0x8c>
 6de:	ff cf       	rjmp	.-2      	; 0x6de <spawn+0x8a>
        ENABLE();
 6e0:	78 94       	sei
        current->function(current->arg);
 6e2:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 6e6:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 6ea:	ed 91       	ld	r30, X+
 6ec:	fc 91       	ld	r31, X
 6ee:	11 97       	sbiw	r26, 0x01	; 1
 6f0:	12 96       	adiw	r26, 0x02	; 2
 6f2:	8d 91       	ld	r24, X+
 6f4:	9c 91       	ld	r25, X
 6f6:	13 97       	sbiw	r26, 0x03	; 3
 6f8:	09 95       	icall
        DISABLE();
 6fa:	f8 94       	cli
        enqueue(current, &freeQ);
 6fc:	62 e0       	ldi	r22, 0x02	; 2
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 704:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 708:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 70c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readyQ>
 710:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readyQ+0x1>
    if (*queue) {
 714:	00 97       	sbiw	r24, 0x00	; 0
 716:	51 f0       	breq	.+20     	; 0x72c <spawn+0xd8>
        *queue = (*queue)->next;
 718:	fc 01       	movw	r30, r24
 71a:	24 81       	ldd	r18, Z+4	; 0x04
 71c:	35 81       	ldd	r19, Z+5	; 0x05
 71e:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <readyQ+0x1>
 722:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 726:	0e 94 0a 03 	call	0x614	; 0x614 <dispatch>
 72a:	01 c0       	rjmp	.+2      	; 0x72e <spawn+0xda>
 72c:	ff cf       	rjmp	.-2      	; 0x72c <spawn+0xd8>
    }
    SETSTACK(&newp->context, &newp->stack);
 72e:	e9 81       	ldd	r30, Y+1	; 0x01
 730:	fa 81       	ldd	r31, Y+2	; 0x02
 732:	36 96       	adiw	r30, 0x06	; 6
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	9a 81       	ldd	r25, Y+2	; 0x02
 738:	87 59       	subi	r24, 0x97	; 151
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	91 8b       	std	Z+17, r25	; 0x11
 73e:	80 8b       	std	Z+16, r24	; 0x10
 740:	93 8b       	std	Z+19, r25	; 0x13
 742:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 744:	66 e0       	ldi	r22, 0x06	; 6
 746:	71 e0       	ldi	r23, 0x01	; 1
 748:	89 81       	ldd	r24, Y+1	; 0x01
 74a:	9a 81       	ldd	r25, Y+2	; 0x02
 74c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <enqueue>
    ENABLE();
 750:	78 94       	sei
}
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	08 95       	ret

0000075c <yield>:

void yield(void) 
{
	DISABLE();
 75c:	f8 94       	cli
	enqueue(current, &readyQ);
 75e:	66 e0       	ldi	r22, 0x06	; 6
 760:	71 e0       	ldi	r23, 0x01	; 1
 762:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 766:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 76a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 76e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readyQ>
 772:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <readyQ+0x1>
    if (*queue) {
 776:	00 97       	sbiw	r24, 0x00	; 0
 778:	59 f0       	breq	.+22     	; 0x790 <yield+0x34>
        *queue = (*queue)->next;
 77a:	fc 01       	movw	r30, r24
 77c:	24 81       	ldd	r18, Z+4	; 0x04
 77e:	35 81       	ldd	r19, Z+5	; 0x05
 780:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <readyQ+0x1>
 784:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <readyQ>

void yield(void) 
{
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 788:	0e 94 0a 03 	call	0x614	; 0x614 <dispatch>
	ENABLE();
 78c:	78 94       	sei
 78e:	08 95       	ret
 790:	ff cf       	rjmp	.-2      	; 0x790 <yield+0x34>

00000792 <__divmodsi4>:
 792:	05 2e       	mov	r0, r21
 794:	97 fb       	bst	r25, 7
 796:	1e f4       	brtc	.+6      	; 0x79e <__divmodsi4+0xc>
 798:	00 94       	com	r0
 79a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__negsi2>
 79e:	57 fd       	sbrc	r21, 7
 7a0:	07 d0       	rcall	.+14     	; 0x7b0 <__divmodsi4_neg2>
 7a2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__udivmodsi4>
 7a6:	07 fc       	sbrc	r0, 7
 7a8:	03 d0       	rcall	.+6      	; 0x7b0 <__divmodsi4_neg2>
 7aa:	4e f4       	brtc	.+18     	; 0x7be <__divmodsi4_exit>
 7ac:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__negsi2>

000007b0 <__divmodsi4_neg2>:
 7b0:	50 95       	com	r21
 7b2:	40 95       	com	r20
 7b4:	30 95       	com	r19
 7b6:	21 95       	neg	r18
 7b8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ba:	4f 4f       	sbci	r20, 0xFF	; 255
 7bc:	5f 4f       	sbci	r21, 0xFF	; 255

000007be <__divmodsi4_exit>:
 7be:	08 95       	ret

000007c0 <__negsi2>:
 7c0:	90 95       	com	r25
 7c2:	80 95       	com	r24
 7c4:	70 95       	com	r23
 7c6:	61 95       	neg	r22
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	8f 4f       	sbci	r24, 0xFF	; 255
 7cc:	9f 4f       	sbci	r25, 0xFF	; 255
 7ce:	08 95       	ret

000007d0 <__tablejump2__>:
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	05 90       	lpm	r0, Z+
 7d6:	f4 91       	lpm	r31, Z
 7d8:	e0 2d       	mov	r30, r0
 7da:	09 94       	ijmp

000007dc <__udivmodsi4>:
 7dc:	a1 e2       	ldi	r26, 0x21	; 33
 7de:	1a 2e       	mov	r1, r26
 7e0:	aa 1b       	sub	r26, r26
 7e2:	bb 1b       	sub	r27, r27
 7e4:	fd 01       	movw	r30, r26
 7e6:	0d c0       	rjmp	.+26     	; 0x802 <__udivmodsi4_ep>

000007e8 <__udivmodsi4_loop>:
 7e8:	aa 1f       	adc	r26, r26
 7ea:	bb 1f       	adc	r27, r27
 7ec:	ee 1f       	adc	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	a2 17       	cp	r26, r18
 7f2:	b3 07       	cpc	r27, r19
 7f4:	e4 07       	cpc	r30, r20
 7f6:	f5 07       	cpc	r31, r21
 7f8:	20 f0       	brcs	.+8      	; 0x802 <__udivmodsi4_ep>
 7fa:	a2 1b       	sub	r26, r18
 7fc:	b3 0b       	sbc	r27, r19
 7fe:	e4 0b       	sbc	r30, r20
 800:	f5 0b       	sbc	r31, r21

00000802 <__udivmodsi4_ep>:
 802:	66 1f       	adc	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	1a 94       	dec	r1
 80c:	69 f7       	brne	.-38     	; 0x7e8 <__udivmodsi4_loop>
 80e:	60 95       	com	r22
 810:	70 95       	com	r23
 812:	80 95       	com	r24
 814:	90 95       	com	r25
 816:	9b 01       	movw	r18, r22
 818:	ac 01       	movw	r20, r24
 81a:	bd 01       	movw	r22, r26
 81c:	cf 01       	movw	r24, r30
 81e:	08 95       	ret

00000820 <setjmp>:
 820:	dc 01       	movw	r26, r24
 822:	2d 92       	st	X+, r2
 824:	3d 92       	st	X+, r3
 826:	4d 92       	st	X+, r4
 828:	5d 92       	st	X+, r5
 82a:	6d 92       	st	X+, r6
 82c:	7d 92       	st	X+, r7
 82e:	8d 92       	st	X+, r8
 830:	9d 92       	st	X+, r9
 832:	ad 92       	st	X+, r10
 834:	bd 92       	st	X+, r11
 836:	cd 92       	st	X+, r12
 838:	dd 92       	st	X+, r13
 83a:	ed 92       	st	X+, r14
 83c:	fd 92       	st	X+, r15
 83e:	0d 93       	st	X+, r16
 840:	1d 93       	st	X+, r17
 842:	cd 93       	st	X+, r28
 844:	dd 93       	st	X+, r29
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	8d b7       	in	r24, 0x3d	; 61
 84c:	8d 93       	st	X+, r24
 84e:	8e b7       	in	r24, 0x3e	; 62
 850:	8d 93       	st	X+, r24
 852:	8f b7       	in	r24, 0x3f	; 63
 854:	8d 93       	st	X+, r24
 856:	ed 93       	st	X+, r30
 858:	fd 93       	st	X+, r31
 85a:	88 27       	eor	r24, r24
 85c:	99 27       	eor	r25, r25
 85e:	09 94       	ijmp

00000860 <longjmp>:
 860:	dc 01       	movw	r26, r24
 862:	cb 01       	movw	r24, r22
 864:	81 30       	cpi	r24, 0x01	; 1
 866:	91 05       	cpc	r25, r1
 868:	81 1d       	adc	r24, r1
 86a:	2d 90       	ld	r2, X+
 86c:	3d 90       	ld	r3, X+
 86e:	4d 90       	ld	r4, X+
 870:	5d 90       	ld	r5, X+
 872:	6d 90       	ld	r6, X+
 874:	7d 90       	ld	r7, X+
 876:	8d 90       	ld	r8, X+
 878:	9d 90       	ld	r9, X+
 87a:	ad 90       	ld	r10, X+
 87c:	bd 90       	ld	r11, X+
 87e:	cd 90       	ld	r12, X+
 880:	dd 90       	ld	r13, X+
 882:	ed 90       	ld	r14, X+
 884:	fd 90       	ld	r15, X+
 886:	0d 91       	ld	r16, X+
 888:	1d 91       	ld	r17, X+
 88a:	cd 91       	ld	r28, X+
 88c:	dd 91       	ld	r29, X+
 88e:	ed 91       	ld	r30, X+
 890:	fd 91       	ld	r31, X+
 892:	0d 90       	ld	r0, X+
 894:	f8 94       	cli
 896:	fe bf       	out	0x3e, r31	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	ed bf       	out	0x3d, r30	; 61
 89c:	ed 91       	ld	r30, X+
 89e:	fd 91       	ld	r31, X+
 8a0:	09 94       	ijmp

000008a2 <_exit>:
 8a2:	f8 94       	cli

000008a4 <__stop_program>:
 8a4:	ff cf       	rjmp	.-2      	; 0x8a4 <__stop_program>
