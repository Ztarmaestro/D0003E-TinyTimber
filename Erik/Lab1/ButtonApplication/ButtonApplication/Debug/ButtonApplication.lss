
ButtonApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088f  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e8  00000000  00000000  00000a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000291  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <LCD_Init>:
		[x]no frame interrupt,
		[x]no blanking
	*/

	/* Make the on-board processor run at its maximum speed */
	CLKPR = 0x80;
  74:	e1 e6       	ldi	r30, 0x61	; 97
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 e8       	ldi	r24, 0x80	; 128
  7a:	80 83       	st	Z, r24
	CLKPR = 0x00;
  7c:	10 82       	st	Z, r1

	/* External asynchronous clock source, 1/3 Bias and 1/4 duty cycle, Segments 25 */
	LCDCRB = (1<<LCDCS) | (0<<LCD2B) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  7e:	97 eb       	ldi	r25, 0xB7	; 183
  80:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	/* Using 16 as prescaler selection, 8 as LCD Clock Divide */
	LCDFRR = (0<<LCDPS2) | (0<<LCDPS1) | (0<<LCDPS0) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  84:	97 e0       	ldi	r25, 0x07	; 7
  86:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>

	/* Set segment drive time to 300 ms, set output voltage to 3.35V */
	LCDCCR = (0<<LCDDC2) | (0<<LCDDC1) | (0<<LCDDC0) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  8a:	9f e0       	ldi	r25, 0x0F	; 15
  8c:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>

	/* Enable LCD, default waveform, no interrupt enabled and no blanking */
	LCDCRA = (1<<LCDEN) | (0<<LCDAB) | (0<<LCDIE) | (0<<LCDBL);
  90:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	
	/* Timer/Counter1 */
	TCCR1B = (1<<CS12) | (0<<CS11) | (0<<CS10);
  94:	94 e0       	ldi	r25, 0x04	; 4
  96:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	/* Activate pinB (joystick pressed down) */
	PORTB = (1<<PINB7);
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	08 95       	ret

0000009e <button>:
	
}

void button(){

	int buttonpressed = 0;
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
	
	while(1){
		/* If bit 7 in pinb is 1 */
		if (((1<< PINB) == 1) && (buttonpressed == 1)) {
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
			buttonpressed = 0;
				
		}
		/* If bit 7 in pinb is 0 */
		if (((1<<PINB) == 0) && (buttonpressed == 0)) {
			if ((LCDDR0 == 0x4) && (buttonpressed == 0)) {
  a6:	ec ee       	ldi	r30, 0xEC	; 236
  a8:	f0 e0       	ldi	r31, 0x00	; 0
				LCDDR0 = 0x4 << 4;
			}
			else{
				LCDDR0 = 0x4;
  aa:	64 e0       	ldi	r22, 0x04	; 4
				
		}
		/* If bit 7 in pinb is 0 */
		if (((1<<PINB) == 0) && (buttonpressed == 0)) {
			if ((LCDDR0 == 0x4) && (buttonpressed == 0)) {
				LCDDR0 = 0x4 << 4;
  ac:	b0 e4       	ldi	r27, 0x40	; 64
	int buttonpressed = 0;
	
	while(1){
		/* If bit 7 in pinb is 1 */
		if (((1<< PINB) == 1) && (buttonpressed == 1)) {
			buttonpressed = 0;
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	70 e0       	ldi	r23, 0x00	; 0

	int buttonpressed = 0;
	
	while(1){
		/* If bit 7 in pinb is 1 */
		if (((1<< PINB) == 1) && (buttonpressed == 1)) {
  b2:	23 b1       	in	r18, 0x03	; 3
  b4:	ec 01       	movw	r28, r24
  b6:	02 c0       	rjmp	.+4      	; 0xbc <button+0x1e>
  b8:	cc 0f       	add	r28, r28
  ba:	dd 1f       	adc	r29, r29
  bc:	2a 95       	dec	r18
  be:	e2 f7       	brpl	.-8      	; 0xb8 <button+0x1a>
  c0:	21 97       	sbiw	r28, 0x01	; 1
  c2:	19 f4       	brne	.+6      	; 0xca <button+0x2c>
  c4:	41 30       	cpi	r20, 0x01	; 1
  c6:	51 05       	cpc	r21, r1
  c8:	a9 f0       	breq	.+42     	; 0xf4 <button+0x56>
			buttonpressed = 0;
				
		}
		/* If bit 7 in pinb is 0 */
		if (((1<<PINB) == 0) && (buttonpressed == 0)) {
  ca:	23 b1       	in	r18, 0x03	; 3
  cc:	ec 01       	movw	r28, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <button+0x36>
  d0:	cc 0f       	add	r28, r28
  d2:	dd 1f       	adc	r29, r29
  d4:	2a 95       	dec	r18
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <button+0x32>
  d8:	cd 2b       	or	r28, r29
  da:	59 f7       	brne	.-42     	; 0xb2 <button+0x14>
  dc:	41 15       	cp	r20, r1
  de:	51 05       	cpc	r21, r1
  e0:	41 f7       	brne	.-48     	; 0xb2 <button+0x14>
			if ((LCDDR0 == 0x4) && (buttonpressed == 0)) {
  e2:	20 81       	ld	r18, Z
  e4:	24 30       	cpi	r18, 0x04	; 4
  e6:	19 f4       	brne	.+6      	; 0xee <button+0x50>
				LCDDR0 = 0x4 << 4;
  e8:	b0 83       	st	Z, r27
			}
			else{
				LCDDR0 = 0x4;
			}
			buttonpressed = 1;
  ea:	ac 01       	movw	r20, r24
				
		}
		/* If bit 7 in pinb is 0 */
		if (((1<<PINB) == 0) && (buttonpressed == 0)) {
			if ((LCDDR0 == 0x4) && (buttonpressed == 0)) {
				LCDDR0 = 0x4 << 4;
  ec:	e2 cf       	rjmp	.-60     	; 0xb2 <button+0x14>
			}
			else{
				LCDDR0 = 0x4;
  ee:	60 83       	st	Z, r22
			}
			buttonpressed = 1;
  f0:	ac 01       	movw	r20, r24
  f2:	df cf       	rjmp	.-66     	; 0xb2 <button+0x14>
		if (((1<< PINB) == 1) && (buttonpressed == 1)) {
			buttonpressed = 0;
				
		}
		/* If bit 7 in pinb is 0 */
		if (((1<<PINB) == 0) && (buttonpressed == 0)) {
  f4:	23 b1       	in	r18, 0x03	; 3
  f6:	ac 01       	movw	r20, r24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <button+0x60>
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	2a 95       	dec	r18
 100:	e2 f7       	brpl	.-8      	; 0xfa <button+0x5c>
 102:	45 2b       	or	r20, r21
 104:	71 f3       	breq	.-36     	; 0xe2 <button+0x44>
	int buttonpressed = 0;
	
	while(1){
		/* If bit 7 in pinb is 1 */
		if (((1<< PINB) == 1) && (buttonpressed == 1)) {
			buttonpressed = 0;
 106:	4a 2f       	mov	r20, r26
 108:	57 2f       	mov	r21, r23
 10a:	d3 cf       	rjmp	.-90     	; 0xb2 <button+0x14>

0000010c <main>:
}

int main(void)
{
	// LCD settings
	LCD_Init();
 10c:	0e 94 3a 00 	call	0x74	; 0x74 <LCD_Init>

	// Lab1 part3
	button();
 110:	0e 94 4f 00 	call	0x9e	; 0x9e <button>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
