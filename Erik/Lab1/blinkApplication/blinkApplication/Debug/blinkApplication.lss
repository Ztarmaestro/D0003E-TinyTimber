
blinkApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089d  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e8  00000000  00000000  00000a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023d  00000000  00000000  00001245  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000432  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000018fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <LCD_Init>:
		[x]no frame interrupt,
		[x]no blanking
	*/

	/* Make the on-board processor run at its maximum speed */
	CLKPR = 0x80;
  74:	e1 e6       	ldi	r30, 0x61	; 97
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 e8       	ldi	r24, 0x80	; 128
  7a:	80 83       	st	Z, r24
	CLKPR = 0x00;
  7c:	10 82       	st	Z, r1

	/* External asynchronous clock source, 1/3 Bias and 1/4 duty cycle, Segments 25 */
	LCDCRB = (1<<LCDCS) | (0<<LCD2B) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  7e:	97 eb       	ldi	r25, 0xB7	; 183
  80:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	/* Using 16 as prescaler selection, 8 as LCD Clock Divide */
	LCDFRR = (0<<LCDPS2) | (0<<LCDPS1) | (0<<LCDPS0) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  84:	97 e0       	ldi	r25, 0x07	; 7
  86:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>

	/* Set segment drive time to 300 ?s, set output voltage to 3.35V */
	LCDCCR = (0<<LCDDC2) | (0<<LCDDC1) | (0<<LCDDC0) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  8a:	9f e0       	ldi	r25, 0x0F	; 15
  8c:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>

	/* Enable LCD, default waveform, no interrupt enabled and no blanking */
	LCDCRA = (1<<LCDEN) | (0<<LCDAB) | (0<<LCDIE) | (0<<LCDBL);
  90:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	
	/* Timer/Counter1 */
	TCCR1B = (1<<CS12) | (0<<CS11) | (0<<CS10);
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  9a:	08 95       	ret

0000009c <blink>:
	
	// representing the next timer value to wait for
	unsigned int timer;
	
	// initialize counter
	TCNT1 = 0;
  9c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	// check value of TCNT1, should reset to 0 when reaching max value 65535,
	while(1){
		timer = TCNT1;
  a4:	a4 e8       	ldi	r26, 0x84	; 132
  a6:	b0 e0       	ldi	r27, 0x00	; 0
		if (timer >= 32768){
			LCDDR0 = 0x0;
		} 
		// Turn special symbol on LCD ON, when timer is smaller then 32768
		else {
			LCDDR0 = 0x22;
  a8:	ec ee       	ldi	r30, 0xEC	; 236
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	22 e2       	ldi	r18, 0x22	; 34
	// initialize counter
	TCNT1 = 0;
	
	// check value of TCNT1, should reset to 0 when reaching max value 65535,
	while(1){
		timer = TCNT1;
  ae:	8d 91       	ld	r24, X+
  b0:	9c 91       	ld	r25, X
  b2:	11 97       	sbiw	r26, 0x01	; 1
		
		//Turn special symbol on LCD OFF, when timer is bigger then 32768
		if (timer >= 32768){
  b4:	99 23       	and	r25, r25
  b6:	14 f4       	brge	.+4      	; 0xbc <blink+0x20>
			LCDDR0 = 0x0;
  b8:	10 82       	st	Z, r1
  ba:	f9 cf       	rjmp	.-14     	; 0xae <blink+0x12>
		} 
		// Turn special symbol on LCD ON, when timer is smaller then 32768
		else {
			LCDDR0 = 0x22;
  bc:	20 83       	st	Z, r18
  be:	f7 cf       	rjmp	.-18     	; 0xae <blink+0x12>

000000c0 <main>:
}

int main(void)
{
	// LCD settings
	LCD_Init();
  c0:	0e 94 3a 00 	call	0x74	; 0x74 <LCD_Init>

	// Blink
	blink();
  c4:	0e 94 4e 00 	call	0x9c	; 0x9c <blink>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
