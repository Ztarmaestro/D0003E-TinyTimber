
Lab 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000960  000009f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  00800104  00800104  000009f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011dc  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4e  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078a  00000000  00000000  0000283a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000548  00000000  00000000  000031a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000970  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	78 00       	.word	0x0078	; ????
  5e:	83 00       	.word	0x0083	; ????
  60:	8d 00       	.word	0x008d	; ????
  62:	98 00       	.word	0x0098	; ????
  64:	a3 00       	.word	0x00a3	; ????
  66:	ae 00       	.word	0x00ae	; ????
  68:	ba 00       	.word	0x00ba	; ????
  6a:	c6 00       	.word	0x00c6	; ????
  6c:	d0 00       	.word	0x00d0	; ????
  6e:	dc 00       	.word	0x00dc	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e6       	ldi	r30, 0x60	; 96
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 33       	cpi	r26, 0x33	; 51
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <main>
  a6:	0c 94 ae 04 	jmp	0x95c	; 0x95c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:
mutex mute = MUTEX_INIT;
//settings for avr
void LCD_Init(void)
{
	//setting for the AVR//
	CLKPR = 0x80;
  ae:	e1 e6       	ldi	r30, 0x61	; 97
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
  b6:	10 82       	st	Z, r1
	//external async clock, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2);
  b8:	97 eb       	ldi	r25, 0xB7	; 183
  ba:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	//clock divider N=8
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	//LCD low power, no frame interrupt no blanking
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  c4:	90 ec       	ldi	r25, 0xC0	; 192
  c6:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	//Drive time 300ms, control voltage 3,35V
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  ca:	9f e0       	ldi	r25, 0x0F	; 15
  cc:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
	//timer with prescaler 256
	TCCR1B = (1<<CS12);
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//button setting
	PORTB = (1 << PINB7);
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	08 95       	ret

000000da <caseNumbers>:
}
//cases for number 0-9
void caseNumbers(char ch)
{
	//cases for every number 0-9
	switch (ch)
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	fc 01       	movw	r30, r24
  de:	f0 97       	sbiw	r30, 0x30	; 48
  e0:	ea 30       	cpi	r30, 0x0A	; 10
  e2:	f1 05       	cpc	r31, r1
  e4:	08 f0       	brcs	.+2      	; 0xe8 <caseNumbers+0xe>
  e6:	73 c0       	rjmp	.+230    	; 0x1ce <caseNumbers+0xf4>
  e8:	e2 5d       	subi	r30, 0xD2	; 210
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	0c 94 45 04 	jmp	0x88a	; 0x88a <__tablejump2__>
	{
		case '0' :
		reg1 = 0x01;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x05;
  f6:	95 e0       	ldi	r25, 0x05	; 5
  f8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x05;
  fc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 100:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 104:	08 95       	ret
		case '1' :
		reg1 = 0x00;
 106:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <reg1>
		reg2 = 0x01;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x01;
 110:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reg3>
		reg4 = 0x00;
 114:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
		break;
 118:	08 95       	ret
		case '2' :
		reg1 = 0x01;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x01;
 120:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x0E;
 124:	9e e0       	ldi	r25, 0x0E	; 14
 126:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 12a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 12e:	08 95       	ret
		case '3' :
		reg1 = 0x01;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x01;
 136:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x0B;
 13a:	9b e0       	ldi	r25, 0x0B	; 11
 13c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 140:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 144:	08 95       	ret
		case '4' :
		reg1 = 0x00;
 146:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <reg1>
		reg2 = 0x05;
 14a:	85 e0       	ldi	r24, 0x05	; 5
 14c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x0B;
 150:	8b e0       	ldi	r24, 0x0B	; 11
 152:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reg3>
		reg4 = 0x00;
 156:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
		break;
 15a:	08 95       	ret
		case '5':
		reg1 = 0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x04;
 162:	94 e0       	ldi	r25, 0x04	; 4
 164:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x0B;
 168:	9b e0       	ldi	r25, 0x0B	; 11
 16a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 16e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 172:	08 95       	ret
		case '6' :
		reg1 = 0x01;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x04;
 17a:	94 e0       	ldi	r25, 0x04	; 4
 17c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x0F;
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 186:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 18a:	08 95       	ret
		case '7' :
		reg1 = 0x01;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x01;
 192:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x01;
 196:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reg3>
		reg4 = 0x00;
 19a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
		break;
 19e:	08 95       	ret
		case '8' :
		reg1 = 0x01;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x05;
 1a6:	95 e0       	ldi	r25, 0x05	; 5
 1a8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x0F;
 1ac:	9f e0       	ldi	r25, 0x0F	; 15
 1ae:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 1b2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 1b6:	08 95       	ret
		case '9' :
		reg1 = 0x01;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x05;
 1be:	95 e0       	ldi	r25, 0x05	; 5
 1c0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x0B;
 1c4:	9b e0       	ldi	r25, 0x0B	; 11
 1c6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 1ca:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 1ce:	08 95       	ret

000001d0 <casePosition>:
//cases for all positions on the avr
void casePosition(int pos)
{
	//cases for each position
	//Bitmask and shifts are used to manipulate bits
	switch (pos)
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	91 05       	cpc	r25, r1
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <casePosition+0x8>
 1d6:	66 c0       	rjmp	.+204    	; 0x2a4 <casePosition+0xd4>
 1d8:	2c f4       	brge	.+10     	; 0x1e4 <casePosition+0x14>
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	69 f0       	breq	.+26     	; 0x1f8 <casePosition+0x28>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	61 f1       	breq	.+88     	; 0x23a <casePosition+0x6a>
 1e2:	08 95       	ret
 1e4:	84 30       	cpi	r24, 0x04	; 4
 1e6:	91 05       	cpc	r25, r1
 1e8:	09 f4       	brne	.+2      	; 0x1ec <casePosition+0x1c>
 1ea:	b2 c0       	rjmp	.+356    	; 0x350 <casePosition+0x180>
 1ec:	0c f4       	brge	.+2      	; 0x1f0 <casePosition+0x20>
 1ee:	7b c0       	rjmp	.+246    	; 0x2e6 <casePosition+0x116>
 1f0:	05 97       	sbiw	r24, 0x05	; 5
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <casePosition+0x26>
 1f4:	ce c0       	rjmp	.+412    	; 0x392 <casePosition+0x1c2>
 1f6:	08 95       	ret
	{
		case 0:
		LCDDR0  = (LCDDR0 & 0xF0) | reg1;
 1f8:	ec ee       	ldi	r30, 0xEC	; 236
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 204:	89 2b       	or	r24, r25
 206:	80 83       	st	Z, r24
		LCDDR5  = (LCDDR5 & 0xF0) | reg2;
 208:	e1 ef       	ldi	r30, 0xF1	; 241
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 7f       	andi	r24, 0xF0	; 240
 210:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 214:	89 2b       	or	r24, r25
 216:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10 & 0xF0) | reg3;
 218:	e6 ef       	ldi	r30, 0xF6	; 246
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	80 7f       	andi	r24, 0xF0	; 240
 220:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 224:	89 2b       	or	r24, r25
 226:	80 83       	st	Z, r24
		LCDDR15 = (LCDDR15 & 0xF0) | reg4;
 228:	eb ef       	ldi	r30, 0xFB	; 251
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 234:	89 2b       	or	r24, r25
 236:	80 83       	st	Z, r24
		
		break;
 238:	08 95       	ret
		case 1:
		LCDDR0  = (LCDDR0 & 0x0F) | reg1 << 4;
 23a:	ec ee       	ldi	r30, 0xEC	; 236
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	20 81       	ld	r18, Z
 240:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 244:	30 e1       	ldi	r19, 0x10	; 16
 246:	93 9f       	mul	r25, r19
 248:	c0 01       	movw	r24, r0
 24a:	11 24       	eor	r1, r1
 24c:	92 2f       	mov	r25, r18
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	89 2b       	or	r24, r25
 252:	80 83       	st	Z, r24
		LCDDR5  = (LCDDR5 & 0x0F) | reg2 << 4;
 254:	e1 ef       	ldi	r30, 0xF1	; 241
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	20 81       	ld	r18, Z
 25a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 25e:	30 e1       	ldi	r19, 0x10	; 16
 260:	93 9f       	mul	r25, r19
 262:	c0 01       	movw	r24, r0
 264:	11 24       	eor	r1, r1
 266:	92 2f       	mov	r25, r18
 268:	9f 70       	andi	r25, 0x0F	; 15
 26a:	89 2b       	or	r24, r25
 26c:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10 & 0x0F) | reg3 << 4;
 26e:	e6 ef       	ldi	r30, 0xF6	; 246
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	20 81       	ld	r18, Z
 274:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 278:	30 e1       	ldi	r19, 0x10	; 16
 27a:	93 9f       	mul	r25, r19
 27c:	c0 01       	movw	r24, r0
 27e:	11 24       	eor	r1, r1
 280:	92 2f       	mov	r25, r18
 282:	9f 70       	andi	r25, 0x0F	; 15
 284:	89 2b       	or	r24, r25
 286:	80 83       	st	Z, r24
		LCDDR15 = (LCDDR15 & 0x0F) | reg4 << 4;
 288:	eb ef       	ldi	r30, 0xFB	; 251
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	20 81       	ld	r18, Z
 28e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 292:	30 e1       	ldi	r19, 0x10	; 16
 294:	93 9f       	mul	r25, r19
 296:	c0 01       	movw	r24, r0
 298:	11 24       	eor	r1, r1
 29a:	92 2f       	mov	r25, r18
 29c:	9f 70       	andi	r25, 0x0F	; 15
 29e:	89 2b       	or	r24, r25
 2a0:	80 83       	st	Z, r24
		break;
 2a2:	08 95       	ret
		case 2:
		LCDDR1  = (LCDDR1 & 0xF0) | reg1;
 2a4:	ed ee       	ldi	r30, 0xED	; 237
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 7f       	andi	r24, 0xF0	; 240
 2ac:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 2b0:	89 2b       	or	r24, r25
 2b2:	80 83       	st	Z, r24
		LCDDR6  = (LCDDR6 & 0xF0) |reg2;
 2b4:	e2 ef       	ldi	r30, 0xF2	; 242
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	80 7f       	andi	r24, 0xF0	; 240
 2bc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 2c0:	89 2b       	or	r24, r25
 2c2:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11 & 0xF0) |reg3;
 2c4:	e7 ef       	ldi	r30, 0xF7	; 247
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	80 7f       	andi	r24, 0xF0	; 240
 2cc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 2d0:	89 2b       	or	r24, r25
 2d2:	80 83       	st	Z, r24
		LCDDR16 = (LCDDR16 & 0xF0) |reg4;
 2d4:	ec ef       	ldi	r30, 0xFC	; 252
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 2e0:	89 2b       	or	r24, r25
 2e2:	80 83       	st	Z, r24
		break;
 2e4:	08 95       	ret
		
		case 3:
		LCDDR1  = (LCDDR1 & 0x0F) | reg1 << 4;
 2e6:	ed ee       	ldi	r30, 0xED	; 237
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	20 81       	ld	r18, Z
 2ec:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 2f0:	30 e1       	ldi	r19, 0x10	; 16
 2f2:	93 9f       	mul	r25, r19
 2f4:	c0 01       	movw	r24, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	92 2f       	mov	r25, r18
 2fa:	9f 70       	andi	r25, 0x0F	; 15
 2fc:	89 2b       	or	r24, r25
 2fe:	80 83       	st	Z, r24
		LCDDR6  = (LCDDR6 & 0x0F) | reg2 << 4;
 300:	e2 ef       	ldi	r30, 0xF2	; 242
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	20 81       	ld	r18, Z
 306:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 30a:	30 e1       	ldi	r19, 0x10	; 16
 30c:	93 9f       	mul	r25, r19
 30e:	c0 01       	movw	r24, r0
 310:	11 24       	eor	r1, r1
 312:	92 2f       	mov	r25, r18
 314:	9f 70       	andi	r25, 0x0F	; 15
 316:	89 2b       	or	r24, r25
 318:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11 & 0x0F) | reg3 << 4;
 31a:	e7 ef       	ldi	r30, 0xF7	; 247
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	20 81       	ld	r18, Z
 320:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 324:	30 e1       	ldi	r19, 0x10	; 16
 326:	93 9f       	mul	r25, r19
 328:	c0 01       	movw	r24, r0
 32a:	11 24       	eor	r1, r1
 32c:	92 2f       	mov	r25, r18
 32e:	9f 70       	andi	r25, 0x0F	; 15
 330:	89 2b       	or	r24, r25
 332:	80 83       	st	Z, r24
		LCDDR16 = (LCDDR16 & 0x0F) | reg4 << 4;
 334:	ec ef       	ldi	r30, 0xFC	; 252
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	20 81       	ld	r18, Z
 33a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 33e:	30 e1       	ldi	r19, 0x10	; 16
 340:	93 9f       	mul	r25, r19
 342:	c0 01       	movw	r24, r0
 344:	11 24       	eor	r1, r1
 346:	92 2f       	mov	r25, r18
 348:	9f 70       	andi	r25, 0x0F	; 15
 34a:	89 2b       	or	r24, r25
 34c:	80 83       	st	Z, r24
		break;
 34e:	08 95       	ret

		case 4:
		LCDDR2  = (LCDDR2 & 0xF0) |reg1;
 350:	ee ee       	ldi	r30, 0xEE	; 238
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 7f       	andi	r24, 0xF0	; 240
 358:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 35c:	89 2b       	or	r24, r25
 35e:	80 83       	st	Z, r24
		LCDDR7  = (LCDDR7 & 0xF0) |reg2;
 360:	e3 ef       	ldi	r30, 0xF3	; 243
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	80 7f       	andi	r24, 0xF0	; 240
 368:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 36c:	89 2b       	or	r24, r25
 36e:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12 & 0xF0) |reg3;
 370:	e8 ef       	ldi	r30, 0xF8	; 248
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	80 7f       	andi	r24, 0xF0	; 240
 378:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 37c:	89 2b       	or	r24, r25
 37e:	80 83       	st	Z, r24
		LCDDR17 = (LCDDR17 & 0xF0) |reg4;
 380:	ed ef       	ldi	r30, 0xFD	; 253
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	80 7f       	andi	r24, 0xF0	; 240
 388:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 38c:	89 2b       	or	r24, r25
 38e:	80 83       	st	Z, r24
		break;
 390:	08 95       	ret

		case 5:
		LCDDR2  = (LCDDR2 & 0x0F) | reg1 << 4;
 392:	ee ee       	ldi	r30, 0xEE	; 238
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	20 81       	ld	r18, Z
 398:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 39c:	30 e1       	ldi	r19, 0x10	; 16
 39e:	93 9f       	mul	r25, r19
 3a0:	c0 01       	movw	r24, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	92 2f       	mov	r25, r18
 3a6:	9f 70       	andi	r25, 0x0F	; 15
 3a8:	89 2b       	or	r24, r25
 3aa:	80 83       	st	Z, r24
		LCDDR7  = (LCDDR7 & 0x0F) | reg2 << 4;
 3ac:	e3 ef       	ldi	r30, 0xF3	; 243
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	20 81       	ld	r18, Z
 3b2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 3b6:	30 e1       	ldi	r19, 0x10	; 16
 3b8:	93 9f       	mul	r25, r19
 3ba:	c0 01       	movw	r24, r0
 3bc:	11 24       	eor	r1, r1
 3be:	92 2f       	mov	r25, r18
 3c0:	9f 70       	andi	r25, 0x0F	; 15
 3c2:	89 2b       	or	r24, r25
 3c4:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12 & 0x0F) | reg3 << 4;
 3c6:	e8 ef       	ldi	r30, 0xF8	; 248
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	20 81       	ld	r18, Z
 3cc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 3d0:	30 e1       	ldi	r19, 0x10	; 16
 3d2:	93 9f       	mul	r25, r19
 3d4:	c0 01       	movw	r24, r0
 3d6:	11 24       	eor	r1, r1
 3d8:	92 2f       	mov	r25, r18
 3da:	9f 70       	andi	r25, 0x0F	; 15
 3dc:	89 2b       	or	r24, r25
 3de:	80 83       	st	Z, r24
		LCDDR17 = (LCDDR17 & 0x0F) | reg4 << 4;
 3e0:	ed ef       	ldi	r30, 0xFD	; 253
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	20 81       	ld	r18, Z
 3e6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 3ea:	30 e1       	ldi	r19, 0x10	; 16
 3ec:	93 9f       	mul	r25, r19
 3ee:	c0 01       	movw	r24, r0
 3f0:	11 24       	eor	r1, r1
 3f2:	92 2f       	mov	r25, r18
 3f4:	9f 70       	andi	r25, 0x0F	; 15
 3f6:	89 2b       	or	r24, r25
 3f8:	80 83       	st	Z, r24
 3fa:	08 95       	ret

000003fc <writeChar>:
	}
}

//function to write a char at a position
void writeChar(char ch, int pos)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	eb 01       	movw	r28, r22
	
	caseNumbers(ch);
 402:	0e 94 6d 00 	call	0xda	; 0xda <caseNumbers>
	casePosition(pos);
 406:	ce 01       	movw	r24, r28
 408:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <casePosition>
	
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <is_prime>:
long is_prime(long i)
{
 412:	8f 92       	push	r8
 414:	9f 92       	push	r9
 416:	af 92       	push	r10
 418:	bf 92       	push	r11
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	4b 01       	movw	r8, r22
 424:	5c 01       	movw	r10, r24
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	88 16       	cp	r8, r24
 42a:	91 04       	cpc	r9, r1
 42c:	a1 04       	cpc	r10, r1
 42e:	b1 04       	cpc	r11, r1
 430:	ac f1       	brlt	.+106    	; 0x49c <is_prime+0x8a>
		rest = i % n;
 432:	d5 01       	movw	r26, r10
 434:	c4 01       	movw	r24, r8
 436:	81 70       	andi	r24, 0x01	; 1
 438:	99 27       	eor	r25, r25
 43a:	aa 27       	eor	r26, r26
 43c:	b0 78       	andi	r27, 0x80	; 128
 43e:	bb 23       	and	r27, r27
 440:	54 f4       	brge	.+20     	; 0x456 <is_prime+0x44>
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	a1 09       	sbc	r26, r1
 446:	b1 09       	sbc	r27, r1
 448:	8e 6f       	ori	r24, 0xFE	; 254
 44a:	9f 6f       	ori	r25, 0xFF	; 255
 44c:	af 6f       	ori	r26, 0xFF	; 255
 44e:	bf 6f       	ori	r27, 0xFF	; 255
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	a1 1d       	adc	r26, r1
 454:	b1 1d       	adc	r27, r1
		if (rest == 0){
 456:	89 2b       	or	r24, r25
 458:	8a 2b       	or	r24, r26
 45a:	8b 2b       	or	r24, r27
 45c:	21 f1       	breq	.+72     	; 0x4a6 <is_prime+0x94>
 45e:	c1 2c       	mov	r12, r1
 460:	d1 2c       	mov	r13, r1
 462:	76 01       	movw	r14, r12
 464:	68 94       	set
 466:	c1 f8       	bld	r12, 1
 468:	0a c0       	rjmp	.+20     	; 0x47e <is_prime+0x6c>
}
long is_prime(long i)
{
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
		rest = i % n;
 46a:	c5 01       	movw	r24, r10
 46c:	b4 01       	movw	r22, r8
 46e:	a7 01       	movw	r20, r14
 470:	96 01       	movw	r18, r12
 472:	0e 94 26 04 	call	0x84c	; 0x84c <__divmodsi4>
		if (rest == 0){
 476:	67 2b       	or	r22, r23
 478:	68 2b       	or	r22, r24
 47a:	69 2b       	or	r22, r25
 47c:	c1 f0       	breq	.+48     	; 0x4ae <is_prime+0x9c>
	
}
long is_prime(long i)
{
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
 47e:	8f ef       	ldi	r24, 0xFF	; 255
 480:	c8 1a       	sub	r12, r24
 482:	d8 0a       	sbc	r13, r24
 484:	e8 0a       	sbc	r14, r24
 486:	f8 0a       	sbc	r15, r24
 488:	c8 14       	cp	r12, r8
 48a:	d9 04       	cpc	r13, r9
 48c:	ea 04       	cpc	r14, r10
 48e:	fb 04       	cpc	r15, r11
 490:	61 f7       	brne	.-40     	; 0x46a <is_prime+0x58>
		rest = i % n;
		if (rest == 0){
			return 0;
		}
	}
	return 1;
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0c c0       	rjmp	.+24     	; 0x4b4 <is_prime+0xa2>
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <is_prime+0xa2>
{
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
		rest = i % n;
		if (rest == 0){
			return 0;
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	cb 01       	movw	r24, r22
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <is_prime+0xa2>
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	cb 01       	movw	r24, r22
		}
	}
	return 1;
}
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	bf 90       	pop	r11
 4be:	af 90       	pop	r10
 4c0:	9f 90       	pop	r9
 4c2:	8f 90       	pop	r8
 4c4:	08 95       	ret

000004c6 <printAt>:

void printAt(long num, int pos) {
 4c6:	cf 92       	push	r12
 4c8:	df 92       	push	r13
 4ca:	ef 92       	push	r14
 4cc:	ff 92       	push	r15
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	6b 01       	movw	r12, r22
 4d4:	7c 01       	movw	r14, r24
 4d6:	ea 01       	movw	r28, r20
	lock(&mute);
 4d8:	84 e0       	ldi	r24, 0x04	; 4
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <lock>
	pp = pos;
 4e0:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <pp+0x1>
 4e4:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <pp>
	writeChar( (num % 100) / 10 + '0', pp);
 4e8:	c7 01       	movw	r24, r14
 4ea:	b6 01       	movw	r22, r12
 4ec:	24 e6       	ldi	r18, 0x64	; 100
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	40 e0       	ldi	r20, 0x00	; 0
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	0e 94 26 04 	call	0x84c	; 0x84c <__divmodsi4>
 4f8:	2a e0       	ldi	r18, 0x0A	; 10
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	50 e0       	ldi	r21, 0x00	; 0
 500:	0e 94 26 04 	call	0x84c	; 0x84c <__divmodsi4>
 504:	be 01       	movw	r22, r28
 506:	80 e3       	ldi	r24, 0x30	; 48
 508:	82 0f       	add	r24, r18
 50a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <writeChar>
	int loop_test;
	for(int test; test < 1000; test++){
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	88 3e       	cpi	r24, 0xE8	; 232
 516:	23 e0       	ldi	r18, 0x03	; 3
 518:	92 07       	cpc	r25, r18
 51a:	d9 f7       	brne	.-10     	; 0x512 <__stack+0x13>
		
		loop_test++;
		}
	pp++;
 51c:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <pp>
 520:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <pp+0x1>
 524:	21 96       	adiw	r28, 0x01	; 1
 526:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <pp+0x1>
 52a:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <pp>
	writeChar( num % 10 + '0', pp);
 52e:	c7 01       	movw	r24, r14
 530:	b6 01       	movw	r22, r12
 532:	2a e0       	ldi	r18, 0x0A	; 10
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	40 e0       	ldi	r20, 0x00	; 0
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	0e 94 26 04 	call	0x84c	; 0x84c <__divmodsi4>
 53e:	86 2f       	mov	r24, r22
 540:	be 01       	movw	r22, r28
 542:	80 5d       	subi	r24, 0xD0	; 208
 544:	0e 94 fe 01 	call	0x3fc	; 0x3fc <writeChar>
	unlock(&mute);
 548:	84 e0       	ldi	r24, 0x04	; 4
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	0e 94 01 04 	call	0x802	; 0x802 <unlock>
//	yield();
}
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	ff 90       	pop	r15
 556:	ef 90       	pop	r14
 558:	df 90       	pop	r13
 55a:	cf 90       	pop	r12
 55c:	08 95       	ret

0000055e <computePrimes>:

void computePrimes(int pos) {
 55e:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 560:	c1 2c       	mov	r12, r1
 562:	d1 2c       	mov	r13, r1
 564:	76 01       	movw	r14, r12
 566:	c3 94       	inc	r12
		if (is_prime(n)) {
 568:	c7 01       	movw	r24, r14
 56a:	b6 01       	movw	r22, r12
 56c:	0e 94 09 02 	call	0x412	; 0x412 <is_prime>
 570:	67 2b       	or	r22, r23
 572:	68 2b       	or	r22, r24
 574:	69 2b       	or	r22, r25
 576:	29 f0       	breq	.+10     	; 0x582 <computePrimes+0x24>
			printAt(n, pos);
 578:	ae 01       	movw	r20, r28
 57a:	c7 01       	movw	r24, r14
 57c:	b6 01       	movw	r22, r12
 57e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	c8 1a       	sub	r12, r24
 586:	d8 0a       	sbc	r13, r24
 588:	e8 0a       	sbc	r14, r24
 58a:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 58c:	ed cf       	rjmp	.-38     	; 0x568 <computePrimes+0xa>

0000058e <__vector_3>:
}

ISR(PCINT1_vect){
 58e:	1f 92       	push	r1
 590:	0f 92       	push	r0
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	0f 92       	push	r0
 596:	11 24       	eor	r1, r1
 598:	2f 93       	push	r18
 59a:	3f 93       	push	r19
 59c:	4f 93       	push	r20
 59e:	5f 93       	push	r21
 5a0:	6f 93       	push	r22
 5a2:	7f 93       	push	r23
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
		if ((1 << PINB) == 0){
 5b0:	23 b1       	in	r18, 0x03	; 3
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__vector_3+0x2e>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	2a 95       	dec	r18
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <__vector_3+0x2a>
 5c0:	89 2b       	or	r24, r25
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <__vector_3+0x3a>
			yield();
 5c4:	0e 94 c1 03 	call	0x782	; 0x782 <yield>
		}
}
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <main>:

int main() {
	LCD_Init();
 5ea:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
	spawn(computePrimes, 0);
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	8f ea       	ldi	r24, 0xAF	; 175
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	0e 94 38 03 	call	0x670	; 0x670 <spawn>
	computePrimes(3);
 5fa:	83 e0       	ldi	r24, 0x03	; 3
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 af 02 	call	0x55e	; 0x55e <computePrimes>

00000602 <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 602:	dc 01       	movw	r26, r24
 604:	15 96       	adiw	r26, 0x05	; 5
 606:	1c 92       	st	X, r1
 608:	1e 92       	st	-X, r1
 60a:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 60c:	db 01       	movw	r26, r22
 60e:	ed 91       	ld	r30, X+
 610:	fc 91       	ld	r31, X
 612:	11 97       	sbiw	r26, 0x01	; 1
 614:	30 97       	sbiw	r30, 0x00	; 0
 616:	21 f4       	brne	.+8      	; 0x620 <enqueue+0x1e>
        *queue = p;
 618:	8d 93       	st	X+, r24
 61a:	9c 93       	st	X, r25
 61c:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 61e:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 620:	24 81       	ldd	r18, Z+4	; 0x04
 622:	35 81       	ldd	r19, Z+5	; 0x05
 624:	21 15       	cp	r18, r1
 626:	31 05       	cpc	r19, r1
 628:	d1 f7       	brne	.-12     	; 0x61e <enqueue+0x1c>
            q = q->next;
        q->next = p;
 62a:	95 83       	std	Z+5, r25	; 0x05
 62c:	84 83       	std	Z+4, r24	; 0x04
 62e:	08 95       	ret

00000630 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	00 d0       	rcall	.+0      	; 0x636 <dispatch+0x6>
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	9a 83       	std	Y+2, r25	; 0x02
 63c:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 63e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 642:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 646:	06 96       	adiw	r24, 0x06	; 6
 648:	0e 94 6d 04 	call	0x8da	; 0x8da <setjmp>
 64c:	89 2b       	or	r24, r25
 64e:	59 f4       	brne	.+22     	; 0x666 <dispatch+0x36>
        current = next;
 650:	89 81       	ldd	r24, Y+1	; 0x01
 652:	9a 81       	ldd	r25, Y+2	; 0x02
 654:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 658:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	06 96       	adiw	r24, 0x06	; 6
 662:	0e 94 8d 04 	call	0x91a	; 0x91a <longjmp>
    }
}
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret

00000670 <spawn>:

void spawn(void (* function)(int), int arg) {
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	00 d0       	rcall	.+0      	; 0x676 <spawn+0x6>
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 67a:	f8 94       	cli
    if (!initialized) initialize();
 67c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <initialized>
 680:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <initialized+0x1>
 684:	23 2b       	or	r18, r19
 686:	09 f5       	brne	.+66     	; 0x6ca <spawn+0x5a>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 688:	2c ee       	ldi	r18, 0xEC	; 236
 68a:	31 e0       	ldi	r19, 0x01	; 1
 68c:	30 93 84 01 	sts	0x0184, r19	; 0x800184 <threads+0x5>
 690:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <threads+0x4>
 694:	29 e5       	ldi	r18, 0x59	; 89
 696:	32 e0       	ldi	r19, 0x02	; 2
 698:	30 93 f1 01 	sts	0x01F1, r19	; 0x8001f1 <threads+0x72>
 69c:	20 93 f0 01 	sts	0x01F0, r18	; 0x8001f0 <threads+0x71>
 6a0:	26 ec       	ldi	r18, 0xC6	; 198
 6a2:	32 e0       	ldi	r19, 0x02	; 2
 6a4:	30 93 5e 02 	sts	0x025E, r19	; 0x80025e <threads+0xdf>
 6a8:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 6ac:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <threads+0x14c>
 6b0:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <threads+0x14b>
		//External input
	EIMSK = (1 << PCIE1);
 6b4:	20 e8       	ldi	r18, 0x80	; 128
 6b6:	2d bb       	out	0x1d, r18	; 29
	PCMSK1 = (1 << PCINT15);
 6b8:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	DDRB = (1 << PINB7);
 6bc:	24 b9       	out	0x04, r18	; 4

    initialized = 1;
 6be:	21 e0       	ldi	r18, 0x01	; 1
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <initialized+0x1>
 6c6:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6ca:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 6ce:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 6d2:	3a 83       	std	Y+2, r19	; 0x02
 6d4:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 6d6:	23 2b       	or	r18, r19
 6d8:	a9 f0       	breq	.+42     	; 0x704 <spawn+0x94>
        *queue = (*queue)->next;
 6da:	e9 81       	ldd	r30, Y+1	; 0x01
 6dc:	fa 81       	ldd	r31, Y+2	; 0x02
 6de:	44 81       	ldd	r20, Z+4	; 0x04
 6e0:	55 81       	ldd	r21, Z+5	; 0x05
 6e2:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 6e6:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	80 83       	st	Z, r24
    newp->arg = arg;
 6ee:	73 83       	std	Z+3, r23	; 0x03
 6f0:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 6f2:	15 82       	std	Z+5, r1	; 0x05
 6f4:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 6f6:	cf 01       	movw	r24, r30
 6f8:	06 96       	adiw	r24, 0x06	; 6
 6fa:	0e 94 6d 04 	call	0x8da	; 0x8da <setjmp>
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	49 f5       	brne	.+82     	; 0x754 <spawn+0xe4>
 702:	01 c0       	rjmp	.+2      	; 0x706 <spawn+0x96>
 704:	ff cf       	rjmp	.-2      	; 0x704 <spawn+0x94>
        ENABLE();
 706:	78 94       	sei
        current->function(current->arg);
 708:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 70c:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 710:	ed 91       	ld	r30, X+
 712:	fc 91       	ld	r31, X
 714:	11 97       	sbiw	r26, 0x01	; 1
 716:	12 96       	adiw	r26, 0x02	; 2
 718:	8d 91       	ld	r24, X+
 71a:	9c 91       	ld	r25, X
 71c:	13 97       	sbiw	r26, 0x03	; 3
 71e:	09 95       	icall
        DISABLE();
 720:	f8 94       	cli
        enqueue(current, &freeQ);
 722:	62 e0       	ldi	r22, 0x02	; 2
 724:	71 e0       	ldi	r23, 0x01	; 1
 726:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 72a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 72e:	0e 94 01 03 	call	0x602	; 0x602 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 732:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 736:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	51 f0       	breq	.+20     	; 0x752 <spawn+0xe2>
        *queue = (*queue)->next;
 73e:	fc 01       	movw	r30, r24
 740:	24 81       	ldd	r18, Z+4	; 0x04
 742:	35 81       	ldd	r19, Z+5	; 0x05
 744:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 748:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 74c:	0e 94 18 03 	call	0x630	; 0x630 <dispatch>
 750:	01 c0       	rjmp	.+2      	; 0x754 <spawn+0xe4>
 752:	ff cf       	rjmp	.-2      	; 0x752 <spawn+0xe2>
    }
    SETSTACK(&newp->context, &newp->stack);
 754:	e9 81       	ldd	r30, Y+1	; 0x01
 756:	fa 81       	ldd	r31, Y+2	; 0x02
 758:	36 96       	adiw	r30, 0x06	; 6
 75a:	89 81       	ldd	r24, Y+1	; 0x01
 75c:	9a 81       	ldd	r25, Y+2	; 0x02
 75e:	87 59       	subi	r24, 0x97	; 151
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	91 8b       	std	Z+17, r25	; 0x11
 764:	80 8b       	std	Z+16, r24	; 0x10
 766:	93 8b       	std	Z+19, r25	; 0x13
 768:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 76a:	6a e0       	ldi	r22, 0x0A	; 10
 76c:	71 e0       	ldi	r23, 0x01	; 1
 76e:	89 81       	ldd	r24, Y+1	; 0x01
 770:	9a 81       	ldd	r25, Y+2	; 0x02
 772:	0e 94 01 03 	call	0x602	; 0x602 <enqueue>
    ENABLE();
 776:	78 94       	sei
}
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <yield>:

void yield(void) 
{
	
	enqueue(current, &readyQ);
 782:	6a e0       	ldi	r22, 0x0A	; 10
 784:	71 e0       	ldi	r23, 0x01	; 1
 786:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 78a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 78e:	0e 94 01 03 	call	0x602	; 0x602 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 792:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 796:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 79a:	00 97       	sbiw	r24, 0x00	; 0
 79c:	51 f0       	breq	.+20     	; 0x7b2 <yield+0x30>
        *queue = (*queue)->next;
 79e:	fc 01       	movw	r30, r24
 7a0:	24 81       	ldd	r18, Z+4	; 0x04
 7a2:	35 81       	ldd	r19, Z+5	; 0x05
 7a4:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 7a8:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>

void yield(void) 
{
	
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 7ac:	0e 94 18 03 	call	0x630	; 0x630 <dispatch>
 7b0:	08 95       	ret
 7b2:	ff cf       	rjmp	.-2      	; 0x7b2 <yield+0x30>

000007b4 <lock>:

}

void lock(mutex *m) {
	DISABLE();
 7b4:	f8 94       	cli
	if(m->locked == NULL){
 7b6:	fc 01       	movw	r30, r24
 7b8:	20 81       	ld	r18, Z
 7ba:	31 81       	ldd	r19, Z+1	; 0x01
 7bc:	23 2b       	or	r18, r19
 7be:	29 f4       	brne	.+10     	; 0x7ca <lock+0x16>
		m->locked = 1;
 7c0:	21 e0       	ldi	r18, 0x01	; 1
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	31 83       	std	Z+1, r19	; 0x01
 7c6:	20 83       	st	Z, r18
 7c8:	1a c0       	rjmp	.+52     	; 0x7fe <lock+0x4a>
	}
	else{
		enqueue(current, &(m->waitQ));
 7ca:	bc 01       	movw	r22, r24
 7cc:	6e 5f       	subi	r22, 0xFE	; 254
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 7d8:	0e 94 01 03 	call	0x602	; 0x602 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 7dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 7e0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 7e4:	00 97       	sbiw	r24, 0x00	; 0
 7e6:	51 f0       	breq	.+20     	; 0x7fc <lock+0x48>
        *queue = (*queue)->next;
 7e8:	fc 01       	movw	r30, r24
 7ea:	24 81       	ldd	r18, Z+4	; 0x04
 7ec:	35 81       	ldd	r19, Z+5	; 0x05
 7ee:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 7f2:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>
	if(m->locked == NULL){
		m->locked = 1;
	}
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 7f6:	0e 94 18 03 	call	0x630	; 0x630 <dispatch>
 7fa:	01 c0       	rjmp	.+2      	; 0x7fe <lock+0x4a>
 7fc:	ff cf       	rjmp	.-2      	; 0x7fc <lock+0x48>
	}
		ENABLE();
 7fe:	78 94       	sei
 800:	08 95       	ret

00000802 <unlock>:
}

void unlock(mutex *m) {
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
	DISABLE();
 806:	f8 94       	cli
	if(m->waitQ != NULL){
 808:	fc 01       	movw	r30, r24
 80a:	22 81       	ldd	r18, Z+2	; 0x02
 80c:	33 81       	ldd	r19, Z+3	; 0x03
 80e:	23 2b       	or	r18, r19
 810:	b1 f0       	breq	.+44     	; 0x83e <unlock+0x3c>
 812:	ec 01       	movw	r28, r24
		enqueue(current, &readyQ);
 814:	6a e0       	ldi	r22, 0x0A	; 10
 816:	71 e0       	ldi	r23, 0x01	; 1
 818:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 81c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 820:	0e 94 01 03 	call	0x602	; 0x602 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 824:	8a 81       	ldd	r24, Y+2	; 0x02
 826:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 828:	00 97       	sbiw	r24, 0x00	; 0
 82a:	41 f0       	breq	.+16     	; 0x83c <unlock+0x3a>
        *queue = (*queue)->next;
 82c:	fc 01       	movw	r30, r24
 82e:	24 81       	ldd	r18, Z+4	; 0x04
 830:	35 81       	ldd	r19, Z+5	; 0x05
 832:	3b 83       	std	Y+3, r19	; 0x03
 834:	2a 83       	std	Y+2, r18	; 0x02

void unlock(mutex *m) {
	DISABLE();
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 836:	0e 94 18 03 	call	0x630	; 0x630 <dispatch>
 83a:	04 c0       	rjmp	.+8      	; 0x844 <unlock+0x42>
 83c:	ff cf       	rjmp	.-2      	; 0x83c <unlock+0x3a>
	}
	else{
		m->locked = NULL;
 83e:	fc 01       	movw	r30, r24
 840:	11 82       	std	Z+1, r1	; 0x01
 842:	10 82       	st	Z, r1
	}
	ENABLE();
 844:	78 94       	sei
}
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	08 95       	ret

0000084c <__divmodsi4>:
 84c:	05 2e       	mov	r0, r21
 84e:	97 fb       	bst	r25, 7
 850:	1e f4       	brtc	.+6      	; 0x858 <__divmodsi4+0xc>
 852:	00 94       	com	r0
 854:	0e 94 3d 04 	call	0x87a	; 0x87a <__negsi2>
 858:	57 fd       	sbrc	r21, 7
 85a:	07 d0       	rcall	.+14     	; 0x86a <__divmodsi4_neg2>
 85c:	0e 94 4b 04 	call	0x896	; 0x896 <__udivmodsi4>
 860:	07 fc       	sbrc	r0, 7
 862:	03 d0       	rcall	.+6      	; 0x86a <__divmodsi4_neg2>
 864:	4e f4       	brtc	.+18     	; 0x878 <__divmodsi4_exit>
 866:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__negsi2>

0000086a <__divmodsi4_neg2>:
 86a:	50 95       	com	r21
 86c:	40 95       	com	r20
 86e:	30 95       	com	r19
 870:	21 95       	neg	r18
 872:	3f 4f       	sbci	r19, 0xFF	; 255
 874:	4f 4f       	sbci	r20, 0xFF	; 255
 876:	5f 4f       	sbci	r21, 0xFF	; 255

00000878 <__divmodsi4_exit>:
 878:	08 95       	ret

0000087a <__negsi2>:
 87a:	90 95       	com	r25
 87c:	80 95       	com	r24
 87e:	70 95       	com	r23
 880:	61 95       	neg	r22
 882:	7f 4f       	sbci	r23, 0xFF	; 255
 884:	8f 4f       	sbci	r24, 0xFF	; 255
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	08 95       	ret

0000088a <__tablejump2__>:
 88a:	ee 0f       	add	r30, r30
 88c:	ff 1f       	adc	r31, r31
 88e:	05 90       	lpm	r0, Z+
 890:	f4 91       	lpm	r31, Z
 892:	e0 2d       	mov	r30, r0
 894:	09 94       	ijmp

00000896 <__udivmodsi4>:
 896:	a1 e2       	ldi	r26, 0x21	; 33
 898:	1a 2e       	mov	r1, r26
 89a:	aa 1b       	sub	r26, r26
 89c:	bb 1b       	sub	r27, r27
 89e:	fd 01       	movw	r30, r26
 8a0:	0d c0       	rjmp	.+26     	; 0x8bc <__udivmodsi4_ep>

000008a2 <__udivmodsi4_loop>:
 8a2:	aa 1f       	adc	r26, r26
 8a4:	bb 1f       	adc	r27, r27
 8a6:	ee 1f       	adc	r30, r30
 8a8:	ff 1f       	adc	r31, r31
 8aa:	a2 17       	cp	r26, r18
 8ac:	b3 07       	cpc	r27, r19
 8ae:	e4 07       	cpc	r30, r20
 8b0:	f5 07       	cpc	r31, r21
 8b2:	20 f0       	brcs	.+8      	; 0x8bc <__udivmodsi4_ep>
 8b4:	a2 1b       	sub	r26, r18
 8b6:	b3 0b       	sbc	r27, r19
 8b8:	e4 0b       	sbc	r30, r20
 8ba:	f5 0b       	sbc	r31, r21

000008bc <__udivmodsi4_ep>:
 8bc:	66 1f       	adc	r22, r22
 8be:	77 1f       	adc	r23, r23
 8c0:	88 1f       	adc	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	1a 94       	dec	r1
 8c6:	69 f7       	brne	.-38     	; 0x8a2 <__udivmodsi4_loop>
 8c8:	60 95       	com	r22
 8ca:	70 95       	com	r23
 8cc:	80 95       	com	r24
 8ce:	90 95       	com	r25
 8d0:	9b 01       	movw	r18, r22
 8d2:	ac 01       	movw	r20, r24
 8d4:	bd 01       	movw	r22, r26
 8d6:	cf 01       	movw	r24, r30
 8d8:	08 95       	ret

000008da <setjmp>:
 8da:	dc 01       	movw	r26, r24
 8dc:	2d 92       	st	X+, r2
 8de:	3d 92       	st	X+, r3
 8e0:	4d 92       	st	X+, r4
 8e2:	5d 92       	st	X+, r5
 8e4:	6d 92       	st	X+, r6
 8e6:	7d 92       	st	X+, r7
 8e8:	8d 92       	st	X+, r8
 8ea:	9d 92       	st	X+, r9
 8ec:	ad 92       	st	X+, r10
 8ee:	bd 92       	st	X+, r11
 8f0:	cd 92       	st	X+, r12
 8f2:	dd 92       	st	X+, r13
 8f4:	ed 92       	st	X+, r14
 8f6:	fd 92       	st	X+, r15
 8f8:	0d 93       	st	X+, r16
 8fa:	1d 93       	st	X+, r17
 8fc:	cd 93       	st	X+, r28
 8fe:	dd 93       	st	X+, r29
 900:	ff 91       	pop	r31
 902:	ef 91       	pop	r30
 904:	8d b7       	in	r24, 0x3d	; 61
 906:	8d 93       	st	X+, r24
 908:	8e b7       	in	r24, 0x3e	; 62
 90a:	8d 93       	st	X+, r24
 90c:	8f b7       	in	r24, 0x3f	; 63
 90e:	8d 93       	st	X+, r24
 910:	ed 93       	st	X+, r30
 912:	fd 93       	st	X+, r31
 914:	88 27       	eor	r24, r24
 916:	99 27       	eor	r25, r25
 918:	09 94       	ijmp

0000091a <longjmp>:
 91a:	dc 01       	movw	r26, r24
 91c:	cb 01       	movw	r24, r22
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	91 05       	cpc	r25, r1
 922:	81 1d       	adc	r24, r1
 924:	2d 90       	ld	r2, X+
 926:	3d 90       	ld	r3, X+
 928:	4d 90       	ld	r4, X+
 92a:	5d 90       	ld	r5, X+
 92c:	6d 90       	ld	r6, X+
 92e:	7d 90       	ld	r7, X+
 930:	8d 90       	ld	r8, X+
 932:	9d 90       	ld	r9, X+
 934:	ad 90       	ld	r10, X+
 936:	bd 90       	ld	r11, X+
 938:	cd 90       	ld	r12, X+
 93a:	dd 90       	ld	r13, X+
 93c:	ed 90       	ld	r14, X+
 93e:	fd 90       	ld	r15, X+
 940:	0d 91       	ld	r16, X+
 942:	1d 91       	ld	r17, X+
 944:	cd 91       	ld	r28, X+
 946:	dd 91       	ld	r29, X+
 948:	ed 91       	ld	r30, X+
 94a:	fd 91       	ld	r31, X+
 94c:	0d 90       	ld	r0, X+
 94e:	f8 94       	cli
 950:	fe bf       	out	0x3e, r31	; 62
 952:	0f be       	out	0x3f, r0	; 63
 954:	ed bf       	out	0x3d, r30	; 61
 956:	ed 91       	ld	r30, X+
 958:	fd 91       	ld	r31, X+
 95a:	09 94       	ijmp

0000095c <_exit>:
 95c:	f8 94       	cli

0000095e <__stop_program>:
 95e:	ff cf       	rjmp	.-2      	; 0x95e <__stop_program>
