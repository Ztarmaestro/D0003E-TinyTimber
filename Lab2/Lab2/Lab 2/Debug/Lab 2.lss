
Lab 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000009c6  00000a5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  00800104  00800104  00000a5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000120b  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4e  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c7  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  000030a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4f  00000000  00000000  00003834  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 c3 02 	jmp	0x586	; 0x586 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	74 00       	.word	0x0074	; ????
  5e:	7f 00       	.word	0x007f	; ????
  60:	89 00       	.word	0x0089	; ????
  62:	94 00       	.word	0x0094	; ????
  64:	9f 00       	.word	0x009f	; ????
  66:	aa 00       	.word	0x00aa	; ????
  68:	b6 00       	.word	0x00b6	; ????
  6a:	c2 00       	.word	0x00c2	; ????
  6c:	cc 00       	.word	0x00cc	; ????
  6e:	d8 00       	.word	0x00d8	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 ec       	ldi	r30, 0xC6	; 198
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 30       	cpi	r26, 0x04	; 4
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e0       	ldi	r26, 0x04	; 4
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 33       	cpi	r26, 0x33	; 51
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 15 03 	call	0x62a	; 0x62a <main>
  a6:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_Init>:
mutex mute = MUTEX_INIT;
//settings for avr
void LCD_Init(void)
{
	//setting for the AVR//
	CLKPR = 0x80;
  ae:	e1 e6       	ldi	r30, 0x61	; 97
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
  b6:	10 82       	st	Z, r1
	//external async clock, 1/3 bias, 1/4 duty cycle, 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX0) | (1 << LCDMUX1) | (1 << LCDPM0) | (1 << LCDPM1) | (1 << LCDPM2);
  b8:	87 eb       	ldi	r24, 0xB7	; 183
  ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	//clock divider N=8
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
  be:	87 e0       	ldi	r24, 0x07	; 7
  c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	//LCD low power, no frame interrupt no blanking
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  c4:	80 ec       	ldi	r24, 0xC0	; 192
  c6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	//Drive time 300ms, control voltage 3,35V
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  d0:	08 95       	ret

000000d2 <caseNumbers>:
}
//cases for number 0-9
void caseNumbers(char ch)
{
	//cases for every number 0-9
	switch (ch)
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	f0 97       	sbiw	r30, 0x30	; 48
  d8:	ea 30       	cpi	r30, 0x0A	; 10
  da:	f1 05       	cpc	r31, r1
  dc:	08 f0       	brcs	.+2      	; 0xe0 <caseNumbers+0xe>
  de:	73 c0       	rjmp	.+230    	; 0x1c6 <caseNumbers+0xf4>
  e0:	e2 5d       	subi	r30, 0xD2	; 210
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__tablejump2__>
	{
		case '0' :
		reg1 = 0x01;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x05;
  ee:	95 e0       	ldi	r25, 0x05	; 5
  f0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x05;
  f4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
  f8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
  fc:	08 95       	ret
		case '1' :
		reg1 = 0x00;
  fe:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <reg1>
		reg2 = 0x01;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x01;
 108:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reg3>
		reg4 = 0x00;
 10c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
		break;
 110:	08 95       	ret
		case '2' :
		reg1 = 0x01;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x01;
 118:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x0E;
 11c:	9e e0       	ldi	r25, 0x0E	; 14
 11e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 122:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 126:	08 95       	ret
		case '3' :
		reg1 = 0x01;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x01;
 12e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x0B;
 132:	9b e0       	ldi	r25, 0x0B	; 11
 134:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 138:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 13c:	08 95       	ret
		case '4' :
		reg1 = 0x00;
 13e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <reg1>
		reg2 = 0x05;
 142:	85 e0       	ldi	r24, 0x05	; 5
 144:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x0B;
 148:	8b e0       	ldi	r24, 0x0B	; 11
 14a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reg3>
		reg4 = 0x00;
 14e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
		break;
 152:	08 95       	ret
		case '5':
		reg1 = 0x01;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x04;
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x0B;
 160:	9b e0       	ldi	r25, 0x0B	; 11
 162:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 166:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 16a:	08 95       	ret
		case '6' :
		reg1 = 0x01;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x04;
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x0F;
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 17e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 182:	08 95       	ret
		case '7' :
		reg1 = 0x01;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x01;
 18a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <reg2>
		reg3 = 0x01;
 18e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reg3>
		reg4 = 0x00;
 192:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reg4>
		break;
 196:	08 95       	ret
		case '8' :
		reg1 = 0x01;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x05;
 19e:	95 e0       	ldi	r25, 0x05	; 5
 1a0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x0F;
 1a4:	9f e0       	ldi	r25, 0x0F	; 15
 1a6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 1aa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
		break;
 1ae:	08 95       	ret
		case '9' :
		reg1 = 0x01;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <reg1>
		reg2 = 0x05;
 1b6:	95 e0       	ldi	r25, 0x05	; 5
 1b8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <reg2>
		reg3 = 0x0B;
 1bc:	9b e0       	ldi	r25, 0x0B	; 11
 1be:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <reg3>
		reg4 = 0x01;
 1c2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reg4>
 1c6:	08 95       	ret

000001c8 <casePosition>:
//cases for all positions on the avr
void casePosition(int pos)
{
	//cases for each position
	//Bitmask and shifts are used to manipulate bits
	switch (pos)
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	91 05       	cpc	r25, r1
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <casePosition+0x8>
 1ce:	66 c0       	rjmp	.+204    	; 0x29c <casePosition+0xd4>
 1d0:	2c f4       	brge	.+10     	; 0x1dc <casePosition+0x14>
 1d2:	00 97       	sbiw	r24, 0x00	; 0
 1d4:	69 f0       	breq	.+26     	; 0x1f0 <casePosition+0x28>
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	61 f1       	breq	.+88     	; 0x232 <casePosition+0x6a>
 1da:	08 95       	ret
 1dc:	84 30       	cpi	r24, 0x04	; 4
 1de:	91 05       	cpc	r25, r1
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <casePosition+0x1c>
 1e2:	b2 c0       	rjmp	.+356    	; 0x348 <casePosition+0x180>
 1e4:	0c f4       	brge	.+2      	; 0x1e8 <casePosition+0x20>
 1e6:	7b c0       	rjmp	.+246    	; 0x2de <casePosition+0x116>
 1e8:	05 97       	sbiw	r24, 0x05	; 5
 1ea:	09 f4       	brne	.+2      	; 0x1ee <casePosition+0x26>
 1ec:	ce c0       	rjmp	.+412    	; 0x38a <casePosition+0x1c2>
 1ee:	08 95       	ret
	{
		case 0:
		LCDDR0  = (LCDDR0 & 0xF0) | reg1;
 1f0:	ec ee       	ldi	r30, 0xEC	; 236
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	80 7f       	andi	r24, 0xF0	; 240
 1f8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 1fc:	89 2b       	or	r24, r25
 1fe:	80 83       	st	Z, r24
		LCDDR5  = (LCDDR5 & 0xF0) | reg2;
 200:	e1 ef       	ldi	r30, 0xF1	; 241
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 20c:	89 2b       	or	r24, r25
 20e:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10 & 0xF0) | reg3;
 210:	e6 ef       	ldi	r30, 0xF6	; 246
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 21c:	89 2b       	or	r24, r25
 21e:	80 83       	st	Z, r24
		LCDDR15 = (LCDDR15 & 0xF0) | reg4;
 220:	eb ef       	ldi	r30, 0xFB	; 251
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 22c:	89 2b       	or	r24, r25
 22e:	80 83       	st	Z, r24
		
		break;
 230:	08 95       	ret
		case 1:
		LCDDR0  = (LCDDR0 & 0x0F) | reg1 << 4;
 232:	ec ee       	ldi	r30, 0xEC	; 236
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	20 81       	ld	r18, Z
 238:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 23c:	30 e1       	ldi	r19, 0x10	; 16
 23e:	93 9f       	mul	r25, r19
 240:	c0 01       	movw	r24, r0
 242:	11 24       	eor	r1, r1
 244:	92 2f       	mov	r25, r18
 246:	9f 70       	andi	r25, 0x0F	; 15
 248:	89 2b       	or	r24, r25
 24a:	80 83       	st	Z, r24
		LCDDR5  = (LCDDR5 & 0x0F) | reg2 << 4;
 24c:	e1 ef       	ldi	r30, 0xF1	; 241
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	20 81       	ld	r18, Z
 252:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 256:	30 e1       	ldi	r19, 0x10	; 16
 258:	93 9f       	mul	r25, r19
 25a:	c0 01       	movw	r24, r0
 25c:	11 24       	eor	r1, r1
 25e:	92 2f       	mov	r25, r18
 260:	9f 70       	andi	r25, 0x0F	; 15
 262:	89 2b       	or	r24, r25
 264:	80 83       	st	Z, r24
		LCDDR10 = (LCDDR10 & 0x0F) | reg3 << 4;
 266:	e6 ef       	ldi	r30, 0xF6	; 246
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	20 81       	ld	r18, Z
 26c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 270:	30 e1       	ldi	r19, 0x10	; 16
 272:	93 9f       	mul	r25, r19
 274:	c0 01       	movw	r24, r0
 276:	11 24       	eor	r1, r1
 278:	92 2f       	mov	r25, r18
 27a:	9f 70       	andi	r25, 0x0F	; 15
 27c:	89 2b       	or	r24, r25
 27e:	80 83       	st	Z, r24
		LCDDR15 = (LCDDR15 & 0x0F) | reg4 << 4;
 280:	eb ef       	ldi	r30, 0xFB	; 251
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	20 81       	ld	r18, Z
 286:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 28a:	30 e1       	ldi	r19, 0x10	; 16
 28c:	93 9f       	mul	r25, r19
 28e:	c0 01       	movw	r24, r0
 290:	11 24       	eor	r1, r1
 292:	92 2f       	mov	r25, r18
 294:	9f 70       	andi	r25, 0x0F	; 15
 296:	89 2b       	or	r24, r25
 298:	80 83       	st	Z, r24
		break;
 29a:	08 95       	ret
		case 2:
		LCDDR1  = (LCDDR1 & 0xF0) | reg1;
 29c:	ed ee       	ldi	r30, 0xED	; 237
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	80 7f       	andi	r24, 0xF0	; 240
 2a4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 2a8:	89 2b       	or	r24, r25
 2aa:	80 83       	st	Z, r24
		LCDDR6  = (LCDDR6 & 0xF0) |reg2;
 2ac:	e2 ef       	ldi	r30, 0xF2	; 242
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	80 7f       	andi	r24, 0xF0	; 240
 2b4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 2b8:	89 2b       	or	r24, r25
 2ba:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11 & 0xF0) |reg3;
 2bc:	e7 ef       	ldi	r30, 0xF7	; 247
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 7f       	andi	r24, 0xF0	; 240
 2c4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 2c8:	89 2b       	or	r24, r25
 2ca:	80 83       	st	Z, r24
		LCDDR16 = (LCDDR16 & 0xF0) |reg4;
 2cc:	ec ef       	ldi	r30, 0xFC	; 252
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	80 7f       	andi	r24, 0xF0	; 240
 2d4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 2d8:	89 2b       	or	r24, r25
 2da:	80 83       	st	Z, r24
		break;
 2dc:	08 95       	ret
		
		case 3:
		LCDDR1  = (LCDDR1 & 0x0F) | reg1 << 4;
 2de:	ed ee       	ldi	r30, 0xED	; 237
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	20 81       	ld	r18, Z
 2e4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 2e8:	30 e1       	ldi	r19, 0x10	; 16
 2ea:	93 9f       	mul	r25, r19
 2ec:	c0 01       	movw	r24, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	92 2f       	mov	r25, r18
 2f2:	9f 70       	andi	r25, 0x0F	; 15
 2f4:	89 2b       	or	r24, r25
 2f6:	80 83       	st	Z, r24
		LCDDR6  = (LCDDR6 & 0x0F) | reg2 << 4;
 2f8:	e2 ef       	ldi	r30, 0xF2	; 242
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	20 81       	ld	r18, Z
 2fe:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 302:	30 e1       	ldi	r19, 0x10	; 16
 304:	93 9f       	mul	r25, r19
 306:	c0 01       	movw	r24, r0
 308:	11 24       	eor	r1, r1
 30a:	92 2f       	mov	r25, r18
 30c:	9f 70       	andi	r25, 0x0F	; 15
 30e:	89 2b       	or	r24, r25
 310:	80 83       	st	Z, r24
		LCDDR11 = (LCDDR11 & 0x0F) | reg3 << 4;
 312:	e7 ef       	ldi	r30, 0xF7	; 247
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	20 81       	ld	r18, Z
 318:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 31c:	30 e1       	ldi	r19, 0x10	; 16
 31e:	93 9f       	mul	r25, r19
 320:	c0 01       	movw	r24, r0
 322:	11 24       	eor	r1, r1
 324:	92 2f       	mov	r25, r18
 326:	9f 70       	andi	r25, 0x0F	; 15
 328:	89 2b       	or	r24, r25
 32a:	80 83       	st	Z, r24
		LCDDR16 = (LCDDR16 & 0x0F) | reg4 << 4;
 32c:	ec ef       	ldi	r30, 0xFC	; 252
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	20 81       	ld	r18, Z
 332:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 336:	30 e1       	ldi	r19, 0x10	; 16
 338:	93 9f       	mul	r25, r19
 33a:	c0 01       	movw	r24, r0
 33c:	11 24       	eor	r1, r1
 33e:	92 2f       	mov	r25, r18
 340:	9f 70       	andi	r25, 0x0F	; 15
 342:	89 2b       	or	r24, r25
 344:	80 83       	st	Z, r24
		break;
 346:	08 95       	ret

		case 4:
		LCDDR2  = (LCDDR2 & 0xF0) |reg1;
 348:	ee ee       	ldi	r30, 0xEE	; 238
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 7f       	andi	r24, 0xF0	; 240
 350:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 354:	89 2b       	or	r24, r25
 356:	80 83       	st	Z, r24
		LCDDR7  = (LCDDR7 & 0xF0) |reg2;
 358:	e3 ef       	ldi	r30, 0xF3	; 243
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	80 7f       	andi	r24, 0xF0	; 240
 360:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 364:	89 2b       	or	r24, r25
 366:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12 & 0xF0) |reg3;
 368:	e8 ef       	ldi	r30, 0xF8	; 248
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	80 7f       	andi	r24, 0xF0	; 240
 370:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 374:	89 2b       	or	r24, r25
 376:	80 83       	st	Z, r24
		LCDDR17 = (LCDDR17 & 0xF0) |reg4;
 378:	ed ef       	ldi	r30, 0xFD	; 253
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	80 7f       	andi	r24, 0xF0	; 240
 380:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 384:	89 2b       	or	r24, r25
 386:	80 83       	st	Z, r24
		break;
 388:	08 95       	ret

		case 5:
		LCDDR2  = (LCDDR2 & 0x0F) | reg1 << 4;
 38a:	ee ee       	ldi	r30, 0xEE	; 238
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	20 81       	ld	r18, Z
 390:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <reg1>
 394:	30 e1       	ldi	r19, 0x10	; 16
 396:	93 9f       	mul	r25, r19
 398:	c0 01       	movw	r24, r0
 39a:	11 24       	eor	r1, r1
 39c:	92 2f       	mov	r25, r18
 39e:	9f 70       	andi	r25, 0x0F	; 15
 3a0:	89 2b       	or	r24, r25
 3a2:	80 83       	st	Z, r24
		LCDDR7  = (LCDDR7 & 0x0F) | reg2 << 4;
 3a4:	e3 ef       	ldi	r30, 0xF3	; 243
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	20 81       	ld	r18, Z
 3aa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <reg2>
 3ae:	30 e1       	ldi	r19, 0x10	; 16
 3b0:	93 9f       	mul	r25, r19
 3b2:	c0 01       	movw	r24, r0
 3b4:	11 24       	eor	r1, r1
 3b6:	92 2f       	mov	r25, r18
 3b8:	9f 70       	andi	r25, 0x0F	; 15
 3ba:	89 2b       	or	r24, r25
 3bc:	80 83       	st	Z, r24
		LCDDR12 = (LCDDR12 & 0x0F) | reg3 << 4;
 3be:	e8 ef       	ldi	r30, 0xF8	; 248
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	20 81       	ld	r18, Z
 3c4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <reg3>
 3c8:	30 e1       	ldi	r19, 0x10	; 16
 3ca:	93 9f       	mul	r25, r19
 3cc:	c0 01       	movw	r24, r0
 3ce:	11 24       	eor	r1, r1
 3d0:	92 2f       	mov	r25, r18
 3d2:	9f 70       	andi	r25, 0x0F	; 15
 3d4:	89 2b       	or	r24, r25
 3d6:	80 83       	st	Z, r24
		LCDDR17 = (LCDDR17 & 0x0F) | reg4 << 4;
 3d8:	ed ef       	ldi	r30, 0xFD	; 253
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	20 81       	ld	r18, Z
 3de:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <reg4>
 3e2:	30 e1       	ldi	r19, 0x10	; 16
 3e4:	93 9f       	mul	r25, r19
 3e6:	c0 01       	movw	r24, r0
 3e8:	11 24       	eor	r1, r1
 3ea:	92 2f       	mov	r25, r18
 3ec:	9f 70       	andi	r25, 0x0F	; 15
 3ee:	89 2b       	or	r24, r25
 3f0:	80 83       	st	Z, r24
 3f2:	08 95       	ret

000003f4 <writeChar>:
	}
}

//function to write a char at a position
void writeChar(char ch, int pos)
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	eb 01       	movw	r28, r22
	
	caseNumbers(ch);
 3fa:	0e 94 69 00 	call	0xd2	; 0xd2 <caseNumbers>
	casePosition(pos);
 3fe:	ce 01       	movw	r24, r28
 400:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <casePosition>
	
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <is_prime>:
long is_prime(long i)
{
 40a:	8f 92       	push	r8
 40c:	9f 92       	push	r9
 40e:	af 92       	push	r10
 410:	bf 92       	push	r11
 412:	cf 92       	push	r12
 414:	df 92       	push	r13
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	4b 01       	movw	r8, r22
 41c:	5c 01       	movw	r10, r24
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	88 16       	cp	r8, r24
 422:	91 04       	cpc	r9, r1
 424:	a1 04       	cpc	r10, r1
 426:	b1 04       	cpc	r11, r1
 428:	ac f1       	brlt	.+106    	; 0x494 <is_prime+0x8a>
		rest = i % n;
 42a:	d5 01       	movw	r26, r10
 42c:	c4 01       	movw	r24, r8
 42e:	81 70       	andi	r24, 0x01	; 1
 430:	99 27       	eor	r25, r25
 432:	aa 27       	eor	r26, r26
 434:	b0 78       	andi	r27, 0x80	; 128
 436:	bb 23       	and	r27, r27
 438:	54 f4       	brge	.+20     	; 0x44e <is_prime+0x44>
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	a1 09       	sbc	r26, r1
 43e:	b1 09       	sbc	r27, r1
 440:	8e 6f       	ori	r24, 0xFE	; 254
 442:	9f 6f       	ori	r25, 0xFF	; 255
 444:	af 6f       	ori	r26, 0xFF	; 255
 446:	bf 6f       	ori	r27, 0xFF	; 255
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	a1 1d       	adc	r26, r1
 44c:	b1 1d       	adc	r27, r1
		if (rest == 0){
 44e:	89 2b       	or	r24, r25
 450:	8a 2b       	or	r24, r26
 452:	8b 2b       	or	r24, r27
 454:	21 f1       	breq	.+72     	; 0x49e <is_prime+0x94>
 456:	c1 2c       	mov	r12, r1
 458:	d1 2c       	mov	r13, r1
 45a:	76 01       	movw	r14, r12
 45c:	68 94       	set
 45e:	c1 f8       	bld	r12, 1
 460:	0a c0       	rjmp	.+20     	; 0x476 <is_prime+0x6c>
}
long is_prime(long i)
{
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
		rest = i % n;
 462:	c5 01       	movw	r24, r10
 464:	b4 01       	movw	r22, r8
 466:	a7 01       	movw	r20, r14
 468:	96 01       	movw	r18, r12
 46a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__divmodsi4>
		if (rest == 0){
 46e:	67 2b       	or	r22, r23
 470:	68 2b       	or	r22, r24
 472:	69 2b       	or	r22, r25
 474:	c1 f0       	breq	.+48     	; 0x4a6 <is_prime+0x9c>
	
}
long is_prime(long i)
{
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	c8 1a       	sub	r12, r24
 47a:	d8 0a       	sbc	r13, r24
 47c:	e8 0a       	sbc	r14, r24
 47e:	f8 0a       	sbc	r15, r24
 480:	c8 14       	cp	r12, r8
 482:	d9 04       	cpc	r13, r9
 484:	ea 04       	cpc	r14, r10
 486:	fb 04       	cpc	r15, r11
 488:	61 f7       	brne	.-40     	; 0x462 <is_prime+0x58>
		rest = i % n;
		if (rest == 0){
			return 0;
		}
	}
	return 1;
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0c c0       	rjmp	.+24     	; 0x4ac <is_prime+0xa2>
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <is_prime+0xa2>
{
	long rest;
	for (long n = 2; n < i; n++){			//sqrt n is faster
		rest = i % n;
		if (rest == 0){
			return 0;
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	cb 01       	movw	r24, r22
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <is_prime+0xa2>
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	cb 01       	movw	r24, r22
		}
	}
	return 1;
}
 4ac:	ff 90       	pop	r15
 4ae:	ef 90       	pop	r14
 4b0:	df 90       	pop	r13
 4b2:	cf 90       	pop	r12
 4b4:	bf 90       	pop	r11
 4b6:	af 90       	pop	r10
 4b8:	9f 90       	pop	r9
 4ba:	8f 90       	pop	r8
 4bc:	08 95       	ret

000004be <printAt>:

void printAt(long num, int pos) {
 4be:	cf 92       	push	r12
 4c0:	df 92       	push	r13
 4c2:	ef 92       	push	r14
 4c4:	ff 92       	push	r15
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	6b 01       	movw	r12, r22
 4cc:	7c 01       	movw	r14, r24
 4ce:	ea 01       	movw	r28, r20
	lock(&mute);
 4d0:	84 e0       	ldi	r24, 0x04	; 4
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 0d 04 	call	0x81a	; 0x81a <lock>
	pp = pos;
 4d8:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <pp+0x1>
 4dc:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <pp>
	writeChar( (num % 100) / 10 + '0', pp);
 4e0:	c7 01       	movw	r24, r14
 4e2:	b6 01       	movw	r22, r12
 4e4:	24 e6       	ldi	r18, 0x64	; 100
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__divmodsi4>
 4f0:	2a e0       	ldi	r18, 0x0A	; 10
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__divmodsi4>
 4fc:	be 01       	movw	r22, r28
 4fe:	80 e3       	ldi	r24, 0x30	; 48
 500:	82 0f       	add	r24, r18
 502:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <writeChar>
	int loop_test;
	for(int test; test < 1000; test++){
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	88 3e       	cpi	r24, 0xE8	; 232
 50e:	23 e0       	ldi	r18, 0x03	; 3
 510:	92 07       	cpc	r25, r18
 512:	d9 f7       	brne	.-10     	; 0x50a <__stack+0xb>
		
		loop_test++;
		}
	pp++;
 514:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <pp>
 518:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <pp+0x1>
 51c:	21 96       	adiw	r28, 0x01	; 1
 51e:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <pp+0x1>
 522:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <pp>
	writeChar( num % 10 + '0', pp);
 526:	c7 01       	movw	r24, r14
 528:	b6 01       	movw	r22, r12
 52a:	2a e0       	ldi	r18, 0x0A	; 10
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__divmodsi4>
 536:	86 2f       	mov	r24, r22
 538:	be 01       	movw	r22, r28
 53a:	80 5d       	subi	r24, 0xD0	; 208
 53c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <writeChar>
	unlock(&mute);
 540:	84 e0       	ldi	r24, 0x04	; 4
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	0e 94 34 04 	call	0x868	; 0x868 <unlock>
//	yield();
}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	ff 90       	pop	r15
 54e:	ef 90       	pop	r14
 550:	df 90       	pop	r13
 552:	cf 90       	pop	r12
 554:	08 95       	ret

00000556 <computePrimes>:

void computePrimes(int pos) {
 556:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 558:	c1 2c       	mov	r12, r1
 55a:	d1 2c       	mov	r13, r1
 55c:	76 01       	movw	r14, r12
 55e:	c3 94       	inc	r12
		if (is_prime(n)) {
 560:	c7 01       	movw	r24, r14
 562:	b6 01       	movw	r22, r12
 564:	0e 94 05 02 	call	0x40a	; 0x40a <is_prime>
 568:	67 2b       	or	r22, r23
 56a:	68 2b       	or	r22, r24
 56c:	69 2b       	or	r22, r25
 56e:	29 f0       	breq	.+10     	; 0x57a <computePrimes+0x24>
			printAt(n, pos);
 570:	ae 01       	movw	r20, r28
 572:	c7 01       	movw	r24, r14
 574:	b6 01       	movw	r22, r12
 576:	0e 94 5f 02 	call	0x4be	; 0x4be <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	c8 1a       	sub	r12, r24
 57e:	d8 0a       	sbc	r13, r24
 580:	e8 0a       	sbc	r14, r24
 582:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 584:	ed cf       	rjmp	.-38     	; 0x560 <computePrimes+0xa>

00000586 <__vector_3>:
}

ISR(PCINT1_vect){
 586:	1f 92       	push	r1
 588:	0f 92       	push	r0
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	0f 92       	push	r0
 58e:	11 24       	eor	r1, r1
 590:	2f 93       	push	r18
 592:	3f 93       	push	r19
 594:	4f 93       	push	r20
 596:	5f 93       	push	r21
 598:	6f 93       	push	r22
 59a:	7f 93       	push	r23
 59c:	8f 93       	push	r24
 59e:	9f 93       	push	r25
 5a0:	af 93       	push	r26
 5a2:	bf 93       	push	r27
 5a4:	ef 93       	push	r30
 5a6:	ff 93       	push	r31
		if ((1 << PINB) == 0){
 5a8:	23 b1       	in	r18, 0x03	; 3
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <__vector_3+0x2e>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	2a 95       	dec	r18
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <__vector_3+0x2a>
 5b8:	89 2b       	or	r24, r25
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__vector_3+0x3a>
			yield();
 5bc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <yield>
		}
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <__vector_7>:
ISR(TIMER1_COMPA_vect){
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	6f 93       	push	r22
 5f6:	7f 93       	push	r23
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	ef 93       	push	r30
 602:	ff 93       	push	r31
	yield();
 604:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <yield>
}
 608:	ff 91       	pop	r31
 60a:	ef 91       	pop	r30
 60c:	bf 91       	pop	r27
 60e:	af 91       	pop	r26
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	7f 91       	pop	r23
 616:	6f 91       	pop	r22
 618:	5f 91       	pop	r21
 61a:	4f 91       	pop	r20
 61c:	3f 91       	pop	r19
 61e:	2f 91       	pop	r18
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <main>:

int main() {
	LCD_Init();
 62a:	0e 94 57 00 	call	0xae	; 0xae <LCD_Init>
	spawn(computePrimes, 0);
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	8b ea       	ldi	r24, 0xAB	; 171
 634:	92 e0       	ldi	r25, 0x02	; 2
 636:	0e 94 58 03 	call	0x6b0	; 0x6b0 <spawn>
	computePrimes(3);
 63a:	83 e0       	ldi	r24, 0x03	; 3
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 ab 02 	call	0x556	; 0x556 <computePrimes>

00000642 <enqueue>:
	;
	*/


static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 642:	dc 01       	movw	r26, r24
 644:	15 96       	adiw	r26, 0x05	; 5
 646:	1c 92       	st	X, r1
 648:	1e 92       	st	-X, r1
 64a:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 64c:	db 01       	movw	r26, r22
 64e:	ed 91       	ld	r30, X+
 650:	fc 91       	ld	r31, X
 652:	11 97       	sbiw	r26, 0x01	; 1
 654:	30 97       	sbiw	r30, 0x00	; 0
 656:	21 f4       	brne	.+8      	; 0x660 <enqueue+0x1e>
        *queue = p;
 658:	8d 93       	st	X+, r24
 65a:	9c 93       	st	X, r25
 65c:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 65e:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 660:	24 81       	ldd	r18, Z+4	; 0x04
 662:	35 81       	ldd	r19, Z+5	; 0x05
 664:	21 15       	cp	r18, r1
 666:	31 05       	cpc	r19, r1
 668:	d1 f7       	brne	.-12     	; 0x65e <enqueue+0x1c>
            q = q->next;
        q->next = p;
 66a:	95 83       	std	Z+5, r25	; 0x05
 66c:	84 83       	std	Z+4, r24	; 0x04
 66e:	08 95       	ret

00000670 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	00 d0       	rcall	.+0      	; 0x676 <dispatch+0x6>
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
 67a:	9a 83       	std	Y+2, r25	; 0x02
 67c:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 67e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 682:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 686:	06 96       	adiw	r24, 0x06	; 6
 688:	0e 94 a0 04 	call	0x940	; 0x940 <setjmp>
 68c:	89 2b       	or	r24, r25
 68e:	59 f4       	brne	.+22     	; 0x6a6 <dispatch+0x36>
        current = next;
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	9a 81       	ldd	r25, Y+2	; 0x02
 694:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 698:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 69c:	61 e0       	ldi	r22, 0x01	; 1
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	06 96       	adiw	r24, 0x06	; 6
 6a2:	0e 94 c0 04 	call	0x980	; 0x980 <longjmp>
    }
}
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <spawn>:

void spawn(void (* function)(int), int arg) {
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	00 d0       	rcall	.+0      	; 0x6b6 <spawn+0x6>
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
 6ba:	ac 01       	movw	r20, r24
    thread newp;

    DISABLE();
 6bc:	f8 94       	cli
    if (!initialized) initialize();
 6be:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <initialized>
 6c2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <initialized+0x1>
 6c6:	89 2b       	or	r24, r25
 6c8:	91 f5       	brne	.+100    	; 0x72e <spawn+0x7e>

	
static void initialize(void) {
		int i;
		for (i=0; i<NTHREADS-1; i++)
		threads[i].next = &threads[i+1];
 6ca:	8c ee       	ldi	r24, 0xEC	; 236
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <threads+0x5>
 6d2:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <threads+0x4>
 6d6:	89 e5       	ldi	r24, 0x59	; 89
 6d8:	92 e0       	ldi	r25, 0x02	; 2
 6da:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <threads+0x72>
 6de:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <threads+0x71>
 6e2:	86 ec       	ldi	r24, 0xC6	; 198
 6e4:	92 e0       	ldi	r25, 0x02	; 2
 6e6:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <threads+0xdf>
 6ea:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <threads+0xde>
		threads[NTHREADS-1].next = NULL;
 6ee:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <threads+0x14c>
 6f2:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <threads+0x14b>
		//External input
		EIMSK = (1 << PCIE1);
 6f6:	90 e8       	ldi	r25, 0x80	; 128
 6f8:	9d bb       	out	0x1d, r25	; 29
		PCMSK1 = (1 << PCINT15);
 6fa:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
		//DDRB = (1 << PINB7);
		//activate the button
		PORTB = (1 << PINB7);
 6fe:	95 b9       	out	0x05, r25	; 5
		//timer with prescaler 1024
		TCCR1B = (1<<CS12) | (1 << CS10) | (1 << WGM12);
 700:	8d e0       	ldi	r24, 0x0D	; 13
 702:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		//button setting
		PORTB = (1 << PINB7);
 706:	95 b9       	out	0x05, r25	; 5
		//50 ms period
		OCR1A = 0x187;
 708:	87 e8       	ldi	r24, 0x87	; 135
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 710:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		TIMSK1 = (1 << OCIE1A);
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

		//reset timer
		TCNT1 = 0;
 71a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 71e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		initialized = 1;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <initialized+0x1>
 72a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 72e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 732:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 736:	9a 83       	std	Y+2, r25	; 0x02
 738:	89 83       	std	Y+1, r24	; 0x01
    if (*queue) {
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	a1 f0       	breq	.+40     	; 0x766 <spawn+0xb6>
        *queue = (*queue)->next;
 73e:	fc 01       	movw	r30, r24
 740:	84 81       	ldd	r24, Z+4	; 0x04
 742:	95 81       	ldd	r25, Z+5	; 0x05
 744:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 748:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 74c:	51 83       	std	Z+1, r21	; 0x01
 74e:	40 83       	st	Z, r20
    newp->arg = arg;
 750:	73 83       	std	Z+3, r23	; 0x03
 752:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 754:	15 82       	std	Z+5, r1	; 0x05
 756:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 758:	cf 01       	movw	r24, r30
 75a:	06 96       	adiw	r24, 0x06	; 6
 75c:	0e 94 a0 04 	call	0x940	; 0x940 <setjmp>
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	49 f5       	brne	.+82     	; 0x7b6 <spawn+0x106>
 764:	01 c0       	rjmp	.+2      	; 0x768 <spawn+0xb8>
 766:	ff cf       	rjmp	.-2      	; 0x766 <spawn+0xb6>
        ENABLE();
 768:	78 94       	sei
        current->function(current->arg);
 76a:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 76e:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 772:	ed 91       	ld	r30, X+
 774:	fc 91       	ld	r31, X
 776:	11 97       	sbiw	r26, 0x01	; 1
 778:	12 96       	adiw	r26, 0x02	; 2
 77a:	8d 91       	ld	r24, X+
 77c:	9c 91       	ld	r25, X
 77e:	13 97       	sbiw	r26, 0x03	; 3
 780:	09 95       	icall
        DISABLE();
 782:	f8 94       	cli
        enqueue(current, &freeQ);
 784:	62 e0       	ldi	r22, 0x02	; 2
 786:	71 e0       	ldi	r23, 0x01	; 1
 788:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 78c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 790:	0e 94 21 03 	call	0x642	; 0x642 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 794:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 798:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 79c:	00 97       	sbiw	r24, 0x00	; 0
 79e:	51 f0       	breq	.+20     	; 0x7b4 <spawn+0x104>
        *queue = (*queue)->next;
 7a0:	fc 01       	movw	r30, r24
 7a2:	24 81       	ldd	r18, Z+4	; 0x04
 7a4:	35 81       	ldd	r19, Z+5	; 0x05
 7a6:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 7aa:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 7ae:	0e 94 38 03 	call	0x670	; 0x670 <dispatch>
 7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <spawn+0x106>
 7b4:	ff cf       	rjmp	.-2      	; 0x7b4 <spawn+0x104>
    }
    SETSTACK(&newp->context, &newp->stack);
 7b6:	e9 81       	ldd	r30, Y+1	; 0x01
 7b8:	fa 81       	ldd	r31, Y+2	; 0x02
 7ba:	36 96       	adiw	r30, 0x06	; 6
 7bc:	89 81       	ldd	r24, Y+1	; 0x01
 7be:	9a 81       	ldd	r25, Y+2	; 0x02
 7c0:	87 59       	subi	r24, 0x97	; 151
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	91 8b       	std	Z+17, r25	; 0x11
 7c6:	80 8b       	std	Z+16, r24	; 0x10
 7c8:	93 8b       	std	Z+19, r25	; 0x13
 7ca:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 7cc:	6a e0       	ldi	r22, 0x0A	; 10
 7ce:	71 e0       	ldi	r23, 0x01	; 1
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	9a 81       	ldd	r25, Y+2	; 0x02
 7d4:	0e 94 21 03 	call	0x642	; 0x642 <enqueue>
    ENABLE();
 7d8:	78 94       	sei
}
 7da:	0f 90       	pop	r0
 7dc:	0f 90       	pop	r0
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	08 95       	ret

000007e4 <yield>:

void yield(void) 
{
	DISABLE();	
 7e4:	f8 94       	cli
	enqueue(current, &readyQ);
 7e6:	6a e0       	ldi	r22, 0x0A	; 10
 7e8:	71 e0       	ldi	r23, 0x01	; 1
 7ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 7f2:	0e 94 21 03 	call	0x642	; 0x642 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 7f6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 7fa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 7fe:	00 97       	sbiw	r24, 0x00	; 0
 800:	59 f0       	breq	.+22     	; 0x818 <yield+0x34>
        *queue = (*queue)->next;
 802:	fc 01       	movw	r30, r24
 804:	24 81       	ldd	r18, Z+4	; 0x04
 806:	35 81       	ldd	r19, Z+5	; 0x05
 808:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 80c:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>

void yield(void) 
{
	DISABLE();	
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 810:	0e 94 38 03 	call	0x670	; 0x670 <dispatch>
	ENABLE();
 814:	78 94       	sei
 816:	08 95       	ret
 818:	ff cf       	rjmp	.-2      	; 0x818 <yield+0x34>

0000081a <lock>:
}

void lock(mutex *m) {
	DISABLE();
 81a:	f8 94       	cli
	if(m->locked == 0){
 81c:	fc 01       	movw	r30, r24
 81e:	20 81       	ld	r18, Z
 820:	31 81       	ldd	r19, Z+1	; 0x01
 822:	23 2b       	or	r18, r19
 824:	29 f4       	brne	.+10     	; 0x830 <lock+0x16>
		m->locked = 1;
 826:	21 e0       	ldi	r18, 0x01	; 1
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	31 83       	std	Z+1, r19	; 0x01
 82c:	20 83       	st	Z, r18
 82e:	1a c0       	rjmp	.+52     	; 0x864 <lock+0x4a>
	}
	else{
		enqueue(current, &(m->waitQ));
 830:	bc 01       	movw	r22, r24
 832:	6e 5f       	subi	r22, 0xFE	; 254
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 83a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 83e:	0e 94 21 03 	call	0x642	; 0x642 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 842:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <readyQ>
 846:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <readyQ+0x1>
    if (*queue) {
 84a:	00 97       	sbiw	r24, 0x00	; 0
 84c:	51 f0       	breq	.+20     	; 0x862 <lock+0x48>
        *queue = (*queue)->next;
 84e:	fc 01       	movw	r30, r24
 850:	24 81       	ldd	r18, Z+4	; 0x04
 852:	35 81       	ldd	r19, Z+5	; 0x05
 854:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <readyQ+0x1>
 858:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <readyQ>
	if(m->locked == 0){
		m->locked = 1;
	}
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 85c:	0e 94 38 03 	call	0x670	; 0x670 <dispatch>
 860:	01 c0       	rjmp	.+2      	; 0x864 <lock+0x4a>
 862:	ff cf       	rjmp	.-2      	; 0x862 <lock+0x48>
	}
	ENABLE();
 864:	78 94       	sei
 866:	08 95       	ret

00000868 <unlock>:
}

void unlock(mutex *m) {
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
	DISABLE();
 86c:	f8 94       	cli
	if(m->waitQ != 0){
 86e:	fc 01       	movw	r30, r24
 870:	22 81       	ldd	r18, Z+2	; 0x02
 872:	33 81       	ldd	r19, Z+3	; 0x03
 874:	23 2b       	or	r18, r19
 876:	b1 f0       	breq	.+44     	; 0x8a4 <unlock+0x3c>
 878:	ec 01       	movw	r28, r24
		enqueue(current, &readyQ);
 87a:	6a e0       	ldi	r22, 0x0A	; 10
 87c:	71 e0       	ldi	r23, 0x01	; 1
 87e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 882:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 886:	0e 94 21 03 	call	0x642	; 0x642 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 88a:	8a 81       	ldd	r24, Y+2	; 0x02
 88c:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 88e:	00 97       	sbiw	r24, 0x00	; 0
 890:	41 f0       	breq	.+16     	; 0x8a2 <unlock+0x3a>
        *queue = (*queue)->next;
 892:	fc 01       	movw	r30, r24
 894:	24 81       	ldd	r18, Z+4	; 0x04
 896:	35 81       	ldd	r19, Z+5	; 0x05
 898:	3b 83       	std	Y+3, r19	; 0x03
 89a:	2a 83       	std	Y+2, r18	; 0x02

void unlock(mutex *m) {
	DISABLE();
	if(m->waitQ != 0){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 89c:	0e 94 38 03 	call	0x670	; 0x670 <dispatch>
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <unlock+0x42>
 8a2:	ff cf       	rjmp	.-2      	; 0x8a2 <unlock+0x3a>
	}
	else{
		m->locked = 0;
 8a4:	fc 01       	movw	r30, r24
 8a6:	11 82       	std	Z+1, r1	; 0x01
 8a8:	10 82       	st	Z, r1
	}
	ENABLE();
 8aa:	78 94       	sei
}
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	08 95       	ret

000008b2 <__divmodsi4>:
 8b2:	05 2e       	mov	r0, r21
 8b4:	97 fb       	bst	r25, 7
 8b6:	1e f4       	brtc	.+6      	; 0x8be <__divmodsi4+0xc>
 8b8:	00 94       	com	r0
 8ba:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__negsi2>
 8be:	57 fd       	sbrc	r21, 7
 8c0:	07 d0       	rcall	.+14     	; 0x8d0 <__divmodsi4_neg2>
 8c2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__udivmodsi4>
 8c6:	07 fc       	sbrc	r0, 7
 8c8:	03 d0       	rcall	.+6      	; 0x8d0 <__divmodsi4_neg2>
 8ca:	4e f4       	brtc	.+18     	; 0x8de <__divmodsi4_exit>
 8cc:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__negsi2>

000008d0 <__divmodsi4_neg2>:
 8d0:	50 95       	com	r21
 8d2:	40 95       	com	r20
 8d4:	30 95       	com	r19
 8d6:	21 95       	neg	r18
 8d8:	3f 4f       	sbci	r19, 0xFF	; 255
 8da:	4f 4f       	sbci	r20, 0xFF	; 255
 8dc:	5f 4f       	sbci	r21, 0xFF	; 255

000008de <__divmodsi4_exit>:
 8de:	08 95       	ret

000008e0 <__negsi2>:
 8e0:	90 95       	com	r25
 8e2:	80 95       	com	r24
 8e4:	70 95       	com	r23
 8e6:	61 95       	neg	r22
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	08 95       	ret

000008f0 <__tablejump2__>:
 8f0:	ee 0f       	add	r30, r30
 8f2:	ff 1f       	adc	r31, r31
 8f4:	05 90       	lpm	r0, Z+
 8f6:	f4 91       	lpm	r31, Z
 8f8:	e0 2d       	mov	r30, r0
 8fa:	09 94       	ijmp

000008fc <__udivmodsi4>:
 8fc:	a1 e2       	ldi	r26, 0x21	; 33
 8fe:	1a 2e       	mov	r1, r26
 900:	aa 1b       	sub	r26, r26
 902:	bb 1b       	sub	r27, r27
 904:	fd 01       	movw	r30, r26
 906:	0d c0       	rjmp	.+26     	; 0x922 <__udivmodsi4_ep>

00000908 <__udivmodsi4_loop>:
 908:	aa 1f       	adc	r26, r26
 90a:	bb 1f       	adc	r27, r27
 90c:	ee 1f       	adc	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	a2 17       	cp	r26, r18
 912:	b3 07       	cpc	r27, r19
 914:	e4 07       	cpc	r30, r20
 916:	f5 07       	cpc	r31, r21
 918:	20 f0       	brcs	.+8      	; 0x922 <__udivmodsi4_ep>
 91a:	a2 1b       	sub	r26, r18
 91c:	b3 0b       	sbc	r27, r19
 91e:	e4 0b       	sbc	r30, r20
 920:	f5 0b       	sbc	r31, r21

00000922 <__udivmodsi4_ep>:
 922:	66 1f       	adc	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	1a 94       	dec	r1
 92c:	69 f7       	brne	.-38     	; 0x908 <__udivmodsi4_loop>
 92e:	60 95       	com	r22
 930:	70 95       	com	r23
 932:	80 95       	com	r24
 934:	90 95       	com	r25
 936:	9b 01       	movw	r18, r22
 938:	ac 01       	movw	r20, r24
 93a:	bd 01       	movw	r22, r26
 93c:	cf 01       	movw	r24, r30
 93e:	08 95       	ret

00000940 <setjmp>:
 940:	dc 01       	movw	r26, r24
 942:	2d 92       	st	X+, r2
 944:	3d 92       	st	X+, r3
 946:	4d 92       	st	X+, r4
 948:	5d 92       	st	X+, r5
 94a:	6d 92       	st	X+, r6
 94c:	7d 92       	st	X+, r7
 94e:	8d 92       	st	X+, r8
 950:	9d 92       	st	X+, r9
 952:	ad 92       	st	X+, r10
 954:	bd 92       	st	X+, r11
 956:	cd 92       	st	X+, r12
 958:	dd 92       	st	X+, r13
 95a:	ed 92       	st	X+, r14
 95c:	fd 92       	st	X+, r15
 95e:	0d 93       	st	X+, r16
 960:	1d 93       	st	X+, r17
 962:	cd 93       	st	X+, r28
 964:	dd 93       	st	X+, r29
 966:	ff 91       	pop	r31
 968:	ef 91       	pop	r30
 96a:	8d b7       	in	r24, 0x3d	; 61
 96c:	8d 93       	st	X+, r24
 96e:	8e b7       	in	r24, 0x3e	; 62
 970:	8d 93       	st	X+, r24
 972:	8f b7       	in	r24, 0x3f	; 63
 974:	8d 93       	st	X+, r24
 976:	ed 93       	st	X+, r30
 978:	fd 93       	st	X+, r31
 97a:	88 27       	eor	r24, r24
 97c:	99 27       	eor	r25, r25
 97e:	09 94       	ijmp

00000980 <longjmp>:
 980:	dc 01       	movw	r26, r24
 982:	cb 01       	movw	r24, r22
 984:	81 30       	cpi	r24, 0x01	; 1
 986:	91 05       	cpc	r25, r1
 988:	81 1d       	adc	r24, r1
 98a:	2d 90       	ld	r2, X+
 98c:	3d 90       	ld	r3, X+
 98e:	4d 90       	ld	r4, X+
 990:	5d 90       	ld	r5, X+
 992:	6d 90       	ld	r6, X+
 994:	7d 90       	ld	r7, X+
 996:	8d 90       	ld	r8, X+
 998:	9d 90       	ld	r9, X+
 99a:	ad 90       	ld	r10, X+
 99c:	bd 90       	ld	r11, X+
 99e:	cd 90       	ld	r12, X+
 9a0:	dd 90       	ld	r13, X+
 9a2:	ed 90       	ld	r14, X+
 9a4:	fd 90       	ld	r15, X+
 9a6:	0d 91       	ld	r16, X+
 9a8:	1d 91       	ld	r17, X+
 9aa:	cd 91       	ld	r28, X+
 9ac:	dd 91       	ld	r29, X+
 9ae:	ed 91       	ld	r30, X+
 9b0:	fd 91       	ld	r31, X+
 9b2:	0d 90       	ld	r0, X+
 9b4:	f8 94       	cli
 9b6:	fe bf       	out	0x3e, r31	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	ed bf       	out	0x3d, r30	; 61
 9bc:	ed 91       	ld	r30, X+
 9be:	fd 91       	ld	r31, X+
 9c0:	09 94       	ijmp

000009c2 <_exit>:
 9c2:	f8 94       	cli

000009c4 <__stop_program>:
 9c4:	ff cf       	rjmp	.-2      	; 0x9c4 <__stop_program>
